--- a/dnscrypt-proxy/sources.go
+++ b/dnscrypt-proxy/sources.go
@@ -98,24 +98,17 @@ func writeSource(f string, bin, sig []byte) (err error) {
 	return fSig.Commit()
 }
 
-func (source *Source) updateCache(bin, sig []byte, now time.Time) error {
+func (source *Source) updateCache(bin, sig []byte, now time.Time) {
 	f := source.cacheFile
-	// If the data is unchanged, update the files timestamps only
-	if bytes.Equal(source.bin, bin) {
-		_ = os.Chtimes(f, now, now)
-		_ = os.Chtimes(f+".minisig", now, now)
-		return nil
-	}
-	// Otherwise, write the new data and signature
-	if err := writeSource(f, bin, sig); err != nil {
-		dlog.Warnf("Source [%s] failed to update cache file [%s]: %v", source.name, f, err)
-		return err
+	var writeErr error // an error writing cache isn't fatal
+	if !bytes.Equal(source.bin, bin) {
+		if writeErr = writeSource(f, bin, sig); writeErr != nil {
+			source.bin = bin
+			return
+		}
 	}
-	source.bin = bin // In-memory copy of the cache file content
-	// The tests require the timestamps to be updated, no idea why
-	_ = os.Chtimes(f, now, now)
-	_ = os.Chtimes(f+".minisig", now, now)
-	return nil
+	os.Chtimes(f, now, now)
+	source.bin = bin
 }
 
 func (source *Source) parseURLs(urls []string) {
--- a/dnscrypt-proxy/xtransport.go
+++ b/dnscrypt-proxy/xtransport.go
@@ -280,11 +280,13 @@ func (xTransport *XTransport) rebuildTransport() {
 			if err != nil {
 				return nil, err
 			}
+			var udpConn *net.UDPConn
 			if xTransport.h3UDPConn == nil {
-				xTransport.h3UDPConn, err = net.ListenUDP("udp", &net.UDPAddr{IP: net.IPv4zero, Port: 0})
+				udpConn, err = net.ListenUDP("udp", &net.UDPAddr{IP: net.IPv4zero, Port: 0})
 				if err != nil {
 					return nil, err
 				}
+				xTransport.h3UDPConn = udpConn
 			}
 			return quic.DialEarlyContext(ctx, xTransport.h3UDPConn, udpAddr, host, tlsCfg, cfg)
 		}}
