#!/bin/sh /etc/rc.common

START=99
USE_PROCD=1

CONF="vlmcsd"
PROG="/usr/bin/vlmcsd"
INI="/etc/vlmcsd.ini"

# 获取 DNSMASQ 配置路径
if [ -f /etc/openwrt_release ]; then
    DNSMASQ_UCI_CONFIG="$(uci -q show "dhcp.@dnsmasq[0]" | awk 'NR==1 {split($0, conf, /[.=]/); print conf[2]}')"
    if [ -f "/tmp/etc/dnsmasq.conf.$DNSMASQ_UCI_CONFIG" ]; then
        DNSMASQ_CONF_DIR="$(awk -F '=' '/^conf-dir=/ {print $2}' "/tmp/etc/dnsmasq.conf.$DNSMASQ_UCI_CONFIG")"
    else
        DNSMASQ_CONF_DIR="/tmp/dnsmasq.d"
    fi
    DNSMASQ_VLMCSD="${DNSMASQ_CONF_DIR%*/}/dnsmasq-vlmcsd.conf"
fi

# 重启 crond 服务
restart_crond() {
    /etc/init.d/cron restart >/dev/null 2>&1
}

# 添加定时任务
add_cron() {
    [ -n "$log" ] || log="0"

    if [ "$log" -lt 7 ]; then
        if ! grep -wq "\* $log .*vlmcsd" /etc/crontabs/root; then
            grep -q vlmcsd /etc/crontabs/root && sed -i '/vlmcsd/d' /etc/crontabs/root
            echo "0 0 * * $log rm -f /var/log/vlmcsd.log" >> /etc/crontabs/root
            restart_crond
        fi
    else
        del_cron
    fi
}

# 删除定时任务
del_cron() {
    if grep -q vlmcsd /etc/crontabs/root; then
        sed -i '/vlmcsd/d' /etc/crontabs/root
        restart_crond
    fi
}

# 启动服务
start_service() {
    local enabled auto_activate internet_access conf log port

    # 加载配置
    config_load "$CONF"
    
    # 获取配置项
    config_get_bool enabled "config" "enabled" "0"
    config_get auto_activate "config" "auto_activate" "0"
    config_get internet_access "config" "internet_access" "0"
    config_get conf "config" "conf" "0"
    config_get log "config" "log" "0"
    config_get port "config" "port" "1688"

    # 如果服务未启用，停止并清理
    [ "$enabled" -eq "1" ] || {
        stop_service
        return 1
    }

    # 自动激活配置
    if [ "$auto_activate" -eq "1" ]; then
        hostname="$(uci -q get system.@system[0].hostname)"
        [ -n "$hostname" ] && echo "srv-host=_vlmcs._tcp,$hostname,$port,0,100" > "$DNSMASQ_VLMCSD"
        /etc/init.d/dnsmasq restart >/dev/null 2>&1
    fi

    # 使用配置文件或命令行参数启动服务
    procd_open_instance "$CONF"
    procd_set_param command "$PROG"
    procd_append_param command -D

    if [ "$conf" -eq "1" ]; then
        sed -i \
            -e 's/^[ \t]*\(Port.*\)/;\1/' \
            -e 's/.*\(Listen.*:\)[0-9]*/\1'"$port"'/' \
            -e 's/.*\(LogFile[ ]*=[ ]*\).*/\1\/var\/log\/vlmcsd\.log/' "$INI"

        procd_append_param command -i "$INI"
        procd_add_jail_mount "$INI"
    else
        procd_append_param command -P "$port"
        procd_append_param command -l /var/log/vlmcsd.log
    fi

    procd_set_param file "$INI"
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param respawn

    # 配置防火墙规则
    if [ "$internet_access" -eq "1" ]; then
        procd_open_data
        json_add_array firewall
            json_add_object ""
            json_add_string type rule
            json_add_string name "Allow-vlmcsd-tcp"
            json_add_string proto "tcp"
            json_add_string src "*"
            json_add_string dest_port "$port"
            json_add_string target "ACCEPT"
            json_close_object
        json_close_array
        procd_close_data
    fi

    procd_close_instance
    # 添加定时任务
    add_cron
}

# 服务启动后触发
service_started() {
    procd_set_config_changed firewall
}

# 停止服务
stop_service() {
    # 删除 DNSMASQ 配置文件
    rm -f "$DNSMASQ_VLMCSD"

    # 删除定时任务
    del_cron

    # 重启 dnsmasq 服务
    /etc/init.d/dnsmasq restart >/dev/null 2>&1

    # 删除日志文件
    rm -f /var/log/vlmcsd.log
}

# 服务停止后触发
service_stopped() {
    procd_set_config_changed firewall
}

# 服务触发器
service_triggers() {
    procd_add_reload_trigger "$CONF"
}

