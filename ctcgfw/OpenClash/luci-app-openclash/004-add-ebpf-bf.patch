diff --git a/luasrc/model/cbi/openclash/settings.lua b/luasrc/model/cbi/openclash/settings.lua
index 2b796dd..7f54234 100644
--- a/luasrc/model/cbi/openclash/settings.lua
+++ b/luasrc/model/cbi/openclash/settings.lua
@@ -102,6 +102,18 @@ o:value("direct", translate("Direct Proxy Mode"))
 o:value("script", translate("Script Proxy Mode (Tun Core Only)"))
 o.default = "rule"
 
+-- eBPF support setting
+o = s:taboption("op_mode", ListValue, "ebpf_action_interface", translate("eBPF Action Interface"))
+o.description = translate("Select outbound interface for eBPF to apply traffic management").."<br>"..font_red..bold_on.."1."..translate("Warning! Highly experimental configs. Will disable default firewall traffic inbound").."<br>2."..translate("Needs kernel support for eBPF functionality. And it takes about 130MB memory to starts").."<br>3."..translate("Might improve direct connection performance").."<br>4."..translate("Only support redir-host-tun")..bold_off..font_off
+o:value("0", translate("Disable"))
+o.default = "0"
+local interfaces = SYS.exec("ls -l /sys/class/net/ 2>/dev/null |awk '{print $9}' 2>/dev/null")
+for interface in string.gmatch(interfaces, "%S+") do
+   o:value(interface)
+end
+o:depends{en_mode = "redir-host-tun"}
+
+
 o = s:taboption("op_mode", Value, "delay_start", translate("Delay Start (s)"))
 o.description = translate("Delay Start On Boot")
 o.default = "0"
diff --git a/po/zh-cn/openclash.zh-cn.po b/po/zh-cn/openclash.zh-cn.po
index ef86070..c924019 100644
--- a/po/zh-cn/openclash.zh-cn.po
+++ b/po/zh-cn/openclash.zh-cn.po
@@ -3569,3 +3569,27 @@ msgstr "指定正确的 LAN 接口名称"
 
 msgid "For More Useful Meta Core Functions Go Wiki"
 msgstr "如需要了解更多关于 Meta 内核的功能，请前往 Wiki"
+
+msgid "Select outbound interface for eBPF to apply traffic management"
+msgstr "为 eBPF 指定流量出站接口"
+
+msgid "Warning! Highly experimental configs. Will disable default firewall traffic inbound"
+msgstr "警告！高度实验性的配置。将禁用默认防火墙入站流量"
+
+msgid "Needs kernel support for eBPF functionality. And it takes about 130MB memory to starts"
+msgstr "需要内核支持 eBPF 功能。启动时需要大约 130MB 内存"
+
+msgid "Might improve direct connection performance"
+msgstr "可提高直连性能"
+
+msgid "Only support redir-host-tun"
+msgstr "仅支持 redir-host（TUN）模式"
+
+msgid "eBPF Action Interface"
+msgstr "eBPF 出站接口"
+
+msgid "Error: intend to enable ebpf interface, but no kernel support found. Ignoring..."
+msgstr "错误：固件系统不支持 eBPF，跳过设置..."
+
+msgid "Tip: Escaping firewall settings due to eBPF interface:"
+msgstr "提示：因启用 eBPF 已跳过防火墙设置，eBPF 接口："
diff --git a/root/etc/config/openclash b/root/etc/config/openclash
index 9652741..2b018ed 100644
--- a/root/etc/config/openclash
+++ b/root/etc/config/openclash
@@ -28,6 +28,7 @@ config openclash 'config'
 	option servers_update '0'
 	option log_level '0'
 	option proxy_mode 'rule'
+	option ebpf_action_interface '0'
 	option intranet_allowed '1'
 	option enable_udp_proxy '1'
 	option disable_udp_quic '1'
diff --git a/root/etc/init.d/openclash b/root/etc/init.d/openclash
index 62f7dbe..579ac3a 100644
--- a/root/etc/init.d/openclash
+++ b/root/etc/init.d/openclash
@@ -29,6 +29,9 @@ LOCK_FILE="/tmp/lock/openclash.lock"
 PROXY_FWMARK="0x162"
 PROXY_ROUTE_TABLE="0x162"
 
+# Assume we have bpftool sets would set ebpf marker to 1
+KERNEL_EBPF_SUPPORT=$(bpftool version > /dev/null 2>&1 && echo '1' || echo '0')
+
 set_lock() {
    exec 888>"$LOCK_FILE" 2>/dev/null
    flock -x 888 2>/dev/null
@@ -793,7 +796,13 @@ start_run_core()
       chmod o+w /tmp/openclash.log 2>/dev/null
       chown nobody:nogroup /etc/openclash/core/* 2>/dev/null
       #使用nobody启动内核方便代理路由自身流量
-      capabilties="cap_sys_resource,cap_dac_override,cap_net_raw,cap_net_bind_service,cap_net_admin,cap_sys_ptrace,cap_sys_admin"
+      if [[ "${ebpf_int_name}" == "0" ]]; then
+         # Regular capabilities
+         capabilties="cap_sys_resource,cap_dac_override,cap_net_raw,cap_net_bind_service,cap_net_admin,cap_sys_ptrace,cap_sys_admin"
+      else
+         # Enhanced capabilities
+         capabilties="cap_sys_resource,cap_dac_override,cap_net_raw,cap_net_bind_service,cap_net_admin,cap_sys_ptrace,cap_sys_admin,CAP_PERFMON,cap_bpf"
+      fi
       capsh --caps="${capabilties}+eip" -- -c "capsh --user=nobody --addamb='${capabilties}' -- -c 'nohup $CLASH -d $CLASH_CONFIG -f \"$CONFIG_FILE\" >> $LOG_FILE 2>&1 &'" >> $LOG_FILE 2>&1
    fi
    uci -q set openclash.config.config_reload=1
@@ -1432,164 +1441,186 @@ if [ "$ipv6_enable" -eq 1 ]; then
    esac
 fi
 
-#NFTABLES
-if [ -n "$FW4" ]; then
-   LOG_OUT "Tip: Firewall4 was Detected, Use NFTABLE Rules..."
-   if [ "$china_ip_route" != "0" ] || [ "$disable_udp_quic" = "1" ]; then
-      nft 'flush set inet fw4 china_ip_route'
-      nft -f '/etc/openclash/china_ip_route.ipset'
-      CHNROUTE_WAIT=0
-      while ( [ -z "$(nft list sets |grep "set china_ip_route {")" ] && [ "$CHNROUTE_WAIT" -le 3 ] )
-      do
+if [[ "${ebpf_int_name}" == "0" ]]; then
+   #NFTABLES
+   if [ -n "$FW4" ]; then
+      LOG_OUT "Tip: Firewall4 was Detected, Use NFTABLE Rules..."
+      if [ "$china_ip_route" != "0" ] || [ "$disable_udp_quic" = "1" ]; then
+         nft 'flush set inet fw4 china_ip_route'
          nft -f '/etc/openclash/china_ip_route.ipset'
-      done
+         CHNROUTE_WAIT=0
+         while ( [ -z "$(nft list sets |grep "set china_ip_route {")" ] && [ "$CHNROUTE_WAIT" -le 3 ] )
+         do
+            nft -f '/etc/openclash/china_ip_route.ipset'
+         done
 
-      if [ "$enable_redirect_dns" != "2" ]; then
-         mkdir -p ${DNSMASQ_CONF_DIR}
-         echo "add set inet fw4 china_ip_route_pass { type ipv4_addr; flags interval; auto-merge; }" >>/tmp/openclash_china_ip_route_pass.list
-         [ -z `(awk '!/^$/&&!/^#/&&/(^([1-9]|1[0-9]|1[1-9]{2}|2[0-4][0-9]|25[0-5])\.)(([0-9]{1,2}|1[1-9]{2}|2[0-4][0-9]|25[0-5])\.){2}([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-5][0-9]|25[0-4])((\/[0-9][0-9])?)$/{printf("    %s,'" "'\n",$0)}' /etc/openclash/custom/openclash_custom_chnroute_pass.list)` ] || {
-            echo "define china_ip_route_pass = {" >/tmp/openclash_china_ip_route_pass.list
-            awk '!/^$/&&!/^#/&&/(^([1-9]|1[0-9]|1[1-9]{2}|2[0-4][0-9]|25[0-5])\.)(([0-9]{1,2}|1[1-9]{2}|2[0-4][0-9]|25[0-5])\.){2}([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-5][0-9]|25[0-4])((\/[0-9][0-9])?)$/{printf("    %s,'" "'\n",$0)}' /etc/openclash/custom/openclash_custom_chnroute_pass.list >>/tmp/openclash_china_ip_route_pass.list 2>/dev/null
-            echo "}" >>/tmp/openclash_china_ip_route_pass.list
-            echo 'add element inet fw4 china_ip_route_pass $china_ip_route_pass' >>/tmp/openclash_china_ip_route_pass.list
-         }
-         awk '!/^$/&&!/^#/&&!/(^([1-9]|1[0-9]|1[1-9]{2}|2[0-4][0-9]|25[0-5])\.)(([0-9]{1,2}|1[1-9]{2}|2[0-4][0-9]|25[0-5])\.){2}([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-5][0-9]|25[0-4])((\/[0-9][0-9])?)$/{printf("'${settype}'=/%s/'${nftflag}'china_ip_route_pass'" "'\n",$0)}' /etc/openclash/custom/openclash_custom_chnroute_pass.list >>${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute_pass.conf 2>/dev/null
-         nft 'flush set inet fw4 china_ip_route_pass'
-         nft -f '/tmp/openclash_china_ip_route_pass.list'
-         rm -rf /tmp/openclash_china_ip_route_pass.list
-
-         if [ "$en_mode" = "fake-ip" ] && [ "$china_ip_route" != "0" ]; then
-            cat "/etc/openclash/accelerated-domains.china.conf" |awk -v dns="${custom_china_domain_dns_server}" -F '/' '!/^$/&&!/^#/{print $1"/"$2"/"dns}' >${DNSMASQ_CONF_DIR}/dnsmasq_accelerated-domains.china.conf 2>/dev/null
-            for i in `awk '!/^$/&&!/^#/&&!/(^([1-9]|1[0-9]|1[1-9]{2}|2[0-4][0-9]|25[0-5])\.)(([0-9]{1,2}|1[1-9]{2}|2[0-4][0-9]|25[0-5])\.){2}([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-5][0-9]|25[0-4])((\/[0-9][0-9])?)$/{printf("%s\n",$0)}' /etc/openclash/custom/openclash_custom_chnroute_pass.list`
-            do
-               sed -i "/server=\/${i}\//d" ${DNSMASQ_CONF_DIR}/dnsmasq_accelerated-domains.china.conf
-            done
+         if [ "$enable_redirect_dns" != "2" ]; then
+            mkdir -p ${DNSMASQ_CONF_DIR}
+            echo "add set inet fw4 china_ip_route_pass { type ipv4_addr; flags interval; auto-merge; }" >>/tmp/openclash_china_ip_route_pass.list
+            [ -z `(awk '!/^$/&&!/^#/&&/(^([1-9]|1[0-9]|1[1-9]{2}|2[0-4][0-9]|25[0-5])\.)(([0-9]{1,2}|1[1-9]{2}|2[0-4][0-9]|25[0-5])\.){2}([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-5][0-9]|25[0-4])((\/[0-9][0-9])?)$/{printf("    %s,'" "'\n",$0)}' /etc/openclash/custom/openclash_custom_chnroute_pass.list)` ] || {
+               echo "define china_ip_route_pass = {" >/tmp/openclash_china_ip_route_pass.list
+               awk '!/^$/&&!/^#/&&/(^([1-9]|1[0-9]|1[1-9]{2}|2[0-4][0-9]|25[0-5])\.)(([0-9]{1,2}|1[1-9]{2}|2[0-4][0-9]|25[0-5])\.){2}([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-5][0-9]|25[0-4])((\/[0-9][0-9])?)$/{printf("    %s,'" "'\n",$0)}' /etc/openclash/custom/openclash_custom_chnroute_pass.list >>/tmp/openclash_china_ip_route_pass.list 2>/dev/null
+               echo "}" >>/tmp/openclash_china_ip_route_pass.list
+               echo 'add element inet fw4 china_ip_route_pass $china_ip_route_pass' >>/tmp/openclash_china_ip_route_pass.list
+            }
+            awk '!/^$/&&!/^#/&&!/(^([1-9]|1[0-9]|1[1-9]{2}|2[0-4][0-9]|25[0-5])\.)(([0-9]{1,2}|1[1-9]{2}|2[0-4][0-9]|25[0-5])\.){2}([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-5][0-9]|25[0-4])((\/[0-9][0-9])?)$/{printf("'${settype}'=/%s/'${nftflag}'china_ip_route_pass'" "'\n",$0)}' /etc/openclash/custom/openclash_custom_chnroute_pass.list >>${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute_pass.conf 2>/dev/null
+            nft 'flush set inet fw4 china_ip_route_pass'
+            nft -f '/tmp/openclash_china_ip_route_pass.list'
+            rm -rf /tmp/openclash_china_ip_route_pass.list
+
+            if [ "$en_mode" = "fake-ip" ] && [ "$china_ip_route" != "0" ]; then
+               cat "/etc/openclash/accelerated-domains.china.conf" |awk -v dns="${custom_china_domain_dns_server}" -F '/' '!/^$/&&!/^#/{print $1"/"$2"/"dns}' >${DNSMASQ_CONF_DIR}/dnsmasq_accelerated-domains.china.conf 2>/dev/null
+               for i in `awk '!/^$/&&!/^#/&&!/(^([1-9]|1[0-9]|1[1-9]{2}|2[0-4][0-9]|25[0-5])\.)(([0-9]{1,2}|1[1-9]{2}|2[0-4][0-9]|25[0-5])\.){2}([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-5][0-9]|25[0-4])((\/[0-9][0-9])?)$/{printf("%s\n",$0)}' /etc/openclash/custom/openclash_custom_chnroute_pass.list`
+               do
+                  sed -i "/server=\/${i}\//d" ${DNSMASQ_CONF_DIR}/dnsmasq_accelerated-domains.china.conf
+               done
+            fi
          fi
       fi
-   fi
-
-   #lan_google_dns_ac
-   if [ -n "$(uci -q get openclash.config.lan_block_google_dns_ips)" ]; then
-      nft 'add set inet fw4 lan_block_google_dns_ips { type ipv4_addr; flags interval; auto-merge; }'
-      nft 'add set inet fw4 lan_block_google_dns_ipv6s { type ipv6_addr; flags interval; auto-merge; }'
-      config_load "openclash"
-      config_list_foreach "config" "lan_block_google_dns_ips" nft_ac_add "lan_block_google_dns_ips" "lan_block_google_dns_ipv6s"
-   fi
-   if [ -n "$(uci -q get openclash.config.lan_block_google_dns_macs)" ]; then
-      nft 'add set inet fw4 lan_block_google_dns_macs { type ether_addr; }'
-      config_load "openclash"
-      config_list_foreach "config" "lan_block_google_dns_macs" nft_ac_add "lan_block_google_dns_macs"
-   fi
 
-   #lan_ac
-   if [ "$lan_ac_mode" = "0" ]; then
-      if [ -n "$(uci -q get openclash.config.lan_ac_black_ips)" ]; then
-         nft 'add set inet fw4 lan_ac_black_ips { type ipv4_addr; flags interval; auto-merge; }'
-         nft 'add set inet fw4 lan_ac_black_ipv6s { type ipv6_addr; flags interval; auto-merge; }'
+      #lan_google_dns_ac
+      if [ -n "$(uci -q get openclash.config.lan_block_google_dns_ips)" ]; then
+         nft 'add set inet fw4 lan_block_google_dns_ips { type ipv4_addr; flags interval; auto-merge; }'
+         nft 'add set inet fw4 lan_block_google_dns_ipv6s { type ipv6_addr; flags interval; auto-merge; }'
          config_load "openclash"
-         config_list_foreach "config" "lan_ac_black_ips" nft_ac_add "lan_ac_black_ips" "lan_ac_black_ipv6s"
+         config_list_foreach "config" "lan_block_google_dns_ips" nft_ac_add "lan_block_google_dns_ips" "lan_block_google_dns_ipv6s"
       fi
-      if [ -n "$(uci -q get openclash.config.lan_ac_black_macs)" ]; then
-         nft 'add set inet fw4 lan_ac_black_macs { type ether_addr; }'
+      if [ -n "$(uci -q get openclash.config.lan_block_google_dns_macs)" ]; then
+         nft 'add set inet fw4 lan_block_google_dns_macs { type ether_addr; }'
          config_load "openclash"
-         config_list_foreach "config" "lan_ac_black_macs" nft_ac_add "lan_ac_black_macs"
+         config_list_foreach "config" "lan_block_google_dns_macs" nft_ac_add "lan_block_google_dns_macs"
       fi
-   elif [ "$lan_ac_mode" = "1" ]; then
-      if [ -n "$(uci -q get openclash.config.lan_ac_white_ips)" ]; then
-         nft 'add set inet fw4 lan_ac_white_ips { type ipv4_addr; flags interval; auto-merge; }'
-         nft 'add set inet fw4 lan_ac_white_ipv6s { type ipv6_addr; flags interval; auto-merge; }'
-         config_load "openclash"
-         config_list_foreach "config" "lan_ac_white_ips" nft_ac_add "lan_ac_white_ips" "lan_ac_white_ipv6s"
+
+      #lan_ac
+      if [ "$lan_ac_mode" = "0" ]; then
+         if [ -n "$(uci -q get openclash.config.lan_ac_black_ips)" ]; then
+            nft 'add set inet fw4 lan_ac_black_ips { type ipv4_addr; flags interval; auto-merge; }'
+            nft 'add set inet fw4 lan_ac_black_ipv6s { type ipv6_addr; flags interval; auto-merge; }'
+            config_load "openclash"
+            config_list_foreach "config" "lan_ac_black_ips" nft_ac_add "lan_ac_black_ips" "lan_ac_black_ipv6s"
+         fi
+         if [ -n "$(uci -q get openclash.config.lan_ac_black_macs)" ]; then
+            nft 'add set inet fw4 lan_ac_black_macs { type ether_addr; }'
+            config_load "openclash"
+            config_list_foreach "config" "lan_ac_black_macs" nft_ac_add "lan_ac_black_macs"
+         fi
+      elif [ "$lan_ac_mode" = "1" ]; then
+         if [ -n "$(uci -q get openclash.config.lan_ac_white_ips)" ]; then
+            nft 'add set inet fw4 lan_ac_white_ips { type ipv4_addr; flags interval; auto-merge; }'
+            nft 'add set inet fw4 lan_ac_white_ipv6s { type ipv6_addr; flags interval; auto-merge; }'
+            config_load "openclash"
+            config_list_foreach "config" "lan_ac_white_ips" nft_ac_add "lan_ac_white_ips" "lan_ac_white_ipv6s"
+         fi
+         if [ -n "$(uci -q get openclash.config.lan_ac_white_macs)" ]; then
+            nft 'add set inet fw4 lan_ac_white_macs { type ether_addr; }'
+            config_load "openclash"
+            config_list_foreach "config" "lan_ac_white_macs" nft_ac_add "lan_ac_white_macs"
+         fi
       fi
-      if [ -n "$(uci -q get openclash.config.lan_ac_white_macs)" ]; then
-         nft 'add set inet fw4 lan_ac_white_macs { type ether_addr; }'
+
+      #wan ac
+      if [ -n "$(uci -q get openclash.config.wan_ac_black_ips)" ]; then
+         nft 'add set inet fw4 wan_ac_black_ips { type ipv4_addr; flags interval; auto-merge; }'
+         nft 'add set inet fw4 wan_ac_black_ipv6s { type ipv6_addr; flags interval; auto-merge; }'
          config_load "openclash"
-         config_list_foreach "config" "lan_ac_white_macs" nft_ac_add "lan_ac_white_macs"
+         config_list_foreach "config" "wan_ac_black_ips" nft_ac_add "wan_ac_black_ips" "wan_ac_black_ipv6s"
       fi
-   fi
-
-   #wan ac
-   if [ -n "$(uci -q get openclash.config.wan_ac_black_ips)" ]; then
-      nft 'add set inet fw4 wan_ac_black_ips { type ipv4_addr; flags interval; auto-merge; }'
-      nft 'add set inet fw4 wan_ac_black_ipv6s { type ipv6_addr; flags interval; auto-merge; }'
-      config_load "openclash"
-      config_list_foreach "config" "wan_ac_black_ips" nft_ac_add "wan_ac_black_ips" "wan_ac_black_ipv6s"
-   fi
 
-   #lan port ac
-   if [ -n "$(uci -q get openclash.config.lan_ac_black_ports)" ]; then
-      nft 'add set inet fw4 lan_ac_black_ports { type inet_service; }'
-      config_load "openclash"
-      config_list_foreach "config" "lan_ac_black_ports" nft_ac_add "lan_ac_black_ports"
-   fi
+      #lan port ac
+      if [ -n "$(uci -q get openclash.config.lan_ac_black_ports)" ]; then
+         nft 'add set inet fw4 lan_ac_black_ports { type inet_service; }'
+         config_load "openclash"
+         config_list_foreach "config" "lan_ac_black_ports" nft_ac_add "lan_ac_black_ports"
+      fi
 
-   #local
-   nft 'add set inet fw4 localnetwork { type ipv4_addr; flags interval; auto-merge; }'
-   #nft 'delete set inet fw4 localnetwork'
-   if [ -f "/etc/openclash/custom/openclash_custom_localnetwork_ipv4.list" ]; then
-      for line in `cat "/etc/openclash/custom/openclash_custom_localnetwork_ipv4.list"`
-      do
-         nft add element inet fw4 localnetwork { "$line" }
-      done
-   else
-      nft 'add element inet fw4 localnetwork { 0.0.0.0/8, 127.0.0.0/8, 10.0.0.0/8, 169.254.0.0/16, 192.168.0.0/16, 224.0.0.0/4, 240.0.0.0/4, 172.16.0.0/12, 100.64.0.0/10}'
-   fi
+      #local
+      nft 'add set inet fw4 localnetwork { type ipv4_addr; flags interval; auto-merge; }'
+      #nft 'delete set inet fw4 localnetwork'
+      if [ -f "/etc/openclash/custom/openclash_custom_localnetwork_ipv4.list" ]; then
+         for line in `cat "/etc/openclash/custom/openclash_custom_localnetwork_ipv4.list"`
+         do
+            nft add element inet fw4 localnetwork { "$line" }
+         done
+      else
+         nft 'add element inet fw4 localnetwork { 0.0.0.0/8, 127.0.0.0/8, 10.0.0.0/8, 169.254.0.0/16, 192.168.0.0/16, 224.0.0.0/4, 240.0.0.0/4, 172.16.0.0/12, 100.64.0.0/10}'
+      fi
 
-   if [ -n "$wan_ip4s" ]; then
-      for wan_ip4 in $wan_ip4s; do
-         nft add element inet fw4 localnetwork { "$wan_ip4" }
-      done
-   fi
+      if [ -n "$wan_ip4s" ]; then
+         for wan_ip4 in $wan_ip4s; do
+            nft add element inet fw4 localnetwork { "$wan_ip4" }
+         done
+      fi
 
-   #common ports
-   if [ -n "$common_ports" ] && [ "$common_ports" != "0" ]; then
-      nft 'add set inet fw4 common_ports { type inet_service; }'
-      for i in $common_port; do
-         nft add element inet fw4 common_ports { "$i" }
-      done
-   fi
+      #common ports
+      if [ -n "$common_ports" ] && [ "$common_ports" != "0" ]; then
+         nft 'add set inet fw4 common_ports { type inet_service; }'
+         for i in $common_port; do
+            nft add element inet fw4 common_ports { "$i" }
+         done
+      fi
 
-   #bypass gateway compatible
-   if [ "$bypass_gateway_compatible" -eq 1 ]; then
-      #nft 'delete chain inet fw4 openclash_post'
-      nft 'add chain inet fw4 openclash_post'
-      nft 'flush chain inet fw4 openclash_post'
-      nft 'add rule inet fw4 openclash_post ip saddr @localnetwork tcp sport @lan_ac_black_ports counter return'
-      nft add rule inet fw4 openclash_post meta mark "$PROXY_FWMARK" counter accept
-      nft 'add rule inet fw4 openclash_post ip daddr @localnetwork counter return'
-      nft 'add rule inet fw4 openclash_post meta nfproto {ipv4} fib saddr type != { local } meta skuid != 65534 counter masquerade'
-      nft add rule inet fw4 srcnat meta nfproto {ipv4} counter jump openclash_post comment \"OpenClash Bypass Gateway Compatible\"
-   fi
+      #bypass gateway compatible
+      if [ "$bypass_gateway_compatible" -eq 1 ]; then
+         #nft 'delete chain inet fw4 openclash_post'
+         nft 'add chain inet fw4 openclash_post'
+         nft 'flush chain inet fw4 openclash_post'
+         nft 'add rule inet fw4 openclash_post ip saddr @localnetwork tcp sport @lan_ac_black_ports counter return'
+         nft add rule inet fw4 openclash_post meta mark "$PROXY_FWMARK" counter accept
+         nft 'add rule inet fw4 openclash_post ip daddr @localnetwork counter return'
+         nft 'add rule inet fw4 openclash_post meta nfproto {ipv4} fib saddr type != { local } meta skuid != 65534 counter masquerade'
+         nft add rule inet fw4 srcnat meta nfproto {ipv4} counter jump openclash_post comment \"OpenClash Bypass Gateway Compatible\"
+      fi
 
-   #intranet allowed
-   if [ "$intranet_allowed" -eq 1 ]; then
-      if [ -n "$intranet_allowed_wan_name" ] && [ "$intranet_allowed_wan_name" != "0" ]; then
-         config_load "openclash"
-         config_list_foreach "config" "intranet_allowed_wan_name" wan_name_add
-      else
-         wan_ints=$(nft list chain inet fw4 input |grep -e "jump input_wan" 2>/dev/null |awk '{for (i=1;i<=NF;i++){if ($i ~ /iifname/ && $(i+1) != "{") {print $(i+1)} if ($i ~ /iifname/ && $(i+1) == "{"){for (j=i+1;j<=NF;j++){if ($j~ /}/) {out="";for (k=i+1;k<=j;k++){out=out" "$k};print out}}}}}' 2>/dev/null |sed 's/"//g'|sed 's/{//g'|sed 's/}//g'|sed 's/,//g')
-      fi
-      if [ -n "$wan_ints" ]; then
-         nft 'add chain inet fw4 openclash_wan_input'
-         nft 'flush chain inet fw4 openclash_wan_input'
-         for wan_int in $wan_ints; do
-            #nft delete rule inet fw4 input $(nft -a list chain inet fw4 input |grep "@localnetwork" |awk -F '# ' '{print$2}')
-            nft insert rule inet fw4 input position 0 iifname "$wan_int" ip saddr != @localnetwork counter jump openclash_wan_input
-         done
-         nft add rule inet fw4 openclash_wan_input udp dport {$proxy_port,$tproxy_port,$cn_port,$http_port,$socks_port,$mixed_port,$dns_port} counter reject
-         nft add rule inet fw4 openclash_wan_input tcp dport {$proxy_port,$tproxy_port,$cn_port,$http_port,$socks_port,$mixed_port,$dns_port} counter reject
-      else
-         LOG_OUT "Warning: Can't Settting Only Intranet Allowed Function, Get IPv4 WAN Interfaces error, Please Verify The Firewall's WAN Zone Name is wan, Ignore This IF The Device Does not Have a WAN Interfaces..."
+      #intranet allowed
+      if [ "$intranet_allowed" -eq 1 ]; then
+         if [ -n "$intranet_allowed_wan_name" ] && [ "$intranet_allowed_wan_name" != "0" ]; then
+            config_load "openclash"
+            config_list_foreach "config" "intranet_allowed_wan_name" wan_name_add
+         else
+            wan_ints=$(nft list chain inet fw4 input |grep -e "jump input_wan" 2>/dev/null |awk '{for (i=1;i<=NF;i++){if ($i ~ /iifname/ && $(i+1) != "{") {print $(i+1)} if ($i ~ /iifname/ && $(i+1) == "{"){for (j=i+1;j<=NF;j++){if ($j~ /}/) {out="";for (k=i+1;k<=j;k++){out=out" "$k};print out}}}}}' 2>/dev/null |sed 's/"//g'|sed 's/{//g'|sed 's/}//g'|sed 's/,//g')
+         fi
+         if [ -n "$wan_ints" ]; then
+            nft 'add chain inet fw4 openclash_wan_input'
+            nft 'flush chain inet fw4 openclash_wan_input'
+            for wan_int in $wan_ints; do
+               #nft delete rule inet fw4 input $(nft -a list chain inet fw4 input |grep "@localnetwork" |awk -F '# ' '{print$2}')
+               nft insert rule inet fw4 input position 0 iifname "$wan_int" ip saddr != @localnetwork counter jump openclash_wan_input
+            done
+            nft add rule inet fw4 openclash_wan_input udp dport {$proxy_port,$tproxy_port,$cn_port,$http_port,$socks_port,$mixed_port,$dns_port} counter reject
+            nft add rule inet fw4 openclash_wan_input tcp dport {$proxy_port,$tproxy_port,$cn_port,$http_port,$socks_port,$mixed_port,$dns_port} counter reject
+         else
+            LOG_OUT "Warning: Can't Settting Only Intranet Allowed Function, Get IPv4 WAN Interfaces error, Please Verify The Firewall's WAN Zone Name is wan, Ignore This IF The Device Does not Have a WAN Interfaces..."
+         fi
       fi
-   fi
 
-   DNSPORT=$(uci -q get dhcp.@dnsmasq[0].port)
-   if [ -z "$DNSPORT" ]; then
-      DNSPORT=$(netstat -nlp |grep -E '127.0.0.1:.*dnsmasq' |awk -F '127.0.0.1:' '{print $2}' |awk '{print $1}' |head -1 || echo 53)
-   fi
+      DNSPORT=$(uci -q get dhcp.@dnsmasq[0].port)
+      if [ -z "$DNSPORT" ]; then
+         DNSPORT=$(netstat -nlp |grep -E '127.0.0.1:.*dnsmasq' |awk -F '127.0.0.1:' '{print $2}' |awk '{print $1}' |head -1 || echo 53)
+      fi
 
-   if [ "$enable_redirect_dns" -eq 1 ]; then
-      if [ -z "$(nft list chain inet fw4 dstnat |grep 'OpenClash DNS Hijack')" ]; then
+      if [ "$enable_redirect_dns" -eq 1 ]; then
+         if [ -z "$(nft list chain inet fw4 dstnat |grep 'OpenClash DNS Hijack')" ]; then
+            if [ "$lan_ac_mode" != "1" ]; then
+               ACBLACKDNSFILTER=""
+               if [ "$lan_ac_mode" = "0" ]; then
+                  if [ -n "$(uci -q get openclash.config.lan_ac_black_ips)" ]; then
+                     ACBLACKDNSFILTER="ip saddr != @lan_ac_black_ips"
+                  fi
+                  if [ -n "$(uci -q get openclash.config.lan_ac_black_macs)" ]; then
+                     ACBLACKDNSFILTER="$ACBLACKDNSFILTER ether saddr != @lan_ac_black_macs"
+                  fi
+               fi
+               nft insert rule inet fw4 dstnat position 0 tcp dport 53 ${ACBLACKDNSFILTER} counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
+               nft insert rule inet fw4 dstnat position 0 udp dport 53 ${ACBLACKDNSFILTER} counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
+            else
+               nft insert rule inet fw4 dstnat position 0 tcp dport 53 ip saddr @lan_ac_white_ips counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
+               nft insert rule inet fw4 dstnat position 0 udp dport 53 ip saddr @lan_ac_white_ips counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
+               nft insert rule inet fw4 dstnat position 0 tcp dport 53 ether saddr @lan_ac_white_macs counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
+               nft insert rule inet fw4 dstnat position 0 udp dport 53 ether saddr @lan_ac_white_macs counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
+            fi
+         fi
+      elif [ "$enable_redirect_dns" -eq 2 ]; then
+         nft 'add chain inet fw4 openclash_dns_redirect'
          if [ "$lan_ac_mode" != "1" ]; then
             ACBLACKDNSFILTER=""
             if [ "$lan_ac_mode" = "0" ]; then
@@ -1600,829 +1631,830 @@ if [ -n "$FW4" ]; then
                   ACBLACKDNSFILTER="$ACBLACKDNSFILTER ether saddr != @lan_ac_black_macs"
                fi
             fi
-            nft insert rule inet fw4 dstnat position 0 tcp dport 53 ${ACBLACKDNSFILTER} counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
-            nft insert rule inet fw4 dstnat position 0 udp dport 53 ${ACBLACKDNSFILTER} counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
+            nft add rule inet fw4 openclash_dns_redirect tcp dport 53 ${ACBLACKDNSFILTER} counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
+            nft add rule inet fw4 openclash_dns_redirect udp dport 53 ${ACBLACKDNSFILTER} counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
          else
-            nft insert rule inet fw4 dstnat position 0 tcp dport 53 ip saddr @lan_ac_white_ips counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
-            nft insert rule inet fw4 dstnat position 0 udp dport 53 ip saddr @lan_ac_white_ips counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
-            nft insert rule inet fw4 dstnat position 0 tcp dport 53 ether saddr @lan_ac_white_macs counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
-            nft insert rule inet fw4 dstnat position 0 udp dport 53 ether saddr @lan_ac_white_macs counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
+            nft add rule inet fw4 openclash_dns_redirect tcp dport 53 ip saddr @lan_ac_white_ips counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
+            nft add rule inet fw4 openclash_dns_redirect udp dport 53 ip saddr @lan_ac_white_ips counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
+            nft add rule inet fw4 openclash_dns_redirect tcp dport 53 ether saddr @lan_ac_white_macs counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
+            nft add rule inet fw4 openclash_dns_redirect udp dport 53 ether saddr @lan_ac_white_macs counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
          fi
-      fi
-   elif [ "$enable_redirect_dns" -eq 2 ]; then
-      nft 'add chain inet fw4 openclash_dns_redirect'
-      if [ "$lan_ac_mode" != "1" ]; then
-         ACBLACKDNSFILTER=""
-         if [ "$lan_ac_mode" = "0" ]; then
-            if [ -n "$(uci -q get openclash.config.lan_ac_black_ips)" ]; then
-               ACBLACKDNSFILTER="ip saddr != @lan_ac_black_ips"
-            fi
-            if [ -n "$(uci -q get openclash.config.lan_ac_black_macs)" ]; then
-               ACBLACKDNSFILTER="$ACBLACKDNSFILTER ether saddr != @lan_ac_black_macs"
-            fi
+         nft 'insert rule inet fw4 dstnat position 0 tcp dport 53 counter jump openclash_dns_redirect'
+         nft 'insert rule inet fw4 dstnat position 0 udp dport 53 counter jump openclash_dns_redirect'
+         if [ "$router_self_proxy" = 1 ]; then
+            nft 'add chain inet fw4 nat_output { type nat hook output priority -1; }'
+            nft insert rule inet fw4 nat_output position 0 tcp dport 53 ip daddr {127.0.0.1} meta skuid != 65534 counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
+            nft insert rule inet fw4 nat_output position 0 udp dport 53 ip daddr {127.0.0.1} meta skuid != 65534 counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
          fi
-         nft add rule inet fw4 openclash_dns_redirect tcp dport 53 ${ACBLACKDNSFILTER} counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
-         nft add rule inet fw4 openclash_dns_redirect udp dport 53 ${ACBLACKDNSFILTER} counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
-      else
-         nft add rule inet fw4 openclash_dns_redirect tcp dport 53 ip saddr @lan_ac_white_ips counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
-         nft add rule inet fw4 openclash_dns_redirect udp dport 53 ip saddr @lan_ac_white_ips counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
-         nft add rule inet fw4 openclash_dns_redirect tcp dport 53 ether saddr @lan_ac_white_macs counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
-         nft add rule inet fw4 openclash_dns_redirect udp dport 53 ether saddr @lan_ac_white_macs counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
-      fi
-      nft 'insert rule inet fw4 dstnat position 0 tcp dport 53 counter jump openclash_dns_redirect'
-      nft 'insert rule inet fw4 dstnat position 0 udp dport 53 counter jump openclash_dns_redirect'
-      if [ "$router_self_proxy" = 1 ]; then
-         nft 'add chain inet fw4 nat_output { type nat hook output priority -1; }'
-         nft insert rule inet fw4 nat_output position 0 tcp dport 53 ip daddr {127.0.0.1} meta skuid != 65534 counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
-         nft insert rule inet fw4 nat_output position 0 udp dport 53 ip daddr {127.0.0.1} meta skuid != 65534 counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
-      fi
-   fi
-
-   if [ "$en_mode" = "fake-ip" ] && [ "$china_ip_route" != "0" ] && [ "$enable_redirect_dns" != "2" ]; then
-      LOG_OUT "Tip: Bypass Specified Regions IP May Cause the Dnsmasq Load For a Long Time After Restart in FAKE-IP Mode, Hijack the DNS to Core Untill the Dnsmasq Works Well..."
-      nft insert rule inet fw4 dstnat position 0 tcp dport 53 counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
-      nft insert rule inet fw4 dstnat position 0 udp dport 53 counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
-      nft 'add chain inet fw4 nat_output { type nat hook output priority -1; }'
-      nft insert rule inet fw4 nat_output position 0 tcp dport 53 meta skuid != 65534 counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
-      nft insert rule inet fw4 nat_output position 0 udp dport 53 meta skuid != 65534 counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
-      nft insert rule inet fw4 nat_output position 0 tcp dport 12353 meta skuid != 65534 counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
-      nft insert rule inet fw4 nat_output position 0 udp dport 12353 meta skuid != 65534 counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
-   fi
-
-   if [ -z "$en_mode_tun" ] || [ "$en_mode_tun" -eq 2 ]; then
-      #tcp
-      nft 'add chain inet fw4 openclash'
-      nft 'flush chain inet fw4 openclash'
-      nft add rule inet fw4 openclash ip daddr @localnetwork counter return
-      if [ -z "$en_mode_tun" ] && [ "$en_mode" = "fake-ip" ]; then
-         nft add rule inet fw4 openclash ip protocol tcp ip daddr { "$fakeip_range" } counter redirect to "$proxy_port"
-      fi
-      nft 'add rule inet fw4 openclash ip saddr @localnetwork tcp sport @lan_ac_black_ports counter return'
-      nft 'add rule inet fw4 openclash ip daddr @wan_ac_black_ips counter return'
-      nft 'add rule inet fw4 openclash ip saddr @lan_ac_black_ips counter return'
-      nft 'add rule inet fw4 openclash ether saddr @lan_ac_black_macs counter return'
-      if [ "$lan_ac_mode" = "1" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_ips)" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_macs)" ]; then
-         nft 'add rule inet fw4 openclash ether saddr != @lan_ac_white_macs ip saddr != @lan_ac_white_ips counter return'
-      else
-         nft 'add rule inet fw4 openclash ether saddr != @lan_ac_white_macs counter return'
-         nft 'add rule inet fw4 openclash ip saddr != @lan_ac_white_ips counter return'
       fi
 
-      if [ "$en_mode" = "redir-host" ]; then
-         nft 'add rule inet fw4 openclash tcp dport != @common_ports counter return'
+      if [ "$en_mode" = "fake-ip" ] && [ "$china_ip_route" != "0" ] && [ "$enable_redirect_dns" != "2" ]; then
+         LOG_OUT "Tip: Bypass Specified Regions IP May Cause the Dnsmasq Load For a Long Time After Restart in FAKE-IP Mode, Hijack the DNS to Core Untill the Dnsmasq Works Well..."
+         nft insert rule inet fw4 dstnat position 0 tcp dport 53 counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
+         nft insert rule inet fw4 dstnat position 0 udp dport 53 counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
+         nft 'add chain inet fw4 nat_output { type nat hook output priority -1; }'
+         nft insert rule inet fw4 nat_output position 0 tcp dport 53 meta skuid != 65534 counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
+         nft insert rule inet fw4 nat_output position 0 udp dport 53 meta skuid != 65534 counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
+         nft insert rule inet fw4 nat_output position 0 tcp dport 12353 meta skuid != 65534 counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
+         nft insert rule inet fw4 nat_output position 0 udp dport 12353 meta skuid != 65534 counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
       fi
-      if [ "$china_ip_route" != "0" ]; then
-         if [ "$china_ip_route" = "1" ]; then
-            rule="ip daddr @china_ip_route"
-         elif [ "$china_ip_route" = "2" ]; then
-            rule="ip daddr != @china_ip_route"
+
+      if [ -z "$en_mode_tun" ] || [ "$en_mode_tun" -eq 2 ]; then
+         #tcp
+         nft 'add chain inet fw4 openclash'
+         nft 'flush chain inet fw4 openclash'
+         nft add rule inet fw4 openclash ip daddr @localnetwork counter return
+         if [ -z "$en_mode_tun" ] && [ "$en_mode" = "fake-ip" ]; then
+            nft add rule inet fw4 openclash ip protocol tcp ip daddr { "$fakeip_range" } counter redirect to "$proxy_port"
+         fi
+         nft 'add rule inet fw4 openclash ip saddr @localnetwork tcp sport @lan_ac_black_ports counter return'
+         nft 'add rule inet fw4 openclash ip daddr @wan_ac_black_ips counter return'
+         nft 'add rule inet fw4 openclash ip saddr @lan_ac_black_ips counter return'
+         nft 'add rule inet fw4 openclash ether saddr @lan_ac_black_macs counter return'
+         if [ "$lan_ac_mode" = "1" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_ips)" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_macs)" ]; then
+            nft 'add rule inet fw4 openclash ether saddr != @lan_ac_white_macs ip saddr != @lan_ac_white_ips counter return'
+         else
+            nft 'add rule inet fw4 openclash ether saddr != @lan_ac_white_macs counter return'
+            nft 'add rule inet fw4 openclash ip saddr != @lan_ac_white_ips counter return'
          fi
-         [ "$enable_redirect_dns" != "2" ] && rule="$rule ip daddr != @china_ip_route_pass"
-         nft "add rule inet fw4 openclash $rule counter return"
-      fi
 
-      nft add rule inet fw4 openclash ip protocol tcp counter redirect to "$proxy_port"
-      nft 'add rule inet fw4 dstnat meta nfproto {ipv4} ip protocol tcp counter jump openclash'
-      if [ -z "$en_mode_tun" ]; then
-         #Google dns
-         nft insert rule inet fw4 dstnat position 0 ip daddr { 8.8.8.8, 8.8.4.4 } tcp dport 53 counter redirect to "$proxy_port" comment \"OpenClash Google DNS Hijack\"
-         #udp
-         if [ "$enable_udp_proxy" -eq 1 ]; then
-            modprobe nft_tproxy >/dev/null 2>&1
-            ip rule add fwmark "$PROXY_FWMARK" table "$PROXY_ROUTE_TABLE"
-            ip route add local 0.0.0.0/0 dev lo table "$PROXY_ROUTE_TABLE"
-            nft 'add chain inet fw4 openclash_mangle'
-            nft 'flush chain inet fw4 openclash_mangle'
-            nft 'add chain inet fw4 openclash_upnp'
-            nft 'flush chain inet fw4 openclash_upnp'
-            upnp_exclude
-            nft 'add rule inet fw4 openclash_mangle meta l4proto { udp } iifname lo counter return'
-            nft add rule inet fw4 openclash_mangle ip daddr @localnetwork counter return
-            nft 'add rule inet fw4 openclash_mangle udp dport 53 counter return'
-            if [ "$en_mode" = "fake-ip" ]; then
-               nft add rule inet fw4 openclash_mangle meta l4proto { udp } ip daddr { "$fakeip_range" } mark set "$PROXY_FWMARK" tproxy ip to 127.0.0.1:"$tproxy_port" counter accept
-            fi
-            nft 'add rule inet fw4 openclash_mangle ip saddr @localnetwork udp sport @lan_ac_black_ports counter return'
-            nft 'add rule inet fw4 openclash_mangle ip daddr @wan_ac_black_ips counter return'
-            nft 'add rule inet fw4 openclash_mangle ip saddr @lan_ac_black_ips counter return'
-            nft 'add rule inet fw4 openclash_mangle ether saddr @lan_ac_black_macs counter return'
-            if [ "$lan_ac_mode" = "1" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_ips)" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_macs)" ]; then
-               nft 'add rule inet fw4 openclash_mangle ether saddr != @lan_ac_white_macs ip saddr != @lan_ac_white_ips counter return'
-            else
-               nft 'add rule inet fw4 openclash_mangle ether saddr != @lan_ac_white_macs counter return'
-               nft 'add rule inet fw4 openclash_mangle ip saddr != @lan_ac_white_ips counter return'
+         if [ "$en_mode" = "redir-host" ]; then
+            nft 'add rule inet fw4 openclash tcp dport != @common_ports counter return'
+         fi
+         if [ "$china_ip_route" != "0" ]; then
+            if [ "$china_ip_route" = "1" ]; then
+               rule="ip daddr @china_ip_route"
+            elif [ "$china_ip_route" = "2" ]; then
+               rule="ip daddr != @china_ip_route"
             fi
+            [ "$enable_redirect_dns" != "2" ] && rule="$rule ip daddr != @china_ip_route_pass"
+            nft "add rule inet fw4 openclash $rule counter return"
+         fi
 
-            if [ "$en_mode" = "redir-host" ]; then
-               nft 'add rule inet fw4 openclash_mangle udp dport != @common_ports counter return'
-            fi
-            if [ "$china_ip_route" != "0" ]; then
-               if [ "$china_ip_route" = "1" ]; then
-                  rule="ip daddr @china_ip_route"
-               elif [ "$china_ip_route" = "2" ]; then
-                  rule="ip daddr != @china_ip_route"
+         nft add rule inet fw4 openclash ip protocol tcp counter redirect to "$proxy_port"
+         nft 'add rule inet fw4 dstnat meta nfproto {ipv4} ip protocol tcp counter jump openclash'
+         if [ -z "$en_mode_tun" ]; then
+            #Google dns
+            nft insert rule inet fw4 dstnat position 0 ip daddr { 8.8.8.8, 8.8.4.4 } tcp dport 53 counter redirect to "$proxy_port" comment \"OpenClash Google DNS Hijack\"
+            #udp
+            if [ "$enable_udp_proxy" -eq 1 ]; then
+               modprobe nft_tproxy >/dev/null 2>&1
+               ip rule add fwmark "$PROXY_FWMARK" table "$PROXY_ROUTE_TABLE"
+               ip route add local 0.0.0.0/0 dev lo table "$PROXY_ROUTE_TABLE"
+               nft 'add chain inet fw4 openclash_mangle'
+               nft 'flush chain inet fw4 openclash_mangle'
+               nft 'add chain inet fw4 openclash_upnp'
+               nft 'flush chain inet fw4 openclash_upnp'
+               upnp_exclude
+               nft 'add rule inet fw4 openclash_mangle meta l4proto { udp } iifname lo counter return'
+               nft add rule inet fw4 openclash_mangle ip daddr @localnetwork counter return
+               nft 'add rule inet fw4 openclash_mangle udp dport 53 counter return'
+               if [ "$en_mode" = "fake-ip" ]; then
+                  nft add rule inet fw4 openclash_mangle meta l4proto { udp } ip daddr { "$fakeip_range" } mark set "$PROXY_FWMARK" tproxy ip to 127.0.0.1:"$tproxy_port" counter accept
+               fi
+               nft 'add rule inet fw4 openclash_mangle ip saddr @localnetwork udp sport @lan_ac_black_ports counter return'
+               nft 'add rule inet fw4 openclash_mangle ip daddr @wan_ac_black_ips counter return'
+               nft 'add rule inet fw4 openclash_mangle ip saddr @lan_ac_black_ips counter return'
+               nft 'add rule inet fw4 openclash_mangle ether saddr @lan_ac_black_macs counter return'
+               if [ "$lan_ac_mode" = "1" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_ips)" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_macs)" ]; then
+                  nft 'add rule inet fw4 openclash_mangle ether saddr != @lan_ac_white_macs ip saddr != @lan_ac_white_ips counter return'
+               else
+                  nft 'add rule inet fw4 openclash_mangle ether saddr != @lan_ac_white_macs counter return'
+                  nft 'add rule inet fw4 openclash_mangle ip saddr != @lan_ac_white_ips counter return'
                fi
-               [ "$enable_redirect_dns" != "2" ] && rule="$rule ip daddr != @china_ip_route_pass"
-               nft "add rule inet fw4 openclash_mangle $rule counter return"
-            fi
-
-            nft 'add rule inet fw4 openclash_mangle ip protocol udp counter jump openclash_upnp'
-
-            nft add rule inet fw4 openclash_mangle meta l4proto { udp } mark set "$PROXY_FWMARK" tproxy ip to 127.0.0.1:"$tproxy_port" counter accept
-            nft 'add rule inet fw4 mangle_prerouting meta nfproto {ipv4} ip protocol udp counter jump openclash_mangle'
 
-         elif [ "$en_mode" = "fake-ip" ]; then
-            modprobe nft_tproxy >/dev/null 2>&1
-            ip rule add fwmark "$PROXY_FWMARK" table "$PROXY_ROUTE_TABLE"
-            ip route add local 0.0.0.0/0 dev lo table "$PROXY_ROUTE_TABLE"
-            nft 'add chain inet fw4 openclash_mangle'
-            nft 'flush chain inet fw4 openclash_mangle'
-            nft 'add rule inet fw4 openclash_mangle meta l4proto { udp } iifname lo counter return'
-            nft add rule inet fw4 openclash_mangle meta l4proto { udp } ip daddr { "$fakeip_range" } mark set "$PROXY_FWMARK" tproxy ip to 127.0.0.1:"$tproxy_port" counter accept 2>/dev/null
-            nft 'add rule inet fw4 mangle_prerouting meta nfproto {ipv4} ip protocol udp counter jump openclash_mangle'
+               if [ "$en_mode" = "redir-host" ]; then
+                  nft 'add rule inet fw4 openclash_mangle udp dport != @common_ports counter return'
+               fi
+               if [ "$china_ip_route" != "0" ]; then
+                  if [ "$china_ip_route" = "1" ]; then
+                     rule="ip daddr @china_ip_route"
+                  elif [ "$china_ip_route" = "2" ]; then
+                     rule="ip daddr != @china_ip_route"
+                  fi
+                  [ "$enable_redirect_dns" != "2" ] && rule="$rule ip daddr != @china_ip_route_pass"
+                  nft "add rule inet fw4 openclash_mangle $rule counter return"
+               fi
 
-            if [ "$router_self_proxy" = "1" ] || ([ "$enable_redirect_dns" != "2" ] && [ "$en_mode" = "fake-ip" ]); then
-               nft 'add chain inet fw4 openclash_mangle_output'
-               nft 'flush chain inet fw4 openclash_mangle_output'
-               nft add rule inet fw4 openclash_mangle_output meta l4proto { udp } ip daddr { "$fakeip_range" } mark set "$PROXY_FWMARK" counter
-               nft 'add rule inet fw4 mangle_output meta nfproto {ipv4} ip protocol udp counter jump openclash_mangle_output'
+               nft 'add rule inet fw4 openclash_mangle ip protocol udp counter jump openclash_upnp'
+
+               nft add rule inet fw4 openclash_mangle meta l4proto { udp } mark set "$PROXY_FWMARK" tproxy ip to 127.0.0.1:"$tproxy_port" counter accept
+               nft 'add rule inet fw4 mangle_prerouting meta nfproto {ipv4} ip protocol udp counter jump openclash_mangle'
+
+            elif [ "$en_mode" = "fake-ip" ]; then
+               modprobe nft_tproxy >/dev/null 2>&1
+               ip rule add fwmark "$PROXY_FWMARK" table "$PROXY_ROUTE_TABLE"
+               ip route add local 0.0.0.0/0 dev lo table "$PROXY_ROUTE_TABLE"
+               nft 'add chain inet fw4 openclash_mangle'
+               nft 'flush chain inet fw4 openclash_mangle'
+               nft 'add rule inet fw4 openclash_mangle meta l4proto { udp } iifname lo counter return'
+               nft add rule inet fw4 openclash_mangle meta l4proto { udp } ip daddr { "$fakeip_range" } mark set "$PROXY_FWMARK" tproxy ip to 127.0.0.1:"$tproxy_port" counter accept 2>/dev/null
+               nft 'add rule inet fw4 mangle_prerouting meta nfproto {ipv4} ip protocol udp counter jump openclash_mangle'
+
+               if [ "$router_self_proxy" = "1" ] || ([ "$enable_redirect_dns" != "2" ] && [ "$en_mode" = "fake-ip" ]); then
+                  nft 'add chain inet fw4 openclash_mangle_output'
+                  nft 'flush chain inet fw4 openclash_mangle_output'
+                  nft add rule inet fw4 openclash_mangle_output meta l4proto { udp } ip daddr { "$fakeip_range" } mark set "$PROXY_FWMARK" counter
+                  nft 'add rule inet fw4 mangle_output meta nfproto {ipv4} ip protocol udp counter jump openclash_mangle_output'
+               fi
             fi
-         fi
 
-         #quic
-         if [ "$disable_udp_quic" -eq 1 ]; then
-            if [ "$china_ip_route" = "2" ]; then
-               nft insert rule inet fw4 input position 0 udp dport 443 ip daddr @china_ip_route counter reject comment \"OpenClash QUIC REJECT\"
-            else
-               nft insert rule inet fw4 input position 0 udp dport 443 ip daddr != @china_ip_route counter reject comment \"OpenClash QUIC REJECT\"
+            #quic
+            if [ "$disable_udp_quic" -eq 1 ]; then
+               if [ "$china_ip_route" = "2" ]; then
+                  nft insert rule inet fw4 input position 0 udp dport 443 ip daddr @china_ip_route counter reject comment \"OpenClash QUIC REJECT\"
+               else
+                  nft insert rule inet fw4 input position 0 udp dport 443 ip daddr != @china_ip_route counter reject comment \"OpenClash QUIC REJECT\"
+               fi
             fi
          fi
-      fi
 
-      if [ "$router_self_proxy" = "1" ] || ([ "$enable_redirect_dns" != "2" ] && [ "$en_mode" = "fake-ip" ]); then
-         nft 'add chain inet fw4 openclash_output'
-         nft 'flush chain inet fw4 openclash_output'
-         nft 'add rule inet fw4 openclash_output ip daddr @localnetwork counter return'
-         nft 'add rule inet fw4 openclash_output ip saddr @localnetwork tcp sport @lan_ac_black_ports counter return'
+         if [ "$router_self_proxy" = "1" ] || ([ "$enable_redirect_dns" != "2" ] && [ "$en_mode" = "fake-ip" ]); then
+            nft 'add chain inet fw4 openclash_output'
+            nft 'flush chain inet fw4 openclash_output'
+            nft 'add rule inet fw4 openclash_output ip daddr @localnetwork counter return'
+            nft 'add rule inet fw4 openclash_output ip saddr @localnetwork tcp sport @lan_ac_black_ports counter return'
 
-         if [ "$en_mode" = "fake-ip" ] && [ "$en_mode_tun" != "1" ]; then
-            nft add rule inet fw4 openclash_output ip protocol tcp ip daddr { "$fakeip_range" } skuid != 65534 counter redirect to "$proxy_port"
-         fi
-         if [ "$router_self_proxy" = "1" ]; then
-            nft 'add rule inet fw4 openclash_output skuid != 65534 ip daddr @wan_ac_black_ips counter return'
-            if [ "$en_mode" = "redir-host" ]; then
-               nft add rule inet fw4 openclash_output tcp dport != @common_ports skuid != 65534 counter return
+            if [ "$en_mode" = "fake-ip" ] && [ "$en_mode_tun" != "1" ]; then
+               nft add rule inet fw4 openclash_output ip protocol tcp ip daddr { "$fakeip_range" } skuid != 65534 counter redirect to "$proxy_port"
             fi
-            if [ "$china_ip_route" != "0" ]; then
-               if [ "$china_ip_route" = "1" ]; then
-                  rule="ip daddr @china_ip_route"
-               elif [ "$china_ip_route" = "2" ]; then
-                  rule="ip daddr != @china_ip_route"
+            if [ "$router_self_proxy" = "1" ]; then
+               nft 'add rule inet fw4 openclash_output skuid != 65534 ip daddr @wan_ac_black_ips counter return'
+               if [ "$en_mode" = "redir-host" ]; then
+                  nft add rule inet fw4 openclash_output tcp dport != @common_ports skuid != 65534 counter return
+               fi
+               if [ "$china_ip_route" != "0" ]; then
+                  if [ "$china_ip_route" = "1" ]; then
+                     rule="ip daddr @china_ip_route"
+                  elif [ "$china_ip_route" = "2" ]; then
+                     rule="ip daddr != @china_ip_route"
+                  fi
+                  [ "$enable_redirect_dns" != "2" ] && rule="$rule ip daddr != @china_ip_route_pass"
+                  nft "add rule inet fw4 openclash_output skuid != 65534 $rule counter return"
                fi
-               [ "$enable_redirect_dns" != "2" ] && rule="$rule ip daddr != @china_ip_route_pass"
-               nft "add rule inet fw4 openclash_output skuid != 65534 $rule counter return"
+               nft add rule inet fw4 openclash_output ip protocol tcp skuid != 65534 counter redirect to "$proxy_port"
             fi
-            nft add rule inet fw4 openclash_output ip protocol tcp skuid != 65534 counter redirect to "$proxy_port"
+            nft 'add chain inet fw4 nat_output { type nat hook output priority -1; }'
+            nft 'add rule inet fw4 nat_output meta nfproto {ipv4} ip protocol tcp counter jump openclash_output'
          fi
-         nft 'add chain inet fw4 nat_output { type nat hook output priority -1; }'
-         nft 'add rule inet fw4 nat_output meta nfproto {ipv4} ip protocol tcp counter jump openclash_output'
       fi
-   fi
 
-   if [ -n "$en_mode_tun" ]; then
-      #TUN模式
-      #启动TUN
-      set_tun_tap
-
-      #设置防火墙
-      if [ "$router_self_proxy" = "1" ] || ([ "$enable_redirect_dns" != "2" ] && [ "$en_mode" = "fake-ip" ]); then
-         nft 'add chain inet fw4 openclash_mangle_output'
-         nft 'flush chain inet fw4 openclash_mangle_output'
-         nft 'add rule inet fw4 openclash_mangle_output ip daddr @localnetwork counter return'
-         nft 'add rule inet fw4 openclash_mangle_output ip saddr @localnetwork meta l4proto {tcp,udp} th sport @lan_ac_black_ports counter return'
-         if [ "$en_mode" = "fake-ip" ]; then
-            if [ "$en_mode_tun" -eq 1 ]; then
-               nft add rule inet fw4 openclash_mangle_output meta l4proto {tcp,udp} th dport { 0-65535 } ip daddr { "$fakeip_range" } mark set "$PROXY_FWMARK" counter
-               if [ "$router_self_proxy" = "1" ]; then
-                  nft 'add rule inet fw4 openclash_mangle_output skuid != 65534 ip daddr @wan_ac_black_ips counter return'
-                  if [ "$china_ip_route" != "0" ]; then
-                     if [ "$china_ip_route" = "1" ]; then
-                        rule="ip daddr @china_ip_route"
-                     elif [ "$china_ip_route" = "2" ]; then
-                        rule="ip daddr != @china_ip_route"
+      if [ -n "$en_mode_tun" ]; then
+         #TUN模式
+         #启动TUN
+         set_tun_tap
+
+         #设置防火墙
+         if [ "$router_self_proxy" = "1" ] || ([ "$enable_redirect_dns" != "2" ] && [ "$en_mode" = "fake-ip" ]); then
+            nft 'add chain inet fw4 openclash_mangle_output'
+            nft 'flush chain inet fw4 openclash_mangle_output'
+            nft 'add rule inet fw4 openclash_mangle_output ip daddr @localnetwork counter return'
+            nft 'add rule inet fw4 openclash_mangle_output ip saddr @localnetwork meta l4proto {tcp,udp} th sport @lan_ac_black_ports counter return'
+            if [ "$en_mode" = "fake-ip" ]; then
+               if [ "$en_mode_tun" -eq 1 ]; then
+                  nft add rule inet fw4 openclash_mangle_output meta l4proto {tcp,udp} th dport { 0-65535 } ip daddr { "$fakeip_range" } mark set "$PROXY_FWMARK" counter
+                  if [ "$router_self_proxy" = "1" ]; then
+                     nft 'add rule inet fw4 openclash_mangle_output skuid != 65534 ip daddr @wan_ac_black_ips counter return'
+                     if [ "$china_ip_route" != "0" ]; then
+                        if [ "$china_ip_route" = "1" ]; then
+                           rule="ip daddr @china_ip_route"
+                        elif [ "$china_ip_route" = "2" ]; then
+                           rule="ip daddr != @china_ip_route"
+                        fi
+                        [ "$enable_redirect_dns" != "2" ] && rule="$rule ip daddr != @china_ip_route_pass"
+                        nft "add rule inet fw4 openclash_mangle_output skuid != 65534 $rule counter return"
                      fi
-                     [ "$enable_redirect_dns" != "2" ] && rule="$rule ip daddr != @china_ip_route_pass"
-                     nft "add rule inet fw4 openclash_mangle_output skuid != 65534 $rule counter return"
+                     nft add rule inet fw4 openclash_mangle_output tcp dport { 0-65535 } skuid != 65534 meta mark set "$PROXY_FWMARK" counter
                   fi
-                  nft add rule inet fw4 openclash_mangle_output tcp dport { 0-65535 } skuid != 65534 meta mark set "$PROXY_FWMARK" counter
+               else
+                  nft add rule inet fw4 openclash_mangle_output skuid != 65534 udp dport { 0-65535 } ip daddr { "$fakeip_range" } meta mark set "$PROXY_FWMARK" counter
                fi
-            else
-               nft add rule inet fw4 openclash_mangle_output skuid != 65534 udp dport { 0-65535 } ip daddr { "$fakeip_range" } meta mark set "$PROXY_FWMARK" counter
-            fi
-         elif [ "$en_mode" = "redir-host" ] && [ "$en_mode_tun" -eq 1 ]; then
-            nft 'add rule inet fw4 openclash_mangle_output skuid != 65534 ip daddr @wan_ac_black_ips counter return'
-            nft 'add rule inet fw4 openclash_mangle_output meta l4proto {tcp,udp} th dport != @common_ports skuid != 65534 counter return'
-            if [ "$china_ip_route" != "0" ]; then
-               if [ "$china_ip_route" = "1" ]; then
-                  rule="ip daddr @china_ip_route"
-               elif [ "$china_ip_route" = "2" ]; then
-                  rule="ip daddr != @china_ip_route"
+            elif [ "$en_mode" = "redir-host" ] && [ "$en_mode_tun" -eq 1 ]; then
+               nft 'add rule inet fw4 openclash_mangle_output skuid != 65534 ip daddr @wan_ac_black_ips counter return'
+               nft 'add rule inet fw4 openclash_mangle_output meta l4proto {tcp,udp} th dport != @common_ports skuid != 65534 counter return'
+               if [ "$china_ip_route" != "0" ]; then
+                  if [ "$china_ip_route" = "1" ]; then
+                     rule="ip daddr @china_ip_route"
+                  elif [ "$china_ip_route" = "2" ]; then
+                     rule="ip daddr != @china_ip_route"
+                  fi
+                  [ "$enable_redirect_dns" != "2" ] && rule="$rule ip daddr != @china_ip_route_pass"
+                  nft "add rule inet fw4 openclash_mangle_output skuid != 65534 $rule counter return"
                fi
-               [ "$enable_redirect_dns" != "2" ] && rule="$rule ip daddr != @china_ip_route_pass"
-               nft "add rule inet fw4 openclash_mangle_output skuid != 65534 $rule counter return"
-            fi
-            nft add rule inet fw4 openclash_mangle_output tcp dport { 0-65535 } skuid != 65534 meta mark set "$PROXY_FWMARK" counter
-         fi
-         nft 'add rule inet fw4 mangle_output meta nfproto {ipv4} meta l4proto {tcp,udp} counter jump openclash_mangle_output'
-      fi
-
-      nft 'add chain inet fw4 openclash_mangle'
-      nft 'flush chain inet fw4 openclash_mangle'
-      nft 'add chain inet fw4 openclash_dns_hijack'
-      nft 'flush chain inet fw4 openclash_dns_hijack'
-      nft 'add chain inet fw4 openclash_upnp'
-      nft 'flush chain inet fw4 openclash_upnp'
-      upnp_exclude
-
-      #其他流量
-      nft 'add rule inet fw4 openclash_mangle meta l4proto {tcp,udp} iifname utun counter return'
-      nft add rule inet fw4 openclash_mangle ip daddr @localnetwork counter return
-      nft 'add rule inet fw4 openclash_mangle ip saddr @localnetwork meta l4proto {tcp,udp} th sport @lan_ac_black_ports counter return'
-      nft 'add rule inet fw4 openclash_mangle ip daddr @wan_ac_black_ips counter return'
-      nft 'add rule inet fw4 openclash_mangle ip saddr @lan_ac_black_ips counter return'
-      nft 'add rule inet fw4 openclash_mangle ether saddr @lan_ac_black_macs counter return'
-      if [ "$lan_ac_mode" = "1" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_ips)" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_macs)" ]; then
-         nft 'add rule inet fw4 openclash_mangle ether saddr != @lan_ac_white_macs ip saddr != @lan_ac_white_ips counter return'
-      else
-         nft 'add rule inet fw4 openclash_mangle ether saddr != @lan_ac_white_macs counter return'
-         nft 'add rule inet fw4 openclash_mangle ip saddr != @lan_ac_white_ips counter return'
-      fi
+               nft add rule inet fw4 openclash_mangle_output tcp dport { 0-65535 } skuid != 65534 meta mark set "$PROXY_FWMARK" counter
+            fi
+            nft 'add rule inet fw4 mangle_output meta nfproto {ipv4} meta l4proto {tcp,udp} counter jump openclash_mangle_output'
+         fi
+
+         nft 'add chain inet fw4 openclash_mangle'
+         nft 'flush chain inet fw4 openclash_mangle'
+         nft 'add chain inet fw4 openclash_dns_hijack'
+         nft 'flush chain inet fw4 openclash_dns_hijack'
+         nft 'add chain inet fw4 openclash_upnp'
+         nft 'flush chain inet fw4 openclash_upnp'
+         upnp_exclude
+
+         #其他流量
+         nft 'add rule inet fw4 openclash_mangle meta l4proto {tcp,udp} iifname utun counter return'
+         nft add rule inet fw4 openclash_mangle ip daddr @localnetwork counter return
+         nft 'add rule inet fw4 openclash_mangle ip saddr @localnetwork meta l4proto {tcp,udp} th sport @lan_ac_black_ports counter return'
+         nft 'add rule inet fw4 openclash_mangle ip daddr @wan_ac_black_ips counter return'
+         nft 'add rule inet fw4 openclash_mangle ip saddr @lan_ac_black_ips counter return'
+         nft 'add rule inet fw4 openclash_mangle ether saddr @lan_ac_black_macs counter return'
+         if [ "$lan_ac_mode" = "1" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_ips)" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_macs)" ]; then
+            nft 'add rule inet fw4 openclash_mangle ether saddr != @lan_ac_white_macs ip saddr != @lan_ac_white_ips counter return'
+         else
+            nft 'add rule inet fw4 openclash_mangle ether saddr != @lan_ac_white_macs counter return'
+            nft 'add rule inet fw4 openclash_mangle ip saddr != @lan_ac_white_ips counter return'
+         fi
 
-      if [ "$en_mode" = "redir-host" ]; then
-         nft 'add rule inet fw4 openclash_mangle meta l4proto {tcp,udp} th dport != @common_ports counter return'
-      fi
-      if [ "$china_ip_route" != "0" ]; then
-         if [ "$china_ip_route" = "1" ]; then
-            rule="ip daddr @china_ip_route"
-         elif [ "$china_ip_route" = "2" ]; then
-            rule="ip daddr != @china_ip_route"
+         if [ "$en_mode" = "redir-host" ]; then
+            nft 'add rule inet fw4 openclash_mangle meta l4proto {tcp,udp} th dport != @common_ports counter return'
          fi
-         [ "$enable_redirect_dns" != "2" ] && rule="$rule ip daddr != @china_ip_route_pass"
-         nft "add rule inet fw4 openclash_mangle $rule counter return"
-      fi
-      nft 'add rule inet fw4 openclash_mangle ip protocol udp counter jump openclash_upnp'
-      nft add rule inet fw4 openclash_mangle meta l4proto {tcp,udp} th dport { 0-65535 } mark set "$PROXY_FWMARK" counter
+         if [ "$china_ip_route" != "0" ]; then
+            if [ "$china_ip_route" = "1" ]; then
+               rule="ip daddr @china_ip_route"
+            elif [ "$china_ip_route" = "2" ]; then
+               rule="ip daddr != @china_ip_route"
+            fi
+            [ "$enable_redirect_dns" != "2" ] && rule="$rule ip daddr != @china_ip_route_pass"
+            nft "add rule inet fw4 openclash_mangle $rule counter return"
+         fi
+         nft 'add rule inet fw4 openclash_mangle ip protocol udp counter jump openclash_upnp'
+         nft add rule inet fw4 openclash_mangle meta l4proto {tcp,udp} th dport { 0-65535 } mark set "$PROXY_FWMARK" counter
 
-      if [ "$en_mode_tun" -eq 1 ]; then
-         nft 'insert rule inet fw4 mangle_prerouting position 0 meta nfproto {ipv4} meta l4proto {tcp,udp} counter jump openclash_mangle'
-      else
-         if [ "$enable_redirect_dns" -eq 1 ]; then
-            nft 'insert rule inet fw4 mangle_prerouting position 0 meta nfproto {ipv4} tcp dport 53 counter jump openclash_dns_hijack'
-            nft 'add rule inet fw4 openclash_dns_hijack ip saddr @lan_ac_black_ips counter return'
-            nft 'add rule inet fw4 openclash_dns_hijack ether saddr @lan_ac_black_macs counter return'
-            if [ "$lan_ac_mode" = "1" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_ips)" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_macs)" ]; then
-               nft 'add rule inet fw4 openclash_dns_hijack ether saddr != @lan_ac_white_macs ip saddr != @lan_ac_white_ips counter return'
-            else
-               nft 'add rule inet fw4 openclash_dns_hijack ether saddr != @lan_ac_white_macs counter return'
-               nft 'add rule inet fw4 openclash_dns_hijack ip saddr != @lan_ac_white_ips counter return'
+         if [ "$en_mode_tun" -eq 1 ]; then
+            nft 'insert rule inet fw4 mangle_prerouting position 0 meta nfproto {ipv4} meta l4proto {tcp,udp} counter jump openclash_mangle'
+         else
+            if [ "$enable_redirect_dns" -eq 1 ]; then
+               nft 'insert rule inet fw4 mangle_prerouting position 0 meta nfproto {ipv4} tcp dport 53 counter jump openclash_dns_hijack'
+               nft 'add rule inet fw4 openclash_dns_hijack ip saddr @lan_ac_black_ips counter return'
+               nft 'add rule inet fw4 openclash_dns_hijack ether saddr @lan_ac_black_macs counter return'
+               if [ "$lan_ac_mode" = "1" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_ips)" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_macs)" ]; then
+                  nft 'add rule inet fw4 openclash_dns_hijack ether saddr != @lan_ac_white_macs ip saddr != @lan_ac_white_ips counter return'
+               else
+                  nft 'add rule inet fw4 openclash_dns_hijack ether saddr != @lan_ac_white_macs counter return'
+                  nft 'add rule inet fw4 openclash_dns_hijack ip saddr != @lan_ac_white_ips counter return'
+               fi
+               nft add rule inet fw4 openclash_dns_hijack meta nfproto {ipv4} tcp dport 53 mark set "$PROXY_FWMARK" comment \"OpenClash TCP DNS Hijack\" counter
             fi
-            nft add rule inet fw4 openclash_dns_hijack meta nfproto {ipv4} tcp dport 53 mark set "$PROXY_FWMARK" comment \"OpenClash TCP DNS Hijack\" counter
+            nft 'insert rule inet fw4 mangle_prerouting position 0 meta nfproto {ipv4} ip protocol udp counter jump openclash_mangle'
          fi
-         nft 'insert rule inet fw4 mangle_prerouting position 0 meta nfproto {ipv4} ip protocol udp counter jump openclash_mangle'
-      fi
 
-      if [ "$enable_redirect_dns" -eq 2 ]; then
-         local position=$(nft -a list chain inet fw4 openclash_dns_redirect |grep "DNS" |grep -v "redirect" |awk -F '# handle ' '{print$2}' |sort -rn |head -1)
-         [ -z "$position" ] && position=0
-         nft insert rule inet fw4 openclash_dns_redirect position "$position" meta nfproto {ipv4} tcp dport 53 counter accept comment \"OpenClash TCP DNS Hijack\"
-      elif [ "$enable_redirect_dns" -eq 1 ]; then
-         nft insert rule inet fw4 dstnat position 0 meta nfproto {ipv4} tcp dport 53 counter accept comment \"OpenClash TCP DNS Hijack\"
-      fi
+         if [ "$enable_redirect_dns" -eq 2 ]; then
+            local position=$(nft -a list chain inet fw4 openclash_dns_redirect |grep "DNS" |grep -v "redirect" |awk -F '# handle ' '{print$2}' |sort -rn |head -1)
+            [ -z "$position" ] && position=0
+            nft insert rule inet fw4 openclash_dns_redirect position "$position" meta nfproto {ipv4} tcp dport 53 counter accept comment \"OpenClash TCP DNS Hijack\"
+         elif [ "$enable_redirect_dns" -eq 1 ]; then
+            nft insert rule inet fw4 dstnat position 0 meta nfproto {ipv4} tcp dport 53 counter accept comment \"OpenClash TCP DNS Hijack\"
+         fi
 
-      #TUN FORWORD
-      nft insert rule inet fw4 forward position 0 meta l4proto {tcp,udp} oifname utun counter accept comment \"OpenClash TUN Forward\"
-      nft insert rule inet fw4 forward position 0 meta l4proto {tcp,udp} iifname utun counter accept comment \"OpenClash TUN Forward\"
-      nft insert rule inet fw4 input position 0 meta l4proto {tcp,udp} iifname utun counter accept comment \"OpenClash TUN Input\"
-      nft insert rule inet fw4 srcnat position 0 meta nfproto {ipv4} oifname utun counter return comment \"OpenClash TUN Postrouting\"
+         #TUN FORWORD
+         nft insert rule inet fw4 forward position 0 meta l4proto {tcp,udp} oifname utun counter accept comment \"OpenClash TUN Forward\"
+         nft insert rule inet fw4 forward position 0 meta l4proto {tcp,udp} iifname utun counter accept comment \"OpenClash TUN Forward\"
+         nft insert rule inet fw4 input position 0 meta l4proto {tcp,udp} iifname utun counter accept comment \"OpenClash TUN Input\"
+         nft insert rule inet fw4 srcnat position 0 meta nfproto {ipv4} oifname utun counter return comment \"OpenClash TUN Postrouting\"
 
-      #quic
-      if [ "$disable_udp_quic" -eq 1 ]; then
-         if [ "$china_ip_route" = "2" ]; then
-            nft insert rule inet fw4 forward position 0 oifname utun udp dport 443 ip daddr @china_ip_route counter reject comment \"OpenClash QUIC REJECT\"
-         else
-            nft insert rule inet fw4 forward position 0 oifname utun udp dport 443 ip daddr != @china_ip_route counter reject comment \"OpenClash QUIC REJECT\"
+         #quic
+         if [ "$disable_udp_quic" -eq 1 ]; then
+            if [ "$china_ip_route" = "2" ]; then
+               nft insert rule inet fw4 forward position 0 oifname utun udp dport 443 ip daddr @china_ip_route counter reject comment \"OpenClash QUIC REJECT\"
+            else
+               nft insert rule inet fw4 forward position 0 oifname utun udp dport 443 ip daddr != @china_ip_route counter reject comment \"OpenClash QUIC REJECT\"
+            fi
          fi
       fi
-   fi
 
-   #google_dns_block
-   if [ -n "$(uci -q get openclash.config.lan_block_google_dns_ips)" ] || [ -n "$(uci -q get openclash.config.lan_block_google_dns_macs)" ]; then
-      nft 'add set inet fw4 openclash_google_dns_ips { type ipv4_addr; flags interval; auto-merge; }'
-      nft 'add element inet fw4 openclash_google_dns_ips { 8.8.8.8, 8.8.4.4 }'
-      if [ -z "$en_mode_tun" ] || [ "$en_mode_tun" -eq 2 ]; then
-         nft insert rule inet fw4 dstnat position 0 ip saddr @lan_block_google_dns_ips ip daddr @openclash_google_dns_ips counter accept comment \"OpenClash Google DNS Block\"
-         nft insert rule inet fw4 dstnat position 0 ether saddr @lan_block_google_dns_macs ip daddr @openclash_google_dns_ips counter accept comment \"OpenClash Google DNS Block\"
+      #google_dns_block
+      if [ -n "$(uci -q get openclash.config.lan_block_google_dns_ips)" ] || [ -n "$(uci -q get openclash.config.lan_block_google_dns_macs)" ]; then
+         nft 'add set inet fw4 openclash_google_dns_ips { type ipv4_addr; flags interval; auto-merge; }'
+         nft 'add element inet fw4 openclash_google_dns_ips { 8.8.8.8, 8.8.4.4 }'
+         if [ -z "$en_mode_tun" ] || [ "$en_mode_tun" -eq 2 ]; then
+            nft insert rule inet fw4 dstnat position 0 ip saddr @lan_block_google_dns_ips ip daddr @openclash_google_dns_ips counter accept comment \"OpenClash Google DNS Block\"
+            nft insert rule inet fw4 dstnat position 0 ether saddr @lan_block_google_dns_macs ip daddr @openclash_google_dns_ips counter accept comment \"OpenClash Google DNS Block\"
+         fi
+         nft insert rule inet fw4 forward position 0 ip saddr @lan_block_google_dns_ips ip daddr @openclash_google_dns_ips counter reject comment \"OpenClash Google DNS Block\"
+         nft insert rule inet fw4 forward position 0 ether saddr @lan_block_google_dns_macs ip daddr @openclash_google_dns_ips counter reject comment \"OpenClash Google DNS Block\"
       fi
-      nft insert rule inet fw4 forward position 0 ip saddr @lan_block_google_dns_ips ip daddr @openclash_google_dns_ips counter reject comment \"OpenClash Google DNS Block\"
-      nft insert rule inet fw4 forward position 0 ether saddr @lan_block_google_dns_macs ip daddr @openclash_google_dns_ips counter reject comment \"OpenClash Google DNS Block\"
-   fi
 
-   #ipv6
-   if [ "$ipv6_enable" -eq 1 ]; then
-      if [ -z "$(nft list chain inet fw4 dstnat |grep 'OpenClash DNS Hijack')" ]; then
-         if [ "$enable_redirect_dns" -eq 1 ]; then
-            if [ "$lan_ac_mode" != "1" ]; then
-               ACBLACKDNSFILTER=""
-               if [ "$lan_ac_mode" = "0" ]; then
-                  if [ -n "$(uci -q get openclash.config.lan_ac_black_ips)" ]; then
-                     ACBLACKDNSFILTER="ip6 saddr != @lan_ac_black_ipv6s"
-                  fi
-                  if [ -n "$(uci -q get openclash.config.lan_ac_black_macs)" ]; then
-                     ACBLACKDNSFILTER="$ACBLACKDNSFILTER ether saddr != @lan_ac_black_macs"
+      #ipv6
+      if [ "$ipv6_enable" -eq 1 ]; then
+         if [ -z "$(nft list chain inet fw4 dstnat |grep 'OpenClash DNS Hijack')" ]; then
+            if [ "$enable_redirect_dns" -eq 1 ]; then
+               if [ "$lan_ac_mode" != "1" ]; then
+                  ACBLACKDNSFILTER=""
+                  if [ "$lan_ac_mode" = "0" ]; then
+                     if [ -n "$(uci -q get openclash.config.lan_ac_black_ips)" ]; then
+                        ACBLACKDNSFILTER="ip6 saddr != @lan_ac_black_ipv6s"
+                     fi
+                     if [ -n "$(uci -q get openclash.config.lan_ac_black_macs)" ]; then
+                        ACBLACKDNSFILTER="$ACBLACKDNSFILTER ether saddr != @lan_ac_black_macs"
+                     fi
                   fi
+                  nft insert rule inet fw4 dstnat position 0 meta nfproto {ipv6} tcp dport 53 ${ACBLACKDNSFILTER} counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
+                  nft insert rule inet fw4 dstnat position 0 meta nfproto {ipv6} udp dport 53 ${ACBLACKDNSFILTER} counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
+               else
+                  nft insert rule inet fw4 dstnat position 0 meta nfproto {ipv6} tcp dport 53 ip6 saddr @lan_ac_white_ipv6s counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
+                  nft insert rule inet fw4 dstnat position 0 meta nfproto {ipv6} udp dport 53 ip6 saddr @lan_ac_white_ipv6s counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
+                  nft insert rule inet fw4 dstnat position 0 meta nfproto {ipv6} tcp dport 53 ether saddr @lan_ac_white_macs counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
+                  nft insert rule inet fw4 dstnat position 0 meta nfproto {ipv6} udp dport 53 ether saddr @lan_ac_white_macs counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
                fi
-               nft insert rule inet fw4 dstnat position 0 meta nfproto {ipv6} tcp dport 53 ${ACBLACKDNSFILTER} counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
-               nft insert rule inet fw4 dstnat position 0 meta nfproto {ipv6} udp dport 53 ${ACBLACKDNSFILTER} counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
-            else
-               nft insert rule inet fw4 dstnat position 0 meta nfproto {ipv6} tcp dport 53 ip6 saddr @lan_ac_white_ipv6s counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
-               nft insert rule inet fw4 dstnat position 0 meta nfproto {ipv6} udp dport 53 ip6 saddr @lan_ac_white_ipv6s counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
-               nft insert rule inet fw4 dstnat position 0 meta nfproto {ipv6} tcp dport 53 ether saddr @lan_ac_white_macs counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
-               nft insert rule inet fw4 dstnat position 0 meta nfproto {ipv6} udp dport 53 ether saddr @lan_ac_white_macs counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
-            fi
-         elif [ "$enable_redirect_dns" -eq 2 ]; then
-            if [ "$lan_ac_mode" != "1" ]; then
-               ACBLACKDNSFILTER=""
-               if [ "$lan_ac_mode" = "0" ]; then
-                  if [ -n "$(uci -q get openclash.config.lan_ac_black_ips)" ]; then
-                     ACBLACKDNSFILTER="ip6 saddr != @lan_ac_black_ipv6s"
-                  fi
-                  if [ -n "$(uci -q get openclash.config.lan_ac_black_macs)" ]; then
-                     ACBLACKDNSFILTER="$ACBLACKDNSFILTER ether saddr != @lan_ac_black_macs"
+            elif [ "$enable_redirect_dns" -eq 2 ]; then
+               if [ "$lan_ac_mode" != "1" ]; then
+                  ACBLACKDNSFILTER=""
+                  if [ "$lan_ac_mode" = "0" ]; then
+                     if [ -n "$(uci -q get openclash.config.lan_ac_black_ips)" ]; then
+                        ACBLACKDNSFILTER="ip6 saddr != @lan_ac_black_ipv6s"
+                     fi
+                     if [ -n "$(uci -q get openclash.config.lan_ac_black_macs)" ]; then
+                        ACBLACKDNSFILTER="$ACBLACKDNSFILTER ether saddr != @lan_ac_black_macs"
+                     fi
                   fi
+                  nft add rule inet fw4 openclash_dns_redirect meta nfproto {ipv6} tcp dport 53 ${ACBLACKDNSFILTER} counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
+                  nft add rule inet fw4 openclash_dns_redirect meta nfproto {ipv6} udp dport 53 ${ACBLACKDNSFILTER} counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
+               else
+                  nft add rule inet fw4 openclash_dns_redirect meta nfproto {ipv6} tcp dport 53 ip6 saddr @lan_ac_white_ipv6s counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
+                  nft add rule inet fw4 openclash_dns_redirect meta nfproto {ipv6} udp dport 53 ip6 saddr @lan_ac_white_ipv6s counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
+                  nft add rule inet fw4 openclash_dns_redirect meta nfproto {ipv6} tcp dport 53 ether saddr @lan_ac_white_macs counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
+                  nft add rule inet fw4 openclash_dns_redirect meta nfproto {ipv6} udp dport 53 ether saddr @lan_ac_white_macs counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
+               fi
+               nft 'insert rule inet fw4 dstnat position 0 meta nfproto {ipv6} tcp dport 53 counter jump openclash_dns_redirect'
+               nft 'insert rule inet fw4 dstnat position 0 meta nfproto {ipv6} udp dport 53 counter jump openclash_dns_redirect'
+               if [ "$router_self_proxy" = 1 ]; then
+                  nft 'add chain inet fw4 nat_output { type nat hook output priority -1; }'
+                  nft insert rule inet fw4 nat_output position 0 meta nfproto {ipv6} tcp dport 53 ip6 daddr {::/0} meta skuid != 65534 counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
+                  nft insert rule inet fw4 nat_output position 0 meta nfproto {ipv6} udp dport 53 ip6 daddr {::/0} meta skuid != 65534 counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
                fi
-               nft add rule inet fw4 openclash_dns_redirect meta nfproto {ipv6} tcp dport 53 ${ACBLACKDNSFILTER} counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
-               nft add rule inet fw4 openclash_dns_redirect meta nfproto {ipv6} udp dport 53 ${ACBLACKDNSFILTER} counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
-            else
-               nft add rule inet fw4 openclash_dns_redirect meta nfproto {ipv6} tcp dport 53 ip6 saddr @lan_ac_white_ipv6s counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
-               nft add rule inet fw4 openclash_dns_redirect meta nfproto {ipv6} udp dport 53 ip6 saddr @lan_ac_white_ipv6s counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
-               nft add rule inet fw4 openclash_dns_redirect meta nfproto {ipv6} tcp dport 53 ether saddr @lan_ac_white_macs counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
-               nft add rule inet fw4 openclash_dns_redirect meta nfproto {ipv6} udp dport 53 ether saddr @lan_ac_white_macs counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
-            fi
-            nft 'insert rule inet fw4 dstnat position 0 meta nfproto {ipv6} tcp dport 53 counter jump openclash_dns_redirect'
-            nft 'insert rule inet fw4 dstnat position 0 meta nfproto {ipv6} udp dport 53 counter jump openclash_dns_redirect'
-            if [ "$router_self_proxy" = 1 ]; then
-               nft 'add chain inet fw4 nat_output { type nat hook output priority -1; }'
-               nft insert rule inet fw4 nat_output position 0 meta nfproto {ipv6} tcp dport 53 ip6 daddr {::/0} meta skuid != 65534 counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
-               nft insert rule inet fw4 nat_output position 0 meta nfproto {ipv6} udp dport 53 ip6 daddr {::/0} meta skuid != 65534 counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
             fi
          fi
-      fi
-      if [ "$en_mode" = "fake-ip" ] && [ "$china_ip_route" != "0" ] && [ "$enable_redirect_dns" != "2" ]; then
-         nft insert rule inet fw4 dstnat position 0 meta nfproto {ipv6} tcp dport 53 counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
-         nft insert rule inet fw4 dstnat position 0 meta nfproto {ipv6} udp dport 53 counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
-         nft 'add chain inet fw4 nat_output { type nat hook output priority -1; }'
-         nft add rule inet fw4 nat_output position 0 meta nfproto {ipv6} tcp dport 53 meta skuid != 65534 counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
-         nft add rule inet fw4 nat_output position 0 meta nfproto {ipv6} udp dport 53 meta skuid != 65534 counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
-         nft add rule inet fw4 nat_output position 0 meta nfproto {ipv6} tcp dport 12353 meta skuid != 65534 counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
-         nft add rule inet fw4 nat_output position 0 meta nfproto {ipv6} udp dport 12353 meta skuid != 65534 counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
-      fi
+         if [ "$en_mode" = "fake-ip" ] && [ "$china_ip_route" != "0" ] && [ "$enable_redirect_dns" != "2" ]; then
+            nft insert rule inet fw4 dstnat position 0 meta nfproto {ipv6} tcp dport 53 counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
+            nft insert rule inet fw4 dstnat position 0 meta nfproto {ipv6} udp dport 53 counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
+            nft 'add chain inet fw4 nat_output { type nat hook output priority -1; }'
+            nft add rule inet fw4 nat_output position 0 meta nfproto {ipv6} tcp dport 53 meta skuid != 65534 counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
+            nft add rule inet fw4 nat_output position 0 meta nfproto {ipv6} udp dport 53 meta skuid != 65534 counter redirect to "$dns_port" comment \"OpenClash DNS Hijack\"
+            nft add rule inet fw4 nat_output position 0 meta nfproto {ipv6} tcp dport 12353 meta skuid != 65534 counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
+            nft add rule inet fw4 nat_output position 0 meta nfproto {ipv6} udp dport 12353 meta skuid != 65534 counter redirect to "$DNSPORT" comment \"OpenClash DNS Hijack\"
+         fi
 
-      if [ "$china_ip6_route" != "0" ] || [ "$disable_udp_quic" = "1" ]; then
-         nft 'flush set inet fw4 china_ip6_route'
-         nft -f '/etc/openclash/china_ip6_route.ipset'
-         CHNROUTE_WAIT=0
-         while ( [ -z "$(nft list sets |grep "set china_ip6_route {")" ] && [ "$CHNROUTE_WAIT" -le 3 ] )
-         do
+         if [ "$china_ip6_route" != "0" ] || [ "$disable_udp_quic" = "1" ]; then
+            nft 'flush set inet fw4 china_ip6_route'
             nft -f '/etc/openclash/china_ip6_route.ipset'
-         done
-
-         if [ "$enable_redirect_dns" != "2" ]; then
-            mkdir -p ${DNSMASQ_CONF_DIR}
-
-            echo "add set inet fw4 china_ip6_route_pass { type ipv6_addr; flags interval; auto-merge; }" >>/tmp/openclash_china_ip6_route_pass.list
-            [ -z `(awk '!/^$/&&!/^#/&&!/^(\*?\.?)*[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})*$/{printf("    %s,'" "'\n",$0)}' /etc/openclash/custom/openclash_custom_chnroute6_pass.list)` ] || {
-               echo "define china_ip6_route_pass = {" >/tmp/openclash_china_ip6_route_pass.list
-               awk '!/^$/&&!/^#/&&!/^(\*?\.?)*[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})*$/{printf("    %s,'" "'\n",$0)}' /etc/openclash/custom/openclash_custom_chnroute6_pass.list >>/tmp/openclash_china_ip6_route_pass.list 2>/dev/null
-               echo "}" >>/tmp/openclash_china_ip6_route_pass.list
-               echo 'add element inet fw4 china_ip6_route_pass $china_ip6_route_pass' >>/tmp/openclash_china_ip6_route_pass.list
-            }
-            awk '!/^$/&&!/^#/&&/^(\*?\.?)*[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})*$/{printf("'${settype}'=/%s/'${nftflag}'china_ip_route_pass'" "'\n",$0)}' /etc/openclash/custom/openclash_custom_chnroute6_pass.list >>${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute6_pass.conf 2>/dev/null
-
-            nft 'flush set inet fw4 china_ip6_route_pass'
-            nft -f '/tmp/openclash_china_ip6_route_pass.list'
-            rm -rf /tmp/openclash_china_ip6_route_pass.list
-
-            #Prevent domain repeat
-            for i in `grep -wf ${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute6_pass.conf ${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute_pass.conf`
+            CHNROUTE_WAIT=0
+            while ( [ -z "$(nft list sets |grep "set china_ip6_route {")" ] && [ "$CHNROUTE_WAIT" -le 3 ] )
             do
+               nft -f '/etc/openclash/china_ip6_route.ipset'
+            done
+
+            if [ "$enable_redirect_dns" != "2" ]; then
+               mkdir -p ${DNSMASQ_CONF_DIR}
+
+               echo "add set inet fw4 china_ip6_route_pass { type ipv6_addr; flags interval; auto-merge; }" >>/tmp/openclash_china_ip6_route_pass.list
+               [ -z `(awk '!/^$/&&!/^#/&&!/^(\*?\.?)*[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})*$/{printf("    %s,'" "'\n",$0)}' /etc/openclash/custom/openclash_custom_chnroute6_pass.list)` ] || {
+                  echo "define china_ip6_route_pass = {" >/tmp/openclash_china_ip6_route_pass.list
+                  awk '!/^$/&&!/^#/&&!/^(\*?\.?)*[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})*$/{printf("    %s,'" "'\n",$0)}' /etc/openclash/custom/openclash_custom_chnroute6_pass.list >>/tmp/openclash_china_ip6_route_pass.list 2>/dev/null
+                  echo "}" >>/tmp/openclash_china_ip6_route_pass.list
+                  echo 'add element inet fw4 china_ip6_route_pass $china_ip6_route_pass' >>/tmp/openclash_china_ip6_route_pass.list
+               }
+               awk '!/^$/&&!/^#/&&/^(\*?\.?)*[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})*$/{printf("'${settype}'=/%s/'${nftflag}'china_ip_route_pass'" "'\n",$0)}' /etc/openclash/custom/openclash_custom_chnroute6_pass.list >>${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute6_pass.conf 2>/dev/null
+
+               nft 'flush set inet fw4 china_ip6_route_pass'
+               nft -f '/tmp/openclash_china_ip6_route_pass.list'
+               rm -rf /tmp/openclash_china_ip6_route_pass.list
+
+               #Prevent domain repeat
+               for i in `grep -wf ${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute6_pass.conf ${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute_pass.conf`
+               do
+                  if [ -n "$nftflag" ]; then
+                     sed -i "s:${i}:${i},6#${nftflag}china_ip6_route_pass:g" ${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute_pass.conf
+                  else
+                     sed -i "s:${i}:${i},china_ip6_route_pass:g" ${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute_pass.conf
+                  fi
+                  sed -i 's:'$i':EXCLUSIVE:;/EXCLUSIVE/d' ${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute6_pass.conf
+               done
                if [ -n "$nftflag" ]; then
-                  sed -i "s:${i}:${i},6#${nftflag}china_ip6_route_pass:g" ${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute_pass.conf
+                  sed -i "s/\/${nftflag}/\/4#${nftflag}/g" ${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute_pass.conf
+                  sed -i "s/${nftflag}china_ip_route_pass/6#${nftflag}china_ip6_route_pass/g" ${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute6_pass.conf
                else
-                  sed -i "s:${i}:${i},china_ip6_route_pass:g" ${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute_pass.conf
+                  sed -i "s/china_ip_route_pass/china_ip6_route_pass/g" ${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute6_pass.conf
                fi
-               sed -i 's:'$i':EXCLUSIVE:;/EXCLUSIVE/d' ${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute6_pass.conf
-            done
-            if [ -n "$nftflag" ]; then
-               sed -i "s/\/${nftflag}/\/4#${nftflag}/g" ${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute_pass.conf
-               sed -i "s/${nftflag}china_ip_route_pass/6#${nftflag}china_ip6_route_pass/g" ${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute6_pass.conf
-            else
-               sed -i "s/china_ip_route_pass/china_ip6_route_pass/g" ${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute6_pass.conf
             fi
          fi
-      fi
-
-      #local
-      nft 'add set inet fw4 localnetwork6 { type ipv6_addr; flags interval; auto-merge; }'
-      #nft 'delete set inet fw4 localnetwork6'
-      if [ -f "/etc/openclash/custom/openclash_custom_localnetwork_ipv6.list" ]; then
-         for line in `cat "/etc/openclash/custom/openclash_custom_localnetwork_ipv6.list"`
-         do
-            nft add element inet fw4 localnetwork6 { "$line" }
-         done
-      else
-         nft 'add element inet fw4 localnetwork6 { ::/128, ::1/128, ::ffff:0:0/96, ::ffff:0:0:0/96, 64:ff9b::/96, 100::/64, 2001::/32, 2001:20::/28, 2001:db8::/32, 2002::/16, fc00::/7, fe80::/10, ff00::/8}'
-      fi
-
-      if [ -n "$wan_ip6s" ]; then
-         for wan_ip6 in $wan_ip6s; do
-            nft add element inet fw4 localnetwork6 { "$wan_ip6" }
-         done
-      fi
-
-      #Google dns
-      nft insert rule inet fw4 dstnat position 0 ip6 daddr { 2001:4860:4860::8888, 2001:4860:4860::8844 } tcp dport 53 counter accept comment \"OpenClash Google DNS Hijack\"
 
-      if [ "$ipv6_mode" -eq 1 ]; then
-         #tcp
-         nft 'add chain inet fw4 openclash_v6'
-         nft 'flush chain inet fw4 openclash_v6'
-         nft add rule inet fw4 openclash_v6 ip6 daddr @localnetwork6 counter return
-         nft 'add rule inet fw4 openclash_v6 ip6 saddr @localnetwork6 meta nfproto {ipv6} sport @lan_ac_black_ports counter return'
-         nft 'add rule inet fw4 openclash_v6 ip6 daddr @wan_ac_black_ipv6s counter return'
-         nft 'add rule inet fw4 openclash_v6 ip6 saddr @lan_ac_black_ipv6s counter return'
-         nft 'add rule inet fw4 openclash_v6 ether saddr @lan_ac_black_macs counter return'
-         if [ "$lan_ac_mode" = "1" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_ips)" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_macs)" ]; then
-            nft 'add rule inet fw4 openclash_v6 ether saddr != @lan_ac_white_macs ip6 saddr != @lan_ac_white_ipv6s counter return'
+         #local
+         nft 'add set inet fw4 localnetwork6 { type ipv6_addr; flags interval; auto-merge; }'
+         #nft 'delete set inet fw4 localnetwork6'
+         if [ -f "/etc/openclash/custom/openclash_custom_localnetwork_ipv6.list" ]; then
+            for line in `cat "/etc/openclash/custom/openclash_custom_localnetwork_ipv6.list"`
+            do
+               nft add element inet fw4 localnetwork6 { "$line" }
+            done
          else
-            nft 'add rule inet fw4 openclash_v6 ether saddr != @lan_ac_white_macs counter return'
-            nft 'add rule inet fw4 openclash_v6 ip6 saddr != @lan_ac_white_ipv6s counter return'
+            nft 'add element inet fw4 localnetwork6 { ::/128, ::1/128, ::ffff:0:0/96, ::ffff:0:0:0/96, 64:ff9b::/96, 100::/64, 2001::/32, 2001:20::/28, 2001:db8::/32, 2002::/16, fc00::/7, fe80::/10, ff00::/8}'
          fi
 
-         if [ "$en_mode" = "redir-host" ]; then
-            nft 'add rule inet fw4 openclash_v6 meta nfproto {ipv6} th dport != @common_ports counter return'
+         if [ -n "$wan_ip6s" ]; then
+            for wan_ip6 in $wan_ip6s; do
+               nft add element inet fw4 localnetwork6 { "$wan_ip6" }
+            done
          fi
 
-         if [ "$china_ip6_route" != "0" ]; then
-            if [ "$china_ip6_route" = "1" ]; then
-               rule="ip6 daddr @china_ip6_route"
-            elif [ "$china_ip6_route" = "2" ]; then
-               rule="ip6 daddr != @china_ip6_route"
-            fi
-            [ "$enable_redirect_dns" != "2" ] && rule="$rule ip6 daddr != @china_ip6_route_pass"
-            nft "add rule inet fw4 openclash_v6 $rule counter return"
-         fi
-         nft add rule inet fw4 openclash_v6 meta nfproto {ipv6} tcp dport { 0-65535 } counter redirect to "$proxy_port"
-         nft 'add rule inet fw4 dstnat meta nfproto {ipv6} tcp dport { 0-65535 } counter jump openclash_v6'
+         #Google dns
+         nft insert rule inet fw4 dstnat position 0 ip6 daddr { 2001:4860:4860::8888, 2001:4860:4860::8844 } tcp dport 53 counter accept comment \"OpenClash Google DNS Hijack\"
+
+         if [ "$ipv6_mode" -eq 1 ]; then
+            #tcp
+            nft 'add chain inet fw4 openclash_v6'
+            nft 'flush chain inet fw4 openclash_v6'
+            nft add rule inet fw4 openclash_v6 ip6 daddr @localnetwork6 counter return
+            nft 'add rule inet fw4 openclash_v6 ip6 saddr @localnetwork6 meta nfproto {ipv6} sport @lan_ac_black_ports counter return'
+            nft 'add rule inet fw4 openclash_v6 ip6 daddr @wan_ac_black_ipv6s counter return'
+            nft 'add rule inet fw4 openclash_v6 ip6 saddr @lan_ac_black_ipv6s counter return'
+            nft 'add rule inet fw4 openclash_v6 ether saddr @lan_ac_black_macs counter return'
+            if [ "$lan_ac_mode" = "1" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_ips)" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_macs)" ]; then
+               nft 'add rule inet fw4 openclash_v6 ether saddr != @lan_ac_white_macs ip6 saddr != @lan_ac_white_ipv6s counter return'
+            else
+               nft 'add rule inet fw4 openclash_v6 ether saddr != @lan_ac_white_macs counter return'
+               nft 'add rule inet fw4 openclash_v6 ip6 saddr != @lan_ac_white_ipv6s counter return'
+            fi
 
-         #tproxy not support output chain
-      if [ "$ipv6_mode" -eq 0 ] || [ "$ipv6_mode" -eq 1 ]; then
-            if [ "$router_self_proxy" = "1" ]; then
-               nft 'add chain inet fw4 openclash_output_v6'
-               nft 'flush chain inet fw4 openclash_output_v6'
-               nft 'add rule inet fw4 openclash_output_v6 ip6 daddr @localnetwork6 counter return'
-               nft 'add rule inet fw4 openclash_output_v6 ip6 saddr @localnetwork6 meta nfproto {ipv6} sport @lan_ac_black_ports counter return'
-               nft 'add rule inet fw4 openclash_output_v6 skuid != 65534 ip6 daddr @wan_ac_black_ipv6s counter return'
-               if [ "$en_mode" = "redir-host" ]; then
-                  nft 'add rule inet fw4 openclash_output_v6 meta nfproto {ipv6} th dport != @common_ports skuid != 65534 counter return'
+            if [ "$en_mode" = "redir-host" ]; then
+               nft 'add rule inet fw4 openclash_v6 meta nfproto {ipv6} th dport != @common_ports counter return'
+            fi
+
+            if [ "$china_ip6_route" != "0" ]; then
+               if [ "$china_ip6_route" = "1" ]; then
+                  rule="ip6 daddr @china_ip6_route"
+               elif [ "$china_ip6_route" = "2" ]; then
+                  rule="ip6 daddr != @china_ip6_route"
                fi
+               [ "$enable_redirect_dns" != "2" ] && rule="$rule ip6 daddr != @china_ip6_route_pass"
+               nft "add rule inet fw4 openclash_v6 $rule counter return"
+            fi
+            nft add rule inet fw4 openclash_v6 meta nfproto {ipv6} tcp dport { 0-65535 } counter redirect to "$proxy_port"
+            nft 'add rule inet fw4 dstnat meta nfproto {ipv6} tcp dport { 0-65535 } counter jump openclash_v6'
 
-               if [ "$china_ip6_route" != "0" ]; then
-                  if [ "$china_ip6_route" = "1" ]; then
-                     rule="ip6 daddr @china_ip6_route"
-                  elif [ "$china_ip6_route" = "2" ]; then
-                     rule="ip6 daddr != @china_ip6_route"
+            #tproxy not support output chain
+         if [ "$ipv6_mode" -eq 0 ] || [ "$ipv6_mode" -eq 1 ]; then
+               if [ "$router_self_proxy" = "1" ]; then
+                  nft 'add chain inet fw4 openclash_output_v6'
+                  nft 'flush chain inet fw4 openclash_output_v6'
+                  nft 'add rule inet fw4 openclash_output_v6 ip6 daddr @localnetwork6 counter return'
+                  nft 'add rule inet fw4 openclash_output_v6 ip6 saddr @localnetwork6 meta nfproto {ipv6} sport @lan_ac_black_ports counter return'
+                  nft 'add rule inet fw4 openclash_output_v6 skuid != 65534 ip6 daddr @wan_ac_black_ipv6s counter return'
+                  if [ "$en_mode" = "redir-host" ]; then
+                     nft 'add rule inet fw4 openclash_output_v6 meta nfproto {ipv6} th dport != @common_ports skuid != 65534 counter return'
+                  fi
+
+                  if [ "$china_ip6_route" != "0" ]; then
+                     if [ "$china_ip6_route" = "1" ]; then
+                        rule="ip6 daddr @china_ip6_route"
+                     elif [ "$china_ip6_route" = "2" ]; then
+                        rule="ip6 daddr != @china_ip6_route"
+                     fi
+                     [ "$enable_redirect_dns" != "2" ] && rule="$rule ip6 daddr != @china_ip6_route_pass"
+                     nft "add rule inet fw4 openclash_output_v6 skuid != 65534 $rule counter return"
                   fi
-                  [ "$enable_redirect_dns" != "2" ] && rule="$rule ip6 daddr != @china_ip6_route_pass"
-                  nft "add rule inet fw4 openclash_output_v6 skuid != 65534 $rule counter return"
+                  
+                  nft add rule inet fw4 openclash_output_v6 meta nfproto {ipv6} skuid != 65534 tcp dport { 0-65535 } counter redirect to "$proxy_port"
+                  nft 'add chain inet fw4 nat_output { type nat hook output priority -1; }'
+                  nft 'add rule inet fw4 nat_output meta nfproto {ipv6} counter jump openclash_output_v6'
                fi
-               
-               nft add rule inet fw4 openclash_output_v6 meta nfproto {ipv6} skuid != 65534 tcp dport { 0-65535 } counter redirect to "$proxy_port"
-               nft 'add chain inet fw4 nat_output { type nat hook output priority -1; }'
-               nft 'add rule inet fw4 nat_output meta nfproto {ipv6} counter jump openclash_output_v6'
             fi
          fi
-      fi
 
-      if [ "$enable_v6_udp_proxy" -eq 1 ] || [ "$ipv6_mode" -eq 0 ] || [ "$ipv6_mode" -eq 2 ]; then
-         nft 'add chain inet fw4 openclash_mangle_v6'
-         nft 'flush chain inet fw4 openclash_mangle_v6'
-         nft 'add rule inet fw4 openclash_mangle_v6 meta nfproto {ipv6} udp iifname lo counter return'
-         nft add rule inet fw4 openclash_mangle_v6 ip6 daddr @localnetwork6 counter return
-         nft 'add rule inet fw4 openclash_mangle_v6 meta nfproto {ipv6} udp dport 53 counter return'
-         nft 'add rule inet fw4 openclash_mangle_v6 ip6 saddr @localnetwork6 meta nfproto {ipv6} sport @lan_ac_black_ports counter return'
-         nft 'add rule inet fw4 openclash_mangle_v6 ip6 daddr @wan_ac_black_ipv6s counter return'
+         if [ "$enable_v6_udp_proxy" -eq 1 ] || [ "$ipv6_mode" -eq 0 ] || [ "$ipv6_mode" -eq 2 ]; then
+            nft 'add chain inet fw4 openclash_mangle_v6'
+            nft 'flush chain inet fw4 openclash_mangle_v6'
+            nft 'add rule inet fw4 openclash_mangle_v6 meta nfproto {ipv6} udp iifname lo counter return'
+            nft add rule inet fw4 openclash_mangle_v6 ip6 daddr @localnetwork6 counter return
+            nft 'add rule inet fw4 openclash_mangle_v6 meta nfproto {ipv6} udp dport 53 counter return'
+            nft 'add rule inet fw4 openclash_mangle_v6 ip6 saddr @localnetwork6 meta nfproto {ipv6} sport @lan_ac_black_ports counter return'
+            nft 'add rule inet fw4 openclash_mangle_v6 ip6 daddr @wan_ac_black_ipv6s counter return'
 
-         if [ "$en_mode" == "redir-host" ]; then
-            nft 'add rule inet fw4 openclash_mangle_v6 meta nfproto {ipv6} th dport != @common_ports counter return'
-         fi
+            if [ "$en_mode" == "redir-host" ]; then
+               nft 'add rule inet fw4 openclash_mangle_v6 meta nfproto {ipv6} th dport != @common_ports counter return'
+            fi
 
-         nft 'add rule inet fw4 openclash_mangle_v6 ip6 saddr @lan_ac_black_ipv6s counter return'
-         nft 'add rule inet fw4 openclash_mangle_v6 ether saddr @lan_ac_black_macs counter return'
-         if [ "$lan_ac_mode" = "1" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_ips)" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_macs)" ]; then
-            nft 'add rule inet fw4 openclash_mangle_v6 ether saddr != @lan_ac_white_macs ip6 saddr != @lan_ac_white_ipv6s counter return'
-         else
-            nft 'add rule inet fw4 openclash_mangle_v6 ether saddr != @lan_ac_white_macs counter return'
-            nft 'add rule inet fw4 openclash_mangle_v6 ip6 saddr != @lan_ac_white_ipv6s counter return'
-         fi
+            nft 'add rule inet fw4 openclash_mangle_v6 ip6 saddr @lan_ac_black_ipv6s counter return'
+            nft 'add rule inet fw4 openclash_mangle_v6 ether saddr @lan_ac_black_macs counter return'
+            if [ "$lan_ac_mode" = "1" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_ips)" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_macs)" ]; then
+               nft 'add rule inet fw4 openclash_mangle_v6 ether saddr != @lan_ac_white_macs ip6 saddr != @lan_ac_white_ipv6s counter return'
+            else
+               nft 'add rule inet fw4 openclash_mangle_v6 ether saddr != @lan_ac_white_macs counter return'
+               nft 'add rule inet fw4 openclash_mangle_v6 ip6 saddr != @lan_ac_white_ipv6s counter return'
+            fi
 
-         if [ "$china_ip6_route" != "0" ]; then
-            if [ "$china_ip6_route" = "1" ]; then
-               rule="ip6 daddr @china_ip6_route"
-            elif [ "$china_ip6_route" = "2" ]; then
-               rule="ip6 daddr != @china_ip6_route"
+            if [ "$china_ip6_route" != "0" ]; then
+               if [ "$china_ip6_route" = "1" ]; then
+                  rule="ip6 daddr @china_ip6_route"
+               elif [ "$china_ip6_route" = "2" ]; then
+                  rule="ip6 daddr != @china_ip6_route"
+               fi
+               [ "$enable_redirect_dns" != "2" ] && rule="$rule ip6 daddr != @china_ip6_route_pass"
+               nft "add rule inet fw4 openclash_mangle_v6 $rule counter return"
             fi
-            [ "$enable_redirect_dns" != "2" ] && rule="$rule ip6 daddr != @china_ip6_route_pass"
-            nft "add rule inet fw4 openclash_mangle_v6 $rule counter return"
          fi
-      fi
 
-      #TProxy & TUN
-      if [ "$ipv6_mode" -ne 1 ]; then
-         if [ "$ipv6_mode" -eq 0 ]; then
-            nft add rule inet fw4 openclash_mangle_v6 meta nfproto {ipv6} tcp dport { 0-65535 } mark set "$PROXY_FWMARK" tproxy ip6 to :"$tproxy_port" counter accept comment \"OpenClash TCP Tproxy\"
-         elif [ "$ipv6_mode" -eq 2 ]; then
-            nft add rule inet fw4 openclash_mangle_v6 meta nfproto {ipv6} tcp dport { 0-65535 } mark set "$PROXY_FWMARK" counter
-         fi
+         #TProxy & TUN
+         if [ "$ipv6_mode" -ne 1 ]; then
+            if [ "$ipv6_mode" -eq 0 ]; then
+               nft add rule inet fw4 openclash_mangle_v6 meta nfproto {ipv6} tcp dport { 0-65535 } mark set "$PROXY_FWMARK" tproxy ip6 to :"$tproxy_port" counter accept comment \"OpenClash TCP Tproxy\"
+            elif [ "$ipv6_mode" -eq 2 ]; then
+               nft add rule inet fw4 openclash_mangle_v6 meta nfproto {ipv6} tcp dport { 0-65535 } mark set "$PROXY_FWMARK" counter
+            fi
 
-         if [ "$router_self_proxy" = "1" ]; then
-            if [ "$ipv6_mode" -eq 2 ]; then
-               nft 'add chain inet fw4 openclash_mangle_output_v6'
-               nft 'flush chain inet fw4 openclash_mangle_output_v6'
-               nft 'add rule inet fw4 openclash_mangle_output_v6 ip6 daddr @localnetwork6 counter return'
-               nft 'add rule inet fw4 openclash_mangle_output_v6 ip6 saddr @localnetwork6 meta nfproto {ipv6} sport @lan_ac_black_ports counter return'
-               nft 'add rule inet fw4 openclash_mangle_output_v6 skuid != 65534 ip6 daddr @wan_ac_black_ipv6s counter return'
-               if [ "$en_mode" = "redir-host" ]; then
-                  nft 'add rule inet fw4 openclash_mangle_output_v6 meta nfproto {ipv6} th dport != @common_ports skuid != 65534 counter return'
-               fi
+            if [ "$router_self_proxy" = "1" ]; then
+               if [ "$ipv6_mode" -eq 2 ]; then
+                  nft 'add chain inet fw4 openclash_mangle_output_v6'
+                  nft 'flush chain inet fw4 openclash_mangle_output_v6'
+                  nft 'add rule inet fw4 openclash_mangle_output_v6 ip6 daddr @localnetwork6 counter return'
+                  nft 'add rule inet fw4 openclash_mangle_output_v6 ip6 saddr @localnetwork6 meta nfproto {ipv6} sport @lan_ac_black_ports counter return'
+                  nft 'add rule inet fw4 openclash_mangle_output_v6 skuid != 65534 ip6 daddr @wan_ac_black_ipv6s counter return'
+                  if [ "$en_mode" = "redir-host" ]; then
+                     nft 'add rule inet fw4 openclash_mangle_output_v6 meta nfproto {ipv6} th dport != @common_ports skuid != 65534 counter return'
+                  fi
 
-               if [ "$china_ip6_route" != "0" ]; then
-                  if [ "$china_ip6_route" = "1" ]; then
-                     rule="ip6 daddr @china_ip6_route"
-                  elif [ "$china_ip6_route" = "2" ]; then
-                     rule="ip6 daddr != @china_ip6_route"
+                  if [ "$china_ip6_route" != "0" ]; then
+                     if [ "$china_ip6_route" = "1" ]; then
+                        rule="ip6 daddr @china_ip6_route"
+                     elif [ "$china_ip6_route" = "2" ]; then
+                        rule="ip6 daddr != @china_ip6_route"
+                     fi
+                     [ "$enable_redirect_dns" != "2" ] && rule="$rule ip6 daddr != @china_ip6_route_pass"
+                     nft 'add rule inet fw4 openclash_mangle_output_v6 skuid != 65534 $rule counter return'
                   fi
-                  [ "$enable_redirect_dns" != "2" ] && rule="$rule ip6 daddr != @china_ip6_route_pass"
-                  nft 'add rule inet fw4 openclash_mangle_output_v6 skuid != 65534 $rule counter return'
+                  nft add rule inet fw4 openclash_mangle_output_v6 meta nfproto {ipv6} skuid != 65534 tcp dport { 0-65535 } mark set "$PROXY_FWMARK" counter
+                  nft 'add rule inet fw4 mangle_output meta nfproto {ipv6} counter jump openclash_mangle_output_v6'
                fi
-               nft add rule inet fw4 openclash_mangle_output_v6 meta nfproto {ipv6} skuid != 65534 tcp dport { 0-65535 } mark set "$PROXY_FWMARK" counter
-               nft 'add rule inet fw4 mangle_output meta nfproto {ipv6} counter jump openclash_mangle_output_v6'
             fi
          fi
-      fi
 
-      #udp
-      if [ "$ipv6_mode" -eq 2 ]; then
-         nft add rule inet fw4 openclash_mangle_v6 meta nfproto {ipv6} udp dport { 0-65535 } mark set "$PROXY_FWMARK" counter
-      else
-         if [ "$enable_v6_udp_proxy" -eq 1 ]; then
-            nft add rule inet fw4 openclash_mangle_v6 meta nfproto {ipv6} udp dport { 0-65535 } mark set "$PROXY_FWMARK" tproxy ip6 to :"$tproxy_port" counter accept comment \"OpenClash UDP Tproxy\"
+         #udp
+         if [ "$ipv6_mode" -eq 2 ]; then
+            nft add rule inet fw4 openclash_mangle_v6 meta nfproto {ipv6} udp dport { 0-65535 } mark set "$PROXY_FWMARK" counter
+         else
+            if [ "$enable_v6_udp_proxy" -eq 1 ]; then
+               nft add rule inet fw4 openclash_mangle_v6 meta nfproto {ipv6} udp dport { 0-65535 } mark set "$PROXY_FWMARK" tproxy ip6 to :"$tproxy_port" counter accept comment \"OpenClash UDP Tproxy\"
+            fi
          fi
-      fi
 
-      nft 'add rule inet fw4 mangle_prerouting meta nfproto {ipv6} counter jump openclash_mangle_v6'
+         nft 'add rule inet fw4 mangle_prerouting meta nfproto {ipv6} counter jump openclash_mangle_v6'
 
-      #route
-      if [ "$ipv6_mode" -ne 2 ]; then
-         if [ "$enable_v6_udp_proxy" -eq 1 ] || [ "$ipv6_mode" -eq 0 ]; then
-            modprobe nft_tproxy >/dev/null 2>&1
-            ip -6 rule add fwmark "$PROXY_FWMARK" table "$PROXY_ROUTE_TABLE"
-            ip -6 route add local ::/0 dev lo table "$PROXY_ROUTE_TABLE"
+         #route
+         if [ "$ipv6_mode" -ne 2 ]; then
+            if [ "$enable_v6_udp_proxy" -eq 1 ] || [ "$ipv6_mode" -eq 0 ]; then
+               modprobe nft_tproxy >/dev/null 2>&1
+               ip -6 rule add fwmark "$PROXY_FWMARK" table "$PROXY_ROUTE_TABLE"
+               ip -6 route add local ::/0 dev lo table "$PROXY_ROUTE_TABLE"
+            fi
+         else
+            set_tun_tap "v6"
          fi
-      else
-         set_tun_tap "v6"
-      fi
-
-      #TUN FORWORD
-      if [ "$ipv6_mode" -eq 2 ]; then
-         nft insert rule inet fw4 forward position 0 meta nfproto {ipv6} oifname utun counter accept comment \"OpenClash TUN Forward\"
-         nft insert rule inet fw4 forward position 0 meta nfproto {ipv6} iifname utun counter accept comment \"OpenClash TUN Forward\"
-         nft insert rule inet fw4 input position 0 meta nfproto {ipv6} iifname utun counter accept comment \"OpenClash TUN Input\"
-         nft insert rule inet fw4 srcnat position 0 meta nfproto {ipv6} oifname utun counter return comment \"OpenClash TUN Postrouting\"
-      fi
 
-      #quic
-      if [ "$disable_udp_quic" -eq 1 ]; then
+         #TUN FORWORD
          if [ "$ipv6_mode" -eq 2 ]; then
-            chain="forward"
-         else
-            chain="input"
+            nft insert rule inet fw4 forward position 0 meta nfproto {ipv6} oifname utun counter accept comment \"OpenClash TUN Forward\"
+            nft insert rule inet fw4 forward position 0 meta nfproto {ipv6} iifname utun counter accept comment \"OpenClash TUN Forward\"
+            nft insert rule inet fw4 input position 0 meta nfproto {ipv6} iifname utun counter accept comment \"OpenClash TUN Input\"
+            nft insert rule inet fw4 srcnat position 0 meta nfproto {ipv6} oifname utun counter return comment \"OpenClash TUN Postrouting\"
          fi
-         if [ "$china_ip6_route" = "2" ]; then
-            rule="ip6 daddr @china_ip6_route"
-         else
-            rule="ip6 daddr != @china_ip6_route"
+
+         #quic
+         if [ "$disable_udp_quic" -eq 1 ]; then
+            if [ "$ipv6_mode" -eq 2 ]; then
+               chain="forward"
+            else
+               chain="input"
+            fi
+            if [ "$china_ip6_route" = "2" ]; then
+               rule="ip6 daddr @china_ip6_route"
+            else
+               rule="ip6 daddr != @china_ip6_route"
+            fi
+            nft insert rule inet fw4 $chain position 0 udp dport 443 $rule counter reject comment \"OpenClash QUIC REJECT\"
+         fi
+
+         #bypass gateway compatible
+         if [ "$bypass_gateway_compatible" -eq 1 ]; then
+            #nft 'delete chain inet fw4 openclash_post_v6'
+            nft 'add chain inet fw4 openclash_post_v6'
+            nft 'flush chain inet fw4 openclash_post_v6'
+            nft 'add rule inet fw4 openclash_post_v6 ip6 saddr @localnetwork6 meta nfproto {ipv6} sport @lan_ac_black_ports counter return'
+            nft add rule inet fw4 openclash_post_v6 meta nfproto {ipv6} meta mark "$PROXY_FWMARK" counter accept
+            nft 'add rule inet fw4 openclash_post_v6 ip6 daddr @localnetwork6 counter return'
+            nft 'add rule inet fw4 openclash_post_v6 meta nfproto {ipv6} fib saddr type != { local } meta skuid != 65534 counter masquerade'
+            nft add rule inet fw4 srcnat meta nfproto {ipv6} counter jump openclash_post_v6 comment \"OpenClash Bypass Gateway Compatible\"
+         fi
+
+         #google_dns_block
+         if [ -n "$(uci -q get openclash.config.lan_block_google_dns_ips)" ] || [ -n "$(uci -q get openclash.config.lan_block_google_dns_macs)" ]; then
+            nft 'add set inet fw4 openclash_google_dns_ipv6s { type ipv6_addr; flags interval; auto-merge; }'
+            nft 'add element inet fw4 openclash_google_dns_ipv6s { 2001:4860:4860::8888, 2001:4860:4860::8844, 2001:4860:4860::6464, 2001:4860:4860::64 }'
+            nft insert rule inet fw4 dstnat position 0 ip6 saddr @lan_block_google_dns_ipv6s ip6 daddr @openclash_google_dns_ipv6s counter accept comment \"OpenClash Google DNS Block\"
+            nft insert rule inet fw4 dstnat position 0 ether saddr @lan_block_google_dns_macs ip6 daddr @openclash_google_dns_ipv6s counter accept comment \"OpenClash Google DNS Block\"
+            nft insert rule inet fw4 forward position 0 ip6 saddr @lan_block_google_dns_ipv6s ip6 daddr @openclash_google_dns_ipv6s counter reject comment \"OpenClash Google DNS Block\"
+            nft insert rule inet fw4 forward position 0 ether saddr @lan_block_google_dns_macs ip6 daddr @openclash_google_dns_ipv6s counter reject comment \"OpenClash Google DNS Block\"
+         fi
+
+         #intranet allowed
+         if [ "$intranet_allowed" -eq 1 ]; then
+            if [ -n "$intranet_allowed_wan_name" ] && [ "$intranet_allowed_wan_name" != "0" ]; then
+               config_load "openclash"
+               config_list_foreach "config" "intranet_allowed_wan_name" wan6_name_add
+            else
+               wan6_ints=$(nft list chain inet fw4 input |grep -e "jump input_wan" 2>/dev/null |awk '{for (i=1;i<=NF;i++){if ($i ~ /iifname/ && $(i+1) != "{") {print $(i+1)} if ($i ~ /iifname/ && $(i+1) == "{"){for (j=i+1;j<=NF;j++){if ($j~ /}/) {out="";for (k=i+1;k<=j;k++){out=out" "$k};print out}}}}}' 2>/dev/null |sed 's/"//g'|sed 's/{//g'|sed 's/}//g'|sed 's/,//g')
+            fi
+            if [ -n "$wan6_ints" ]; then
+               nft 'add chain inet fw4 openclash_wan6_input'
+               nft 'flush chain inet fw4 openclash_wan6_input'
+               for wan6_int in $wan6_ints; do
+                  #nft delete rule inet fw4 input $(nft -a list chain inet fw4 input |grep "@localnetwork6" |awk -F '# ' '{print$2}')
+                  nft insert rule inet fw4 input position 0 iifname "$wan6_int" ip6 saddr != @localnetwork6 counter jump openclash_wan6_input
+               done
+               nft add rule inet fw4 openclash_wan6_input udp dport {$proxy_port,$tproxy_port,$cn_port,$http_port,$socks_port,$mixed_port,$dns_port} counter reject
+               nft add rule inet fw4 openclash_wan6_input tcp dport {$proxy_port,$tproxy_port,$cn_port,$http_port,$socks_port,$mixed_port,$dns_port} counter reject
+            else
+               LOG_OUT "Warning: Can't Settting Only Intranet Allowed Function, Get IPv6 WAN Interfaces error, Please Verify The Firewall's WAN Zone Name is wan, Ignore This IF The Device Does not Have a WAN Interfaces..."
+            fi
          fi
-         nft insert rule inet fw4 $chain position 0 udp dport 443 $rule counter reject comment \"OpenClash QUIC REJECT\"
       fi
+   fi 2>/dev/null
 
-      #bypass gateway compatible
-      if [ "$bypass_gateway_compatible" -eq 1 ]; then
-         #nft 'delete chain inet fw4 openclash_post_v6'
-         nft 'add chain inet fw4 openclash_post_v6'
-         nft 'flush chain inet fw4 openclash_post_v6'
-         nft 'add rule inet fw4 openclash_post_v6 ip6 saddr @localnetwork6 meta nfproto {ipv6} sport @lan_ac_black_ports counter return'
-         nft add rule inet fw4 openclash_post_v6 meta nfproto {ipv6} meta mark "$PROXY_FWMARK" counter accept
-         nft 'add rule inet fw4 openclash_post_v6 ip6 daddr @localnetwork6 counter return'
-         nft 'add rule inet fw4 openclash_post_v6 meta nfproto {ipv6} fib saddr type != { local } meta skuid != 65534 counter masquerade'
-         nft add rule inet fw4 srcnat meta nfproto {ipv6} counter jump openclash_post_v6 comment \"OpenClash Bypass Gateway Compatible\"
+   #IPTABLES
+   if [ -z "$FW4" ]; then
+      #lan_google_dns_ac
+      if [ -n "$(uci -q get openclash.config.lan_block_google_dns_ips)" ]; then
+         ipset create lan_block_google_dns_ips hash:net
+         ipset create lan_block_google_dns_ipv6s hash:net family inet6
+         config_load "openclash"
+         config_list_foreach "config" "lan_block_google_dns_ips" ac_add "lan_block_google_dns_ips" "lan_block_google_dns_ipv6s"
       fi
-
-      #google_dns_block
-      if [ -n "$(uci -q get openclash.config.lan_block_google_dns_ips)" ] || [ -n "$(uci -q get openclash.config.lan_block_google_dns_macs)" ]; then
-         nft 'add set inet fw4 openclash_google_dns_ipv6s { type ipv6_addr; flags interval; auto-merge; }'
-         nft 'add element inet fw4 openclash_google_dns_ipv6s { 2001:4860:4860::8888, 2001:4860:4860::8844, 2001:4860:4860::6464, 2001:4860:4860::64 }'
-         nft insert rule inet fw4 dstnat position 0 ip6 saddr @lan_block_google_dns_ipv6s ip6 daddr @openclash_google_dns_ipv6s counter accept comment \"OpenClash Google DNS Block\"
-         nft insert rule inet fw4 dstnat position 0 ether saddr @lan_block_google_dns_macs ip6 daddr @openclash_google_dns_ipv6s counter accept comment \"OpenClash Google DNS Block\"
-         nft insert rule inet fw4 forward position 0 ip6 saddr @lan_block_google_dns_ipv6s ip6 daddr @openclash_google_dns_ipv6s counter reject comment \"OpenClash Google DNS Block\"
-         nft insert rule inet fw4 forward position 0 ether saddr @lan_block_google_dns_macs ip6 daddr @openclash_google_dns_ipv6s counter reject comment \"OpenClash Google DNS Block\"
+      if [ -n "$(uci -q get openclash.config.lan_block_google_dns_macs)" ]; then
+         ipset create lan_block_google_dns_macs hash:mac
+         config_load "openclash"
+         config_list_foreach "config" "lan_block_google_dns_macs" ac_add "lan_block_google_dns_macs"
       fi
 
-      #intranet allowed
-      if [ "$intranet_allowed" -eq 1 ]; then
-         if [ -n "$intranet_allowed_wan_name" ] && [ "$intranet_allowed_wan_name" != "0" ]; then
+      #lan_ac
+      if [ "$lan_ac_mode" = "0" ]; then
+         if [ -n "$(uci -q get openclash.config.lan_ac_black_ips)" ]; then
+            ipset create lan_ac_black_ips hash:net
+            ipset create lan_ac_black_ipv6s hash:net family inet6
             config_load "openclash"
-            config_list_foreach "config" "intranet_allowed_wan_name" wan6_name_add
-         else
-            wan6_ints=$(nft list chain inet fw4 input |grep -e "jump input_wan" 2>/dev/null |awk '{for (i=1;i<=NF;i++){if ($i ~ /iifname/ && $(i+1) != "{") {print $(i+1)} if ($i ~ /iifname/ && $(i+1) == "{"){for (j=i+1;j<=NF;j++){if ($j~ /}/) {out="";for (k=i+1;k<=j;k++){out=out" "$k};print out}}}}}' 2>/dev/null |sed 's/"//g'|sed 's/{//g'|sed 's/}//g'|sed 's/,//g')
-         fi
-         if [ -n "$wan6_ints" ]; then
-            nft 'add chain inet fw4 openclash_wan6_input'
-            nft 'flush chain inet fw4 openclash_wan6_input'
-            for wan6_int in $wan6_ints; do
-               #nft delete rule inet fw4 input $(nft -a list chain inet fw4 input |grep "@localnetwork6" |awk -F '# ' '{print$2}')
-               nft insert rule inet fw4 input position 0 iifname "$wan6_int" ip6 saddr != @localnetwork6 counter jump openclash_wan6_input
-            done
-            nft add rule inet fw4 openclash_wan6_input udp dport {$proxy_port,$tproxy_port,$cn_port,$http_port,$socks_port,$mixed_port,$dns_port} counter reject
-            nft add rule inet fw4 openclash_wan6_input tcp dport {$proxy_port,$tproxy_port,$cn_port,$http_port,$socks_port,$mixed_port,$dns_port} counter reject
-         else
-            LOG_OUT "Warning: Can't Settting Only Intranet Allowed Function, Get IPv6 WAN Interfaces error, Please Verify The Firewall's WAN Zone Name is wan, Ignore This IF The Device Does not Have a WAN Interfaces..."
+            config_list_foreach "config" "lan_ac_black_ips" ac_add "lan_ac_black_ips" "lan_ac_black_ipv6s"
+         fi
+         if [ -n "$(uci -q get openclash.config.lan_ac_black_macs)" ]; then
+            ipset create lan_ac_black_macs hash:mac
+            config_load "openclash"
+            config_list_foreach "config" "lan_ac_black_macs" ac_add "lan_ac_black_macs"
+         fi
+      elif [ "$lan_ac_mode" = "1" ]; then
+         if [ -n "$(uci -q get openclash.config.lan_ac_white_ips)" ]; then
+            ipset create lan_ac_white_ips hash:net
+            ipset create lan_ac_white_ipv6s hash:net family inet6
+            config_load "openclash"
+            config_list_foreach "config" "lan_ac_white_ips" ac_add "lan_ac_white_ips" "lan_ac_white_ipv6s"
+         fi
+         if [ -n "$(uci -q get openclash.config.lan_ac_white_macs)" ]; then
+            ipset create lan_ac_white_macs hash:mac
+            config_load "openclash"
+            config_list_foreach "config" "lan_ac_white_macs" ac_add "lan_ac_white_macs"
          fi
       fi
-   fi
-fi 2>/dev/null
 
-#IPTABLES
-if [ -z "$FW4" ]; then
-   #lan_google_dns_ac
-   if [ -n "$(uci -q get openclash.config.lan_block_google_dns_ips)" ]; then
-      ipset create lan_block_google_dns_ips hash:net
-      ipset create lan_block_google_dns_ipv6s hash:net family inet6
-      config_load "openclash"
-      config_list_foreach "config" "lan_block_google_dns_ips" ac_add "lan_block_google_dns_ips" "lan_block_google_dns_ipv6s"
-   fi
-   if [ -n "$(uci -q get openclash.config.lan_block_google_dns_macs)" ]; then
-      ipset create lan_block_google_dns_macs hash:mac
-      config_load "openclash"
-      config_list_foreach "config" "lan_block_google_dns_macs" ac_add "lan_block_google_dns_macs"
-   fi
-
-   #lan_ac
-   if [ "$lan_ac_mode" = "0" ]; then
-      if [ -n "$(uci -q get openclash.config.lan_ac_black_ips)" ]; then
-         ipset create lan_ac_black_ips hash:net
-         ipset create lan_ac_black_ipv6s hash:net family inet6
+      #wan ac
+      if [ -n "$(uci -q get openclash.config.wan_ac_black_ips)" ]; then
+         ipset create wan_ac_black_ips hash:net
+         ipset create wan_ac_black_ipv6s hash:net family inet6
          config_load "openclash"
-         config_list_foreach "config" "lan_ac_black_ips" ac_add "lan_ac_black_ips" "lan_ac_black_ipv6s"
+         config_list_foreach "config" "wan_ac_black_ips" ac_add "wan_ac_black_ips" "wan_ac_black_ipv6s"
       fi
-      if [ -n "$(uci -q get openclash.config.lan_ac_black_macs)" ]; then
-         ipset create lan_ac_black_macs hash:mac
-         config_load "openclash"
-         config_list_foreach "config" "lan_ac_black_macs" ac_add "lan_ac_black_macs"
-      fi
-   elif [ "$lan_ac_mode" = "1" ]; then
-      if [ -n "$(uci -q get openclash.config.lan_ac_white_ips)" ]; then
-         ipset create lan_ac_white_ips hash:net
-         ipset create lan_ac_white_ipv6s hash:net family inet6
-         config_load "openclash"
-         config_list_foreach "config" "lan_ac_white_ips" ac_add "lan_ac_white_ips" "lan_ac_white_ipv6s"
-      fi
-      if [ -n "$(uci -q get openclash.config.lan_ac_white_macs)" ]; then
-         ipset create lan_ac_white_macs hash:mac
-         config_load "openclash"
-         config_list_foreach "config" "lan_ac_white_macs" ac_add "lan_ac_white_macs"
-      fi
-   fi
-
-   #wan ac
-   if [ -n "$(uci -q get openclash.config.wan_ac_black_ips)" ]; then
-      ipset create wan_ac_black_ips hash:net
-      ipset create wan_ac_black_ipv6s hash:net family inet6
-      config_load "openclash"
-      config_list_foreach "config" "wan_ac_black_ips" ac_add "wan_ac_black_ips" "wan_ac_black_ipv6s"
-   fi
 
-   #lan port ac
-   if [ -n "$(uci -q get openclash.config.lan_ac_black_ports)" ]; then
-      ipset create lan_ac_black_ports bitmap:port range 0-65535
-      config_load "openclash"
-      config_list_foreach "config" "lan_ac_black_ports" ac_add "lan_ac_black_ports"
-   fi
-
-   #local
-   ipset create localnetwork hash:net
-   if [ -f "/etc/openclash/custom/openclash_custom_localnetwork_ipv4.list" ]; then
-      for line in `cat "/etc/openclash/custom/openclash_custom_localnetwork_ipv4.list"`
-      do
-         ipset add localnetwork "$line"
-      done
-   else
-      ipset add localnetwork 0.0.0.0/8
-      ipset add localnetwork 127.0.0.0/8
-      ipset add localnetwork 10.0.0.0/8
-      ipset add localnetwork 169.254.0.0/16
-      ipset add localnetwork 192.168.0.0/16
-      ipset add localnetwork 224.0.0.0/4
-      ipset add localnetwork 240.0.0.0/4
-      ipset add localnetwork 172.16.0.0/12
-      ipset add localnetwork 100.64.0.0/10
-   fi
-
-   if [ -n "$wan_ip4s" ]; then
-      for wan_ip4 in $wan_ip4s; do
-         ipset add localnetwork "$wan_ip4"
-      done
-   fi
-
-   #common ports
-   if [ -n "$common_ports" ] && [ "$common_ports" != "0" ]; then
-      ipset create common_ports bitmap:port range 0-65535
-      for i in $common_port; do
-         ipset add common_ports $i
-      done
-   fi
-
-   #bypass gateway compatible
-   if [ "$bypass_gateway_compatible" -eq 1 ]; then
-      iptables -t nat -N openclash_post
-      iptables -t nat -F openclash_post
-      iptables -t nat -A openclash_post -m set --match-set localnetwork src -m set --match-set lan_ac_black_ports src -j RETURN >/dev/null 2>&1
-      iptables -t nat -A openclash_post -m mark --mark "$PROXY_FWMARK" -j ACCEPT
-      iptables -t nat -A openclash_post -m set --match-set localnetwork dst -j RETURN
-      iptables -t nat -A openclash_post -m addrtype ! --src-type LOCAL -m owner ! --uid-owner 65534 -j MASQUERADE
-      iptables -t nat -A POSTROUTING -m comment --comment "OpenClash Bypass Gateway Compatible" -j openclash_post
-   fi
-
-   #intranet allowed
-   if [ "$intranet_allowed" -eq 1 ]; then
-      if [ -n "$intranet_allowed_wan_name" ] && [ "$intranet_allowed_wan_name" != "0" ]; then
+      #lan port ac
+      if [ -n "$(uci -q get openclash.config.lan_ac_black_ports)" ]; then
+         ipset create lan_ac_black_ports bitmap:port range 0-65535
          config_load "openclash"
-         config_list_foreach "config" "intranet_allowed_wan_name" wan_name_add
-      else
-         wan_ints=$(iptables-save -t filter |grep -e "-j zone_wan_input" 2>/dev/null |awk '{for (i=1;i<=NF;i++) {if ($i ~ /-i/) {print $(i+1)}}}' 2>/dev/null)
+         config_list_foreach "config" "lan_ac_black_ports" ac_add "lan_ac_black_ports"
       fi
-      if [ -n "$wan_ints" ]; then
-         iptables -t filter -N openclash_wan_input
-         iptables -t filter -F openclash_wan_input
-         for wan_int in $wan_ints; do
-            iptables -t filter -I INPUT -i "$wan_int" -m set ! --match-set localnetwork src -j openclash_wan_input
+
+      #local
+      ipset create localnetwork hash:net
+      if [ -f "/etc/openclash/custom/openclash_custom_localnetwork_ipv4.list" ]; then
+         for line in `cat "/etc/openclash/custom/openclash_custom_localnetwork_ipv4.list"`
+         do
+            ipset add localnetwork "$line"
          done
-         iptables -t filter -A openclash_wan_input -p udp -m multiport --dport "$proxy_port,$tproxy_port,$cn_port,$http_port,$socks_port,$mixed_port,$dns_port" -j REJECT >/dev/null 2>&1
-         iptables -t filter -A openclash_wan_input -p tcp -m multiport --dport "$proxy_port,$tproxy_port,$cn_port,$http_port,$socks_port,$mixed_port,$dns_port" -j REJECT >/dev/null 2>&1
       else
-         LOG_OUT "Warning: Can't Settting Only Intranet Allowed Function, Get IPv4 WAN Interfaces error, Please Verify The Firewall's WAN Zone Name is wan, Ignore This IF The Device Does not Have a WAN Interfaces..."
+         ipset add localnetwork 0.0.0.0/8
+         ipset add localnetwork 127.0.0.0/8
+         ipset add localnetwork 10.0.0.0/8
+         ipset add localnetwork 169.254.0.0/16
+         ipset add localnetwork 192.168.0.0/16
+         ipset add localnetwork 224.0.0.0/4
+         ipset add localnetwork 240.0.0.0/4
+         ipset add localnetwork 172.16.0.0/12
+         ipset add localnetwork 100.64.0.0/10
+      fi
+
+      if [ -n "$wan_ip4s" ]; then
+         for wan_ip4 in $wan_ip4s; do
+            ipset add localnetwork "$wan_ip4"
+         done
       fi
-   fi
 
-   if [ "$china_ip_route" != "0" ] || [ "$disable_udp_quic" = "1" ]; then
-      ipset -! flush china_ip_route
-      ipset -! restore </etc/openclash/china_ip_route.ipset
+      #common ports
+      if [ -n "$common_ports" ] && [ "$common_ports" != "0" ]; then
+         ipset create common_ports bitmap:port range 0-65535
+         for i in $common_port; do
+            ipset add common_ports $i
+         done
+      fi
 
-      if [ "$enable_redirect_dns" != "2" ]; then
-         mkdir -p ${DNSMASQ_CONF_DIR}
-         echo "create china_ip_route_pass hash:net family inet hashsize 1024 maxelem 1000000" >/tmp/openclash_china_ip_route_pass.list
-         awk '!/^$/&&!/^#/&&/(^([1-9]|1[0-9]|1[1-9]{2}|2[0-4][0-9]|25[0-5])\.)(([0-9]{1,2}|1[1-9]{2}|2[0-4][0-9]|25[0-5])\.){2}([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-5][0-9]|25[0-4])((\/[0-9][0-9])?)$/{printf("add china_ip_route_pass %s'" "'\n",$0)}' /etc/openclash/custom/openclash_custom_chnroute_pass.list >>/tmp/openclash_china_ip_route_pass.list 2>/dev/null
-         awk '!/^$/&&!/^#/&&!/(^([1-9]|1[0-9]|1[1-9]{2}|2[0-4][0-9]|25[0-5])\.)(([0-9]{1,2}|1[1-9]{2}|2[0-4][0-9]|25[0-5])\.){2}([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-5][0-9]|25[0-4])((\/[0-9][0-9])?)$/{printf("ipset=/%s/china_ip_route_pass'" "'\n",$0)}' /etc/openclash/custom/openclash_custom_chnroute_pass.list >>${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute_pass.conf 2>/dev/null
-         ipset -! flush china_ip_route_pass
-         ipset -! restore </tmp/openclash_china_ip_route_pass.list
-         rm -rf /tmp/openclash_china_ip_route_pass.list
+      #bypass gateway compatible
+      if [ "$bypass_gateway_compatible" -eq 1 ]; then
+         iptables -t nat -N openclash_post
+         iptables -t nat -F openclash_post
+         iptables -t nat -A openclash_post -m set --match-set localnetwork src -m set --match-set lan_ac_black_ports src -j RETURN >/dev/null 2>&1
+         iptables -t nat -A openclash_post -m mark --mark "$PROXY_FWMARK" -j ACCEPT
+         iptables -t nat -A openclash_post -m set --match-set localnetwork dst -j RETURN
+         iptables -t nat -A openclash_post -m addrtype ! --src-type LOCAL -m owner ! --uid-owner 65534 -j MASQUERADE
+         iptables -t nat -A POSTROUTING -m comment --comment "OpenClash Bypass Gateway Compatible" -j openclash_post
+      fi
 
-         if [ "$en_mode" = "fake-ip" ] && [ "$china_ip_route" != "0" ]; then
-            cat "/etc/openclash/accelerated-domains.china.conf" |awk -v dns="${custom_china_domain_dns_server}" -F '/' '!/^$/&&!/^#/{print $1"/"$2"/"dns}' >${DNSMASQ_CONF_DIR}/dnsmasq_accelerated-domains.china.conf
-            for i in `awk '!/^$/&&!/^#/&&!/(^([1-9]|1[0-9]|1[1-9]{2}|2[0-4][0-9]|25[0-5])\.)(([0-9]{1,2}|1[1-9]{2}|2[0-4][0-9]|25[0-5])\.){2}([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-5][0-9]|25[0-4])((\/[0-9][0-9])?)$/{printf("%s\n",$0)}' /etc/openclash/custom/openclash_custom_chnroute_pass.list`
-            do
-               sed -i "/server=\/${i}\//d" ${DNSMASQ_CONF_DIR}/dnsmasq_accelerated-domains.china.conf
+      #intranet allowed
+      if [ "$intranet_allowed" -eq 1 ]; then
+         if [ -n "$intranet_allowed_wan_name" ] && [ "$intranet_allowed_wan_name" != "0" ]; then
+            config_load "openclash"
+            config_list_foreach "config" "intranet_allowed_wan_name" wan_name_add
+         else
+            wan_ints=$(iptables-save -t filter |grep -e "-j zone_wan_input" 2>/dev/null |awk '{for (i=1;i<=NF;i++) {if ($i ~ /-i/) {print $(i+1)}}}' 2>/dev/null)
+         fi
+         if [ -n "$wan_ints" ]; then
+            iptables -t filter -N openclash_wan_input
+            iptables -t filter -F openclash_wan_input
+            for wan_int in $wan_ints; do
+               iptables -t filter -I INPUT -i "$wan_int" -m set ! --match-set localnetwork src -j openclash_wan_input
             done
+            iptables -t filter -A openclash_wan_input -p udp -m multiport --dport "$proxy_port,$tproxy_port,$cn_port,$http_port,$socks_port,$mixed_port,$dns_port" -j REJECT >/dev/null 2>&1
+            iptables -t filter -A openclash_wan_input -p tcp -m multiport --dport "$proxy_port,$tproxy_port,$cn_port,$http_port,$socks_port,$mixed_port,$dns_port" -j REJECT >/dev/null 2>&1
+         else
+            LOG_OUT "Warning: Can't Settting Only Intranet Allowed Function, Get IPv4 WAN Interfaces error, Please Verify The Firewall's WAN Zone Name is wan, Ignore This IF The Device Does not Have a WAN Interfaces..."
          fi
       fi
-   fi
 
-   DNSPORT=$(uci -q get dhcp.@dnsmasq[0].port)
-   if [ -z "$DNSPORT" ]; then
-      DNSPORT=$(netstat -nlp |grep -E '127.0.0.1:.*dnsmasq' |awk -F '127.0.0.1:' '{print $2}' |awk '{print $1}' |head -1 || echo 53)
-   fi
+      if [ "$china_ip_route" != "0" ] || [ "$disable_udp_quic" = "1" ]; then
+         ipset -! flush china_ip_route
+         ipset -! restore </etc/openclash/china_ip_route.ipset
 
-   if [ "$enable_redirect_dns" -eq 1 ]; then
-      if [ -z "$(iptables -t nat -nL PREROUTING --line-number |grep 'OpenClash DNS Hijack')" ]; then
+         if [ "$enable_redirect_dns" != "2" ]; then
+            mkdir -p ${DNSMASQ_CONF_DIR}
+            echo "create china_ip_route_pass hash:net family inet hashsize 1024 maxelem 1000000" >/tmp/openclash_china_ip_route_pass.list
+            awk '!/^$/&&!/^#/&&/(^([1-9]|1[0-9]|1[1-9]{2}|2[0-4][0-9]|25[0-5])\.)(([0-9]{1,2}|1[1-9]{2}|2[0-4][0-9]|25[0-5])\.){2}([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-5][0-9]|25[0-4])((\/[0-9][0-9])?)$/{printf("add china_ip_route_pass %s'" "'\n",$0)}' /etc/openclash/custom/openclash_custom_chnroute_pass.list >>/tmp/openclash_china_ip_route_pass.list 2>/dev/null
+            awk '!/^$/&&!/^#/&&!/(^([1-9]|1[0-9]|1[1-9]{2}|2[0-4][0-9]|25[0-5])\.)(([0-9]{1,2}|1[1-9]{2}|2[0-4][0-9]|25[0-5])\.){2}([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-5][0-9]|25[0-4])((\/[0-9][0-9])?)$/{printf("ipset=/%s/china_ip_route_pass'" "'\n",$0)}' /etc/openclash/custom/openclash_custom_chnroute_pass.list >>${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute_pass.conf 2>/dev/null
+            ipset -! flush china_ip_route_pass
+            ipset -! restore </tmp/openclash_china_ip_route_pass.list
+            rm -rf /tmp/openclash_china_ip_route_pass.list
+
+            if [ "$en_mode" = "fake-ip" ] && [ "$china_ip_route" != "0" ]; then
+               cat "/etc/openclash/accelerated-domains.china.conf" |awk -v dns="${custom_china_domain_dns_server}" -F '/' '!/^$/&&!/^#/{print $1"/"$2"/"dns}' >${DNSMASQ_CONF_DIR}/dnsmasq_accelerated-domains.china.conf
+               for i in `awk '!/^$/&&!/^#/&&!/(^([1-9]|1[0-9]|1[1-9]{2}|2[0-4][0-9]|25[0-5])\.)(([0-9]{1,2}|1[1-9]{2}|2[0-4][0-9]|25[0-5])\.){2}([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-5][0-9]|25[0-4])((\/[0-9][0-9])?)$/{printf("%s\n",$0)}' /etc/openclash/custom/openclash_custom_chnroute_pass.list`
+               do
+                  sed -i "/server=\/${i}\//d" ${DNSMASQ_CONF_DIR}/dnsmasq_accelerated-domains.china.conf
+               done
+            fi
+         fi
+      fi
+
+      DNSPORT=$(uci -q get dhcp.@dnsmasq[0].port)
+      if [ -z "$DNSPORT" ]; then
+         DNSPORT=$(netstat -nlp |grep -E '127.0.0.1:.*dnsmasq' |awk -F '127.0.0.1:' '{print $2}' |awk '{print $1}' |head -1 || echo 53)
+      fi
+
+      if [ "$enable_redirect_dns" -eq 1 ]; then
+         if [ -z "$(iptables -t nat -nL PREROUTING --line-number |grep 'OpenClash DNS Hijack')" ]; then
+            if [ "$lan_ac_mode" != "1" ]; then
+               ACBLACKDNSFILTER=""
+               if [ "$lan_ac_mode" = "0" ]; then
+                  if [ -n "$(uci -q get openclash.config.lan_ac_black_ips)" ]; then
+                     ACBLACKDNSFILTER="-m set ! --match-set lan_ac_black_ips src"
+                  fi
+                  if [ -n "$(uci -q get openclash.config.lan_ac_black_macs)" ]; then
+                     ACBLACKDNSFILTER="$ACBLACKDNSFILTER -m set ! --match-set lan_ac_black_macs src"
+                  fi
+               fi
+               iptables -t nat -I PREROUTING -p udp --dport 53 ${ACBLACKDNSFILTER} -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
+               iptables -t nat -I PREROUTING -p tcp --dport 53 ${ACBLACKDNSFILTER} -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
+            else
+               iptables -t nat -I PREROUTING -p udp --dport 53 -m set --match-set lan_ac_white_ips src -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
+               iptables -t nat -I PREROUTING -p tcp --dport 53 -m set --match-set lan_ac_white_ips src -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
+               iptables -t nat -I PREROUTING -p udp --dport 53 -m set --match-set lan_ac_white_macs src -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
+               iptables -t nat -I PREROUTING -p tcp --dport 53 -m set --match-set lan_ac_white_macs src -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
+            fi
+         fi
+      elif [ "$enable_redirect_dns" -eq 2 ]; then
+         iptables -t nat -N openclash_dns_redirect
+         iptables -t nat -F openclash_dns_redirect
          if [ "$lan_ac_mode" != "1" ]; then
             ACBLACKDNSFILTER=""
             if [ "$lan_ac_mode" = "0" ]; then
@@ -2433,491 +2465,446 @@ if [ -z "$FW4" ]; then
                   ACBLACKDNSFILTER="$ACBLACKDNSFILTER -m set ! --match-set lan_ac_black_macs src"
                fi
             fi
-            iptables -t nat -I PREROUTING -p udp --dport 53 ${ACBLACKDNSFILTER} -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
-            iptables -t nat -I PREROUTING -p tcp --dport 53 ${ACBLACKDNSFILTER} -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
+            iptables -t nat -A openclash_dns_redirect -p udp --dport 53 ${ACBLACKDNSFILTER} -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
+            iptables -t nat -A openclash_dns_redirect -p tcp --dport 53 ${ACBLACKDNSFILTER} -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
          else
-            iptables -t nat -I PREROUTING -p udp --dport 53 -m set --match-set lan_ac_white_ips src -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
-            iptables -t nat -I PREROUTING -p tcp --dport 53 -m set --match-set lan_ac_white_ips src -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
-            iptables -t nat -I PREROUTING -p udp --dport 53 -m set --match-set lan_ac_white_macs src -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
-            iptables -t nat -I PREROUTING -p tcp --dport 53 -m set --match-set lan_ac_white_macs src -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
+            iptables -t nat -A openclash_dns_redirect -p udp --dport 53 -m set --match-set lan_ac_white_ips src -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
+            iptables -t nat -A openclash_dns_redirect -p tcp --dport 53 -m set --match-set lan_ac_white_ips src -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
+            iptables -t nat -A openclash_dns_redirect -p udp --dport 53 -m set --match-set lan_ac_white_macs src -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
+            iptables -t nat -A openclash_dns_redirect -p tcp --dport 53 -m set --match-set lan_ac_white_macs src -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
          fi
-      fi
-   elif [ "$enable_redirect_dns" -eq 2 ]; then
-      iptables -t nat -N openclash_dns_redirect
-      iptables -t nat -F openclash_dns_redirect
-      if [ "$lan_ac_mode" != "1" ]; then
-         ACBLACKDNSFILTER=""
-         if [ "$lan_ac_mode" = "0" ]; then
-            if [ -n "$(uci -q get openclash.config.lan_ac_black_ips)" ]; then
-               ACBLACKDNSFILTER="-m set ! --match-set lan_ac_black_ips src"
-            fi
-            if [ -n "$(uci -q get openclash.config.lan_ac_black_macs)" ]; then
-               ACBLACKDNSFILTER="$ACBLACKDNSFILTER -m set ! --match-set lan_ac_black_macs src"
-            fi
+         iptables -t nat -I PREROUTING -p udp --dport 53 -j openclash_dns_redirect
+         iptables -t nat -I PREROUTING -p tcp --dport 53 -j openclash_dns_redirect
+         if [ "$router_self_proxy" = 1 ]; then
+            iptables -t nat -I OUTPUT -p udp --dport 53 -d 127.0.0.1 -m owner ! --uid-owner 65534 -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
+            iptables -t nat -I OUTPUT -p tcp --dport 53 -d 127.0.0.1 -m owner ! --uid-owner 65534 -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
          fi
-         iptables -t nat -A openclash_dns_redirect -p udp --dport 53 ${ACBLACKDNSFILTER} -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
-         iptables -t nat -A openclash_dns_redirect -p tcp --dport 53 ${ACBLACKDNSFILTER} -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
-      else
-         iptables -t nat -A openclash_dns_redirect -p udp --dport 53 -m set --match-set lan_ac_white_ips src -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
-         iptables -t nat -A openclash_dns_redirect -p tcp --dport 53 -m set --match-set lan_ac_white_ips src -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
-         iptables -t nat -A openclash_dns_redirect -p udp --dport 53 -m set --match-set lan_ac_white_macs src -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
-         iptables -t nat -A openclash_dns_redirect -p tcp --dport 53 -m set --match-set lan_ac_white_macs src -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
-      fi
-      iptables -t nat -I PREROUTING -p udp --dport 53 -j openclash_dns_redirect
-      iptables -t nat -I PREROUTING -p tcp --dport 53 -j openclash_dns_redirect
-      if [ "$router_self_proxy" = 1 ]; then
-         iptables -t nat -I OUTPUT -p udp --dport 53 -d 127.0.0.1 -m owner ! --uid-owner 65534 -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
-         iptables -t nat -I OUTPUT -p tcp --dport 53 -d 127.0.0.1 -m owner ! --uid-owner 65534 -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
-      fi
-   fi
-
-   if [ "$en_mode" = "fake-ip" ] && [ "$china_ip_route" != "0" ] && [ "$enable_redirect_dns" != "2" ]; then
-      LOG_OUT "Tip: Bypass Specified Regions IP May Cause the Dnsmasq Load For a Long Time After Restart in FAKE-IP Mode, Hijack the DNS to Core Untill the Dnsmasq Works Well..."
-      iptables -t nat -I PREROUTING -p udp --dport 53 -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
-      iptables -t nat -I PREROUTING -p tcp --dport 53 -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
-      iptables -t nat -I OUTPUT -p udp --dport 53 -m owner ! --uid-owner 65534 -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
-      iptables -t nat -I OUTPUT -p tcp --dport 53 -m owner ! --uid-owner 65534 -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
-      iptables -t nat -I OUTPUT -p udp --dport 12353 -m owner ! --uid-owner 65534 -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
-      iptables -t nat -I OUTPUT -p tcp --dport 12353 -m owner ! --uid-owner 65534 -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
-   fi
-
-   if [ -z "$en_mode_tun" ] || [ "$en_mode_tun" -eq 2 ]; then
-      #tcp
-      iptables -t nat -N openclash
-      iptables -t nat -F openclash
-      iptables -t nat -A openclash -m set --match-set localnetwork dst -j RETURN
-      if [ -z "$en_mode_tun" ] && [ "$en_mode" = "fake-ip" ]; then
-         iptables -t nat -A openclash -p tcp -d "$fakeip_range" -j REDIRECT --to-ports "$proxy_port"
-      fi
-      iptables -t nat -A openclash -m set --match-set localnetwork src -m set --match-set lan_ac_black_ports src -j RETURN >/dev/null 2>&1
-      iptables -t nat -A openclash -m set --match-set wan_ac_black_ips dst -j RETURN >/dev/null 2>&1
-      iptables -t nat -A openclash -m set --match-set lan_ac_black_ips src -j RETURN >/dev/null 2>&1
-      iptables -t nat -A openclash -m set --match-set lan_ac_black_macs src -j RETURN >/dev/null 2>&1
-      if [ "$lan_ac_mode" = "1" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_ips)" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_macs)" ]; then
-         iptables -t nat -A openclash -m set ! --match-set lan_ac_white_ips src -m set ! --match-set lan_ac_white_macs src -j RETURN >/dev/null 2>&1
-      else
-         iptables -t nat -A openclash -m set ! --match-set lan_ac_white_ips src -j RETURN >/dev/null 2>&1
-         iptables -t nat -A openclash -m set ! --match-set lan_ac_white_macs src -j RETURN >/dev/null 2>&1
       fi
-      if [ "$en_mode" = "redir-host" ]; then
-         iptables -t nat -A openclash -m set ! --match-set common_ports dst -j RETURN >/dev/null 2>&1
+
+      if [ "$en_mode" = "fake-ip" ] && [ "$china_ip_route" != "0" ] && [ "$enable_redirect_dns" != "2" ]; then
+         LOG_OUT "Tip: Bypass Specified Regions IP May Cause the Dnsmasq Load For a Long Time After Restart in FAKE-IP Mode, Hijack the DNS to Core Untill the Dnsmasq Works Well..."
+         iptables -t nat -I PREROUTING -p udp --dport 53 -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
+         iptables -t nat -I PREROUTING -p tcp --dport 53 -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
+         iptables -t nat -I OUTPUT -p udp --dport 53 -m owner ! --uid-owner 65534 -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
+         iptables -t nat -I OUTPUT -p tcp --dport 53 -m owner ! --uid-owner 65534 -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
+         iptables -t nat -I OUTPUT -p udp --dport 12353 -m owner ! --uid-owner 65534 -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
+         iptables -t nat -I OUTPUT -p tcp --dport 12353 -m owner ! --uid-owner 65534 -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
       fi
-      if [ "$china_ip_route" != "0" ]; then
-         if [ "$china_ip_route" = "1" ]; then
-            rule="-m set --match-set china_ip_route dst"
-         elif [ "$china_ip_route" = "2" ]; then
-            rule="-m set ! --match-set china_ip_route dst"
+
+      if [ -z "$en_mode_tun" ] || [ "$en_mode_tun" -eq 2 ]; then
+         #tcp
+         iptables -t nat -N openclash
+         iptables -t nat -F openclash
+         iptables -t nat -A openclash -m set --match-set localnetwork dst -j RETURN
+         if [ -z "$en_mode_tun" ] && [ "$en_mode" = "fake-ip" ]; then
+            iptables -t nat -A openclash -p tcp -d "$fakeip_range" -j REDIRECT --to-ports "$proxy_port"
+         fi
+         iptables -t nat -A openclash -m set --match-set localnetwork src -m set --match-set lan_ac_black_ports src -j RETURN >/dev/null 2>&1
+         iptables -t nat -A openclash -m set --match-set wan_ac_black_ips dst -j RETURN >/dev/null 2>&1
+         iptables -t nat -A openclash -m set --match-set lan_ac_black_ips src -j RETURN >/dev/null 2>&1
+         iptables -t nat -A openclash -m set --match-set lan_ac_black_macs src -j RETURN >/dev/null 2>&1
+         if [ "$lan_ac_mode" = "1" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_ips)" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_macs)" ]; then
+            iptables -t nat -A openclash -m set ! --match-set lan_ac_white_ips src -m set ! --match-set lan_ac_white_macs src -j RETURN >/dev/null 2>&1
+         else
+            iptables -t nat -A openclash -m set ! --match-set lan_ac_white_ips src -j RETURN >/dev/null 2>&1
+            iptables -t nat -A openclash -m set ! --match-set lan_ac_white_macs src -j RETURN >/dev/null 2>&1
          fi
-         [ "$enable_redirect_dns" != "2" ] && rule="$rule -m set ! --match-set china_ip_route_pass dst"
-         iptables -t nat -A openclash $rule -j RETURN >/dev/null 2>&1
-      fi
-      iptables -t nat -A openclash -p tcp -j REDIRECT --to-ports "$proxy_port"
-      iptables -t nat -A PREROUTING -p tcp -j openclash
+         if [ "$en_mode" = "redir-host" ]; then
+            iptables -t nat -A openclash -m set ! --match-set common_ports dst -j RETURN >/dev/null 2>&1
+         fi
+         if [ "$china_ip_route" != "0" ]; then
+            if [ "$china_ip_route" = "1" ]; then
+               rule="-m set --match-set china_ip_route dst"
+            elif [ "$china_ip_route" = "2" ]; then
+               rule="-m set ! --match-set china_ip_route dst"
+            fi
+            [ "$enable_redirect_dns" != "2" ] && rule="$rule -m set ! --match-set china_ip_route_pass dst"
+            iptables -t nat -A openclash $rule -j RETURN >/dev/null 2>&1
+         fi
+         iptables -t nat -A openclash -p tcp -j REDIRECT --to-ports "$proxy_port"
+         iptables -t nat -A PREROUTING -p tcp -j openclash
 
-      if [ -z "$en_mode_tun" ]; then
-         #Google dns
-         iptables -t nat -I PREROUTING -m comment --comment "OpenClash Google DNS Hijack" -p tcp -d 8.8.8.8 --dport 53 -j REDIRECT --to-ports "$proxy_port"
-         iptables -t nat -I PREROUTING -m comment --comment "OpenClash Google DNS Hijack" -p tcp -d 8.8.4.4 --dport 53 -j REDIRECT --to-ports "$proxy_port"
-         #udp
-         if [ "$enable_udp_proxy" -eq 1 ]; then
-            modprobe xt_TPROXY >/dev/null 2>&1
-            ip rule add fwmark "$PROXY_FWMARK" table "$PROXY_ROUTE_TABLE"
-            ip route add local 0.0.0.0/0 dev lo table "$PROXY_ROUTE_TABLE"
-            iptables -t mangle -N openclash
-            iptables -t mangle -F openclash
-            iptables -t mangle -N openclash_upnp
-            iptables -t mangle -F openclash_upnp
-            upnp_exclude
-            #prevent tproxy loop
-            iptables -t mangle -A openclash -i lo -j RETURN
-            iptables -t mangle -A openclash -m set --match-set localnetwork dst -j RETURN
-            iptables -t mangle -A openclash -p udp --dport 53 -j RETURN >/dev/null 2>&1
-            if [ "$en_mode" = "fake-ip" ]; then
+         if [ -z "$en_mode_tun" ]; then
+            #Google dns
+            iptables -t nat -I PREROUTING -m comment --comment "OpenClash Google DNS Hijack" -p tcp -d 8.8.8.8 --dport 53 -j REDIRECT --to-ports "$proxy_port"
+            iptables -t nat -I PREROUTING -m comment --comment "OpenClash Google DNS Hijack" -p tcp -d 8.8.4.4 --dport 53 -j REDIRECT --to-ports "$proxy_port"
+            #udp
+            if [ "$enable_udp_proxy" -eq 1 ]; then
+               modprobe xt_TPROXY >/dev/null 2>&1
+               ip rule add fwmark "$PROXY_FWMARK" table "$PROXY_ROUTE_TABLE"
+               ip route add local 0.0.0.0/0 dev lo table "$PROXY_ROUTE_TABLE"
+               iptables -t mangle -N openclash
+               iptables -t mangle -F openclash
+               iptables -t mangle -N openclash_upnp
+               iptables -t mangle -F openclash_upnp
+               upnp_exclude
+               #prevent tproxy loop
+               iptables -t mangle -A openclash -i lo -j RETURN
+               iptables -t mangle -A openclash -m set --match-set localnetwork dst -j RETURN
+               iptables -t mangle -A openclash -p udp --dport 53 -j RETURN >/dev/null 2>&1
+               if [ "$en_mode" = "fake-ip" ]; then
+                  iptables -t mangle -A openclash -p udp -d "$fakeip_range" -j TPROXY --on-port "$tproxy_port" --tproxy-mark "$PROXY_FWMARK"
+               fi
+               iptables -t mangle -A openclash -m set --match-set localnetwork src -m set --match-set lan_ac_black_ports src -j RETURN >/dev/null 2>&1
+               iptables -t mangle -A openclash -m set --match-set wan_ac_black_ips dst -j RETURN >/dev/null 2>&1
+               iptables -t mangle -A openclash -m set --match-set lan_ac_black_macs src -j RETURN >/dev/null 2>&1
+               iptables -t mangle -A openclash -m set --match-set lan_ac_black_ips src -j RETURN >/dev/null 2>&1
+               if [ "$lan_ac_mode" = "1" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_ips)" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_macs)" ]; then
+                  iptables -t mangle -A openclash -m set ! --match-set lan_ac_white_ips src -m set ! --match-set lan_ac_white_macs src -j RETURN >/dev/null 2>&1
+               else
+                  iptables -t mangle -A openclash -m set ! --match-set lan_ac_white_ips src -j RETURN >/dev/null 2>&1
+                  iptables -t mangle -A openclash -m set ! --match-set lan_ac_white_macs src -j RETURN >/dev/null 2>&1
+               fi
+               if [ "$en_mode" = "redir-host" ]; then
+                  iptables -t mangle -A openclash -m set ! --match-set common_ports dst -j RETURN >/dev/null 2>&1
+               fi
+               if [ "$china_ip_route" != "0" ]; then
+                  if [ "$china_ip_route" = "1" ]; then
+                     rule="-m set --match-set china_ip_route dst"
+                  elif [ "$china_ip_route" = "2" ]; then
+                     rule="-m set ! --match-set china_ip_route dst"
+                  fi
+                  [ "$enable_redirect_dns" != "2" ] && rule="$rule -m set ! --match-set china_ip_route_pass dst"
+                  iptables -t mangle -A openclash $rule -j RETURN >/dev/null 2>&1
+               fi
+               iptables -t mangle -A openclash -p udp -j openclash_upnp >/dev/null 2>&1
+               iptables -t mangle -A openclash -p udp -j TPROXY --on-port "$tproxy_port" --tproxy-mark "$PROXY_FWMARK"
+               iptables -t mangle -A PREROUTING -p udp -j openclash
+
+            elif [ "$en_mode" = "fake-ip" ]; then
+               modprobe xt_TPROXY >/dev/null 2>&1
+               ip rule add fwmark "$PROXY_FWMARK" table "$PROXY_ROUTE_TABLE"
+               ip route add local 0.0.0.0/0 dev lo table "$PROXY_ROUTE_TABLE"
+               iptables -t mangle -N openclash
+               iptables -t mangle -F openclash
+               #prevent tproxy loop
+               iptables -t mangle -A openclash -i lo -j RETURN
                iptables -t mangle -A openclash -p udp -d "$fakeip_range" -j TPROXY --on-port "$tproxy_port" --tproxy-mark "$PROXY_FWMARK"
+               iptables -t mangle -A PREROUTING -p udp -j openclash
             fi
-            iptables -t mangle -A openclash -m set --match-set localnetwork src -m set --match-set lan_ac_black_ports src -j RETURN >/dev/null 2>&1
-            iptables -t mangle -A openclash -m set --match-set wan_ac_black_ips dst -j RETURN >/dev/null 2>&1
-            iptables -t mangle -A openclash -m set --match-set lan_ac_black_macs src -j RETURN >/dev/null 2>&1
-            iptables -t mangle -A openclash -m set --match-set lan_ac_black_ips src -j RETURN >/dev/null 2>&1
-            if [ "$lan_ac_mode" = "1" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_ips)" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_macs)" ]; then
-               iptables -t mangle -A openclash -m set ! --match-set lan_ac_white_ips src -m set ! --match-set lan_ac_white_macs src -j RETURN >/dev/null 2>&1
-            else
-               iptables -t mangle -A openclash -m set ! --match-set lan_ac_white_ips src -j RETURN >/dev/null 2>&1
-               iptables -t mangle -A openclash -m set ! --match-set lan_ac_white_macs src -j RETURN >/dev/null 2>&1
-            fi
-            if [ "$en_mode" = "redir-host" ]; then
-               iptables -t mangle -A openclash -m set ! --match-set common_ports dst -j RETURN >/dev/null 2>&1
-            fi
-            if [ "$china_ip_route" != "0" ]; then
-               if [ "$china_ip_route" = "1" ]; then
-                  rule="-m set --match-set china_ip_route dst"
-               elif [ "$china_ip_route" = "2" ]; then
-                  rule="-m set ! --match-set china_ip_route dst"
-               fi
-               [ "$enable_redirect_dns" != "2" ] && rule="$rule -m set ! --match-set china_ip_route_pass dst"
-               iptables -t mangle -A openclash $rule -j RETURN >/dev/null 2>&1
-            fi
-            iptables -t mangle -A openclash -p udp -j openclash_upnp >/dev/null 2>&1
-            iptables -t mangle -A openclash -p udp -j TPROXY --on-port "$tproxy_port" --tproxy-mark "$PROXY_FWMARK"
-            iptables -t mangle -A PREROUTING -p udp -j openclash
-
-         elif [ "$en_mode" = "fake-ip" ]; then
-            modprobe xt_TPROXY >/dev/null 2>&1
-            ip rule add fwmark "$PROXY_FWMARK" table "$PROXY_ROUTE_TABLE"
-            ip route add local 0.0.0.0/0 dev lo table "$PROXY_ROUTE_TABLE"
-            iptables -t mangle -N openclash
-            iptables -t mangle -F openclash
-            #prevent tproxy loop
-            iptables -t mangle -A openclash -i lo -j RETURN
-            iptables -t mangle -A openclash -p udp -d "$fakeip_range" -j TPROXY --on-port "$tproxy_port" --tproxy-mark "$PROXY_FWMARK"
-            iptables -t mangle -A PREROUTING -p udp -j openclash
-         fi
 
-         if [ "$router_self_proxy" = "1" ] || ([ "$enable_redirect_dns" != "2" ] && [ "$en_mode" = "fake-ip" ]); then
-            iptables -t mangle -N openclash_output
-            iptables -t mangle -F openclash_output
-            iptables -t mangle -A openclash_output -m owner ! --uid-owner 65534 -p udp -d "$fakeip_range" -j MARK --set-mark "$PROXY_FWMARK"
-            iptables -t mangle -A OUTPUT -p udp -j openclash_output
-         fi
+            if [ "$router_self_proxy" = "1" ] || ([ "$enable_redirect_dns" != "2" ] && [ "$en_mode" = "fake-ip" ]); then
+               iptables -t mangle -N openclash_output
+               iptables -t mangle -F openclash_output
+               iptables -t mangle -A openclash_output -m owner ! --uid-owner 65534 -p udp -d "$fakeip_range" -j MARK --set-mark "$PROXY_FWMARK"
+               iptables -t mangle -A OUTPUT -p udp -j openclash_output
+            fi
 
-         #quic
-         if [ "$disable_udp_quic" -eq 1 ]; then
-            if [ "$china_ip_route" = "2" ]; then
-               iptables -I INPUT -p udp --dport 443 -m comment --comment "OpenClash QUIC REJECT" -m set --match-set china_ip_route dst -j REJECT >/dev/null 2>&1
-            else
-               iptables -I INPUT -p udp --dport 443 -m comment --comment "OpenClash QUIC REJECT" -m set ! --match-set china_ip_route dst -j REJECT >/dev/null 2>&1
+            #quic
+            if [ "$disable_udp_quic" -eq 1 ]; then
+               if [ "$china_ip_route" = "2" ]; then
+                  iptables -I INPUT -p udp --dport 443 -m comment --comment "OpenClash QUIC REJECT" -m set --match-set china_ip_route dst -j REJECT >/dev/null 2>&1
+               else
+                  iptables -I INPUT -p udp --dport 443 -m comment --comment "OpenClash QUIC REJECT" -m set ! --match-set china_ip_route dst -j REJECT >/dev/null 2>&1
+               fi
             fi
          fi
-      fi
 
-      if [ "$router_self_proxy" = "1" ] || ([ "$enable_redirect_dns" != "2" ] && [ "$en_mode" = "fake-ip" ]); then
-         iptables -t nat -N openclash_output
-         iptables -t nat -F openclash_output
-         if [ "$en_mode" = "fake-ip" ] && [ "$en_mode_tun" != "1" ]; then
-            iptables -t nat -A openclash_output -m owner ! --uid-owner 65534 -p tcp -d "$fakeip_range" -j REDIRECT --to-ports "$proxy_port"
-         fi
-         if [ "$router_self_proxy" = "1" ]; then
-            iptables -t nat -A openclash_output -m set --match-set localnetwork dst -j RETURN
-            iptables -t nat -A openclash_output -m set --match-set localnetwork src -m set --match-set lan_ac_black_ports src -j RETURN >/dev/null 2>&1
-            iptables -t nat -A openclash_output -m owner ! --uid-owner 65534 -m set --match-set wan_ac_black_ips dst -j RETURN >/dev/null 2>&1
-            if [ "$en_mode" = "redir-host" ]; then
-               iptables -t nat -A openclash_output -m owner ! --uid-owner 65534 -m set ! --match-set common_ports dst -j RETURN >/dev/null 2>&1
+         if [ "$router_self_proxy" = "1" ] || ([ "$enable_redirect_dns" != "2" ] && [ "$en_mode" = "fake-ip" ]); then
+            iptables -t nat -N openclash_output
+            iptables -t nat -F openclash_output
+            if [ "$en_mode" = "fake-ip" ] && [ "$en_mode_tun" != "1" ]; then
+               iptables -t nat -A openclash_output -m owner ! --uid-owner 65534 -p tcp -d "$fakeip_range" -j REDIRECT --to-ports "$proxy_port"
             fi
-            if [ "$china_ip_route" != "0" ]; then
-               if [ "$china_ip_route" = "1" ]; then
-                  rule="-m set --match-set china_ip_route dst"
-               elif [ "$china_ip_route" = "2" ]; then
-                  rule="-m set ! --match-set china_ip_route dst"
+            if [ "$router_self_proxy" = "1" ]; then
+               iptables -t nat -A openclash_output -m set --match-set localnetwork dst -j RETURN
+               iptables -t nat -A openclash_output -m set --match-set localnetwork src -m set --match-set lan_ac_black_ports src -j RETURN >/dev/null 2>&1
+               iptables -t nat -A openclash_output -m owner ! --uid-owner 65534 -m set --match-set wan_ac_black_ips dst -j RETURN >/dev/null 2>&1
+               if [ "$en_mode" = "redir-host" ]; then
+                  iptables -t nat -A openclash_output -m owner ! --uid-owner 65534 -m set ! --match-set common_ports dst -j RETURN >/dev/null 2>&1
                fi
-               [ "$enable_redirect_dns" != "2" ] && rule="$rule -m set ! --match-set china_ip_route_pass dst"
-               iptables -t nat -A openclash_output -m owner ! --uid-owner 65534 $rule -j RETURN >/dev/null 2>&1
+               if [ "$china_ip_route" != "0" ]; then
+                  if [ "$china_ip_route" = "1" ]; then
+                     rule="-m set --match-set china_ip_route dst"
+                  elif [ "$china_ip_route" = "2" ]; then
+                     rule="-m set ! --match-set china_ip_route dst"
+                  fi
+                  [ "$enable_redirect_dns" != "2" ] && rule="$rule -m set ! --match-set china_ip_route_pass dst"
+                  iptables -t nat -A openclash_output -m owner ! --uid-owner 65534 $rule -j RETURN >/dev/null 2>&1
+               fi
+               iptables -t nat -A openclash_output -m owner ! --uid-owner 65534 -p tcp -j REDIRECT --to-ports "$proxy_port"
             fi
-            iptables -t nat -A openclash_output -m owner ! --uid-owner 65534 -p tcp -j REDIRECT --to-ports "$proxy_port"
+            iptables -t nat -A OUTPUT -j openclash_output >/dev/null 2>&1
          fi
-         iptables -t nat -A OUTPUT -j openclash_output >/dev/null 2>&1
       fi
-   fi
 
-   if [ -n "$en_mode_tun" ]; then
-      #TUN模式
-      #启动TUN
-      set_tun_tap
-      #设置防火墙
-      if [ "$router_self_proxy" = "1" ] || ([ "$enable_redirect_dns" != "2" ] && [ "$en_mode" = "fake-ip" ]); then
-         if [ "$en_mode" = "fake-ip" ]; then
-            iptables -t mangle -N openclash_output
-            iptables -t mangle -F openclash_output
-            iptables -t mangle -A openclash_output -m set --match-set localnetwork dst -j RETURN
-            iptables -t mangle -A openclash_output -m set --match-set localnetwork src -m set --match-set lan_ac_black_ports src -j RETURN >/dev/null 2>&1
-            if [ "$en_mode_tun" -eq 1 ]; then
-               iptables -t mangle -A openclash_output -m owner ! --uid-owner 65534 -d "$fakeip_range" -j MARK --set-mark "$PROXY_FWMARK"
-               if [ "$router_self_proxy" = "1" ]; then
-                  iptables -t mangle -A openclash_output -m owner ! --uid-owner 65534 -m set --match-set wan_ac_black_ips dst -j RETURN >/dev/null 2>&1
-                  if [ "$china_ip_route" != "0" ]; then
-                     if [ "$china_ip_route" = "1" ]; then
-                        rule="-m set --match-set china_ip_route dst"
-                     elif [ "$china_ip_route" = "2" ]; then
-                        rule="-m set ! --match-set china_ip_route dst"
+      if [ -n "$en_mode_tun" ]; then
+         #TUN模式
+         #启动TUN
+         set_tun_tap
+         #设置防火墙
+         if [ "$router_self_proxy" = "1" ] || ([ "$enable_redirect_dns" != "2" ] && [ "$en_mode" = "fake-ip" ]); then
+            if [ "$en_mode" = "fake-ip" ]; then
+               iptables -t mangle -N openclash_output
+               iptables -t mangle -F openclash_output
+               iptables -t mangle -A openclash_output -m set --match-set localnetwork dst -j RETURN
+               iptables -t mangle -A openclash_output -m set --match-set localnetwork src -m set --match-set lan_ac_black_ports src -j RETURN >/dev/null 2>&1
+               if [ "$en_mode_tun" -eq 1 ]; then
+                  iptables -t mangle -A openclash_output -m owner ! --uid-owner 65534 -d "$fakeip_range" -j MARK --set-mark "$PROXY_FWMARK"
+                  if [ "$router_self_proxy" = "1" ]; then
+                     iptables -t mangle -A openclash_output -m owner ! --uid-owner 65534 -m set --match-set wan_ac_black_ips dst -j RETURN >/dev/null 2>&1
+                     if [ "$china_ip_route" != "0" ]; then
+                        if [ "$china_ip_route" = "1" ]; then
+                           rule="-m set --match-set china_ip_route dst"
+                        elif [ "$china_ip_route" = "2" ]; then
+                           rule="-m set ! --match-set china_ip_route dst"
+                        fi
+                        [ "$enable_redirect_dns" != "2" ] && rule="$rule -m set ! --match-set china_ip_route_pass dst"
+                        iptables -t mangle -A openclash_output -m owner ! --uid-owner 65534 $rule -j RETURN >/dev/null 2>&1
                      fi
-                     [ "$enable_redirect_dns" != "2" ] && rule="$rule -m set ! --match-set china_ip_route_pass dst"
-                     iptables -t mangle -A openclash_output -m owner ! --uid-owner 65534 $rule -j RETURN >/dev/null 2>&1
+                     iptables -t mangle -A openclash_output -m owner ! --uid-owner 65534 -p tcp -j MARK --set-mark "$PROXY_FWMARK"
                   fi
-                  iptables -t mangle -A openclash_output -m owner ! --uid-owner 65534 -p tcp -j MARK --set-mark "$PROXY_FWMARK"
+               else
+                  iptables -t mangle -A openclash_output -m owner ! --uid-owner 65534 -p udp -d "$fakeip_range" -j MARK --set-mark "$PROXY_FWMARK"
                fi
-            else
-               iptables -t mangle -A openclash_output -m owner ! --uid-owner 65534 -p udp -d "$fakeip_range" -j MARK --set-mark "$PROXY_FWMARK"
-            fi
-            iptables -t mangle -A OUTPUT -j openclash_output
-         elif [ "$en_mode" = "redir-host" ] && [ "$en_mode_tun" -eq 1 ]; then
-            iptables -t mangle -N openclash_output
-            iptables -t mangle -F openclash_output
-            iptables -t mangle -A openclash_output -m set --match-set localnetwork dst -j RETURN
-            iptables -t mangle -A openclash_output -m set --match-set localnetwork src -m set --match-set lan_ac_black_ports src -j RETURN >/dev/null 2>&1
-            iptables -t mangle -A openclash_output -m owner ! --uid-owner 65534 -m set --match-set wan_ac_black_ips dst -j RETURN >/dev/null 2>&1
-            iptables -t mangle -A openclash_output -m owner ! --uid-owner 65534 -m set ! --match-set common_ports dst -j RETURN >/dev/null 2>&1
-            if [ "$china_ip_route" != "0" ]; then
-               if [ "$china_ip_route" = "1" ]; then
-                  rule="-m set --match-set china_ip_route dst"
-               elif [ "$china_ip_route" = "2" ]; then
-                  rule="-m set ! --match-set china_ip_route dst"
+               iptables -t mangle -A OUTPUT -j openclash_output
+            elif [ "$en_mode" = "redir-host" ] && [ "$en_mode_tun" -eq 1 ]; then
+               iptables -t mangle -N openclash_output
+               iptables -t mangle -F openclash_output
+               iptables -t mangle -A openclash_output -m set --match-set localnetwork dst -j RETURN
+               iptables -t mangle -A openclash_output -m set --match-set localnetwork src -m set --match-set lan_ac_black_ports src -j RETURN >/dev/null 2>&1
+               iptables -t mangle -A openclash_output -m owner ! --uid-owner 65534 -m set --match-set wan_ac_black_ips dst -j RETURN >/dev/null 2>&1
+               iptables -t mangle -A openclash_output -m owner ! --uid-owner 65534 -m set ! --match-set common_ports dst -j RETURN >/dev/null 2>&1
+               if [ "$china_ip_route" != "0" ]; then
+                  if [ "$china_ip_route" = "1" ]; then
+                     rule="-m set --match-set china_ip_route dst"
+                  elif [ "$china_ip_route" = "2" ]; then
+                     rule="-m set ! --match-set china_ip_route dst"
+                  fi
+                  [ "$enable_redirect_dns" != "2" ] && rule="$rule -m set ! --match-set china_ip_route_pass dst"
+                  iptables -t mangle -A openclash_output -m owner ! --uid-owner 65534 $rule -j RETURN >/dev/null 2>&1
                fi
-               [ "$enable_redirect_dns" != "2" ] && rule="$rule -m set ! --match-set china_ip_route_pass dst"
-               iptables -t mangle -A openclash_output -m owner ! --uid-owner 65534 $rule -j RETURN >/dev/null 2>&1
-            fi
-            iptables -t mangle -A openclash_output -m owner ! --uid-owner 65534 -p tcp -j MARK --set-mark "$PROXY_FWMARK"
-            iptables -t mangle -A OUTPUT -j openclash_output
-         fi
-      fi
-
-      iptables -t mangle -N openclash
-      iptables -t mangle -F openclash
-      iptables -t mangle -N openclash_dns_hijack
-      iptables -t mangle -F openclash_dns_hijack
-      iptables -t mangle -N openclash_upnp
-      iptables -t mangle -F openclash_upnp
-      upnp_exclude
-      #其他流量
-      iptables -t mangle -A openclash -i utun -j RETURN
-      iptables -t mangle -A openclash -m set --match-set localnetwork dst -j RETURN
-      iptables -t mangle -A openclash -m set --match-set localnetwork src -m set --match-set lan_ac_black_ports src -j RETURN >/dev/null 2>&1
-      iptables -t mangle -A openclash -m set --match-set wan_ac_black_ips dst -j RETURN >/dev/null 2>&1
-      iptables -t mangle -A openclash -m set --match-set lan_ac_black_ips src -j RETURN >/dev/null 2>&1
-      iptables -t mangle -A openclash -m set --match-set lan_ac_black_macs src -j RETURN >/dev/null 2>&1
-      if [ "$lan_ac_mode" = "1" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_ips)" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_macs)" ]; then
-         iptables -t mangle -A openclash -m set ! --match-set lan_ac_white_ips src -m set ! --match-set lan_ac_white_macs src -j RETURN >/dev/null 2>&1
-      else
-         iptables -t mangle -A openclash -m set ! --match-set lan_ac_white_ips src -j RETURN >/dev/null 2>&1
-         iptables -t mangle -A openclash -m set ! --match-set lan_ac_white_macs src -j RETURN >/dev/null 2>&1
-      fi
+               iptables -t mangle -A openclash_output -m owner ! --uid-owner 65534 -p tcp -j MARK --set-mark "$PROXY_FWMARK"
+               iptables -t mangle -A OUTPUT -j openclash_output
+            fi
+         fi
 
-      if [ "$en_mode" = "redir-host" ]; then
-         iptables -t mangle -A openclash -m set ! --match-set common_ports dst -j RETURN >/dev/null 2>&1
-      fi
-      if [ "$china_ip_route" != "0" ]; then
-         if [ "$china_ip_route" = "1" ]; then
-            rule="-m set --match-set china_ip_route dst"
-         elif [ "$china_ip_route" = "2" ]; then
-            rule="-m set ! --match-set china_ip_route dst"
+         iptables -t mangle -N openclash
+         iptables -t mangle -F openclash
+         iptables -t mangle -N openclash_dns_hijack
+         iptables -t mangle -F openclash_dns_hijack
+         iptables -t mangle -N openclash_upnp
+         iptables -t mangle -F openclash_upnp
+         upnp_exclude
+         #其他流量
+         iptables -t mangle -A openclash -i utun -j RETURN
+         iptables -t mangle -A openclash -m set --match-set localnetwork dst -j RETURN
+         iptables -t mangle -A openclash -m set --match-set localnetwork src -m set --match-set lan_ac_black_ports src -j RETURN >/dev/null 2>&1
+         iptables -t mangle -A openclash -m set --match-set wan_ac_black_ips dst -j RETURN >/dev/null 2>&1
+         iptables -t mangle -A openclash -m set --match-set lan_ac_black_ips src -j RETURN >/dev/null 2>&1
+         iptables -t mangle -A openclash -m set --match-set lan_ac_black_macs src -j RETURN >/dev/null 2>&1
+         if [ "$lan_ac_mode" = "1" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_ips)" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_macs)" ]; then
+            iptables -t mangle -A openclash -m set ! --match-set lan_ac_white_ips src -m set ! --match-set lan_ac_white_macs src -j RETURN >/dev/null 2>&1
+         else
+            iptables -t mangle -A openclash -m set ! --match-set lan_ac_white_ips src -j RETURN >/dev/null 2>&1
+            iptables -t mangle -A openclash -m set ! --match-set lan_ac_white_macs src -j RETURN >/dev/null 2>&1
          fi
-         [ "$enable_redirect_dns" != "2" ] && rule="$rule -m set ! --match-set china_ip_route_pass dst"
-         iptables -t mangle -A openclash $rule -j RETURN >/dev/null 2>&1
-      fi
 
-      iptables -t mangle -A openclash -p udp -j openclash_upnp >/dev/null 2>&1
+         if [ "$en_mode" = "redir-host" ]; then
+            iptables -t mangle -A openclash -m set ! --match-set common_ports dst -j RETURN >/dev/null 2>&1
+         fi
+         if [ "$china_ip_route" != "0" ]; then
+            if [ "$china_ip_route" = "1" ]; then
+               rule="-m set --match-set china_ip_route dst"
+            elif [ "$china_ip_route" = "2" ]; then
+               rule="-m set ! --match-set china_ip_route dst"
+            fi
+            [ "$enable_redirect_dns" != "2" ] && rule="$rule -m set ! --match-set china_ip_route_pass dst"
+            iptables -t mangle -A openclash $rule -j RETURN >/dev/null 2>&1
+         fi
 
-      iptables -t mangle -A openclash -j MARK --set-mark "$PROXY_FWMARK"
+         iptables -t mangle -A openclash -p udp -j openclash_upnp >/dev/null 2>&1
 
-      if [ "$en_mode_tun" -eq 1 ]; then
-         iptables -t mangle -I PREROUTING -j openclash
-      else
-         if [ "$enable_redirect_dns" -eq 1 ]; then
-            iptables -t mangle -I PREROUTING -p tcp --dport 53 -j openclash_dns_hijack
-            iptables -t mangle -A openclash_dns_hijack -m set --match-set lan_ac_black_ips src -j RETURN >/dev/null 2>&1
-            iptables -t mangle -A openclash_dns_hijack -m set --match-set lan_ac_black_macs src -j RETURN >/dev/null 2>&1
-            if [ "$lan_ac_mode" = "1" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_ips)" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_macs)" ]; then
-               iptables -t mangle -A openclash_dns_hijack -m set ! --match-set lan_ac_white_ips src -m set ! --match-set lan_ac_white_macs src -j RETURN >/dev/null 2>&1
-            else
-               iptables -t mangle -A openclash_dns_hijack -m set ! --match-set lan_ac_white_ips src -j RETURN >/dev/null 2>&1
-               iptables -t mangle -A openclash_dns_hijack -m set ! --match-set lan_ac_white_macs src -j RETURN >/dev/null 2>&1
+         iptables -t mangle -A openclash -j MARK --set-mark "$PROXY_FWMARK"
+
+         if [ "$en_mode_tun" -eq 1 ]; then
+            iptables -t mangle -I PREROUTING -j openclash
+         else
+            if [ "$enable_redirect_dns" -eq 1 ]; then
+               iptables -t mangle -I PREROUTING -p tcp --dport 53 -j openclash_dns_hijack
+               iptables -t mangle -A openclash_dns_hijack -m set --match-set lan_ac_black_ips src -j RETURN >/dev/null 2>&1
+               iptables -t mangle -A openclash_dns_hijack -m set --match-set lan_ac_black_macs src -j RETURN >/dev/null 2>&1
+               if [ "$lan_ac_mode" = "1" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_ips)" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_macs)" ]; then
+                  iptables -t mangle -A openclash_dns_hijack -m set ! --match-set lan_ac_white_ips src -m set ! --match-set lan_ac_white_macs src -j RETURN >/dev/null 2>&1
+               else
+                  iptables -t mangle -A openclash_dns_hijack -m set ! --match-set lan_ac_white_ips src -j RETURN >/dev/null 2>&1
+                  iptables -t mangle -A openclash_dns_hijack -m set ! --match-set lan_ac_white_macs src -j RETURN >/dev/null 2>&1
+               fi
+               iptables -t mangle -A openclash_dns_hijack -m comment --comment "OpenClash TCP DNS Hijack" -p tcp --dport 53 -j MARK --set-mark "$PROXY_FWMARK"
             fi
-            iptables -t mangle -A openclash_dns_hijack -m comment --comment "OpenClash TCP DNS Hijack" -p tcp --dport 53 -j MARK --set-mark "$PROXY_FWMARK"
+            iptables -t mangle -I PREROUTING -p udp -j openclash
          fi
-         iptables -t mangle -I PREROUTING -p udp -j openclash
-      fi
 
-      if [ "$enable_redirect_dns" -eq 2 ]; then
-         local position=$(iptables -nvL openclash_dns_redirect -t nat |grep "DNS" |grep -v "REDIRECT" |wc -l)
-         let position++
-         iptables -t nat -I openclash_dns_redirect "$position" -m comment --comment "OpenClash TCP DNS Hijack" -p tcp --dport 53 -j ACCEPT
-      elif [ "$enable_redirect_dns" -eq 1 ]; then
-         iptables -t nat -I PREROUTING -m comment --comment "OpenClash TCP DNS Hijack" -p tcp --dport 53 -j ACCEPT
-      fi
+         if [ "$enable_redirect_dns" -eq 2 ]; then
+            local position=$(iptables -nvL openclash_dns_redirect -t nat |grep "DNS" |grep -v "REDIRECT" |wc -l)
+            let position++
+            iptables -t nat -I openclash_dns_redirect "$position" -m comment --comment "OpenClash TCP DNS Hijack" -p tcp --dport 53 -j ACCEPT
+         elif [ "$enable_redirect_dns" -eq 1 ]; then
+            iptables -t nat -I PREROUTING -m comment --comment "OpenClash TCP DNS Hijack" -p tcp --dport 53 -j ACCEPT
+         fi
 
-      #TUN FORWORD
-      iptables -I FORWARD -m comment --comment "OpenClash TUN Forward" -o utun -j ACCEPT >/dev/null 2>&1
-      iptables -I FORWARD -m comment --comment "OpenClash TUN Forward" -i utun -j ACCEPT >/dev/null 2>&1
-      iptables -I INPUT -m comment --comment "OpenClash TUN Input" -i utun -j ACCEPT >/dev/null 2>&1
-      iptables -t nat -I POSTROUTING -m comment --comment "OpenClash TUN Postrouting" -o utun -j RETURN >/dev/null 2>&1
+         #TUN FORWORD
+         iptables -I FORWARD -m comment --comment "OpenClash TUN Forward" -o utun -j ACCEPT >/dev/null 2>&1
+         iptables -I FORWARD -m comment --comment "OpenClash TUN Forward" -i utun -j ACCEPT >/dev/null 2>&1
+         iptables -I INPUT -m comment --comment "OpenClash TUN Input" -i utun -j ACCEPT >/dev/null 2>&1
+         iptables -t nat -I POSTROUTING -m comment --comment "OpenClash TUN Postrouting" -o utun -j RETURN >/dev/null 2>&1
 
-      #quic
-      if [ "$disable_udp_quic" -eq 1 ]; then
-         if [ "$china_ip_route" = "2" ]; then
-            iptables -I FORWARD -p udp --dport 443 -o utun -m comment --comment "OpenClash QUIC REJECT" -m set --match-set china_ip_route dst -j REJECT >/dev/null 2>&1
-         else
-            iptables -I FORWARD -p udp --dport 443 -o utun -m comment --comment "OpenClash QUIC REJECT" -m set ! --match-set china_ip_route dst -j REJECT >/dev/null 2>&1
+         #quic
+         if [ "$disable_udp_quic" -eq 1 ]; then
+            if [ "$china_ip_route" = "2" ]; then
+               iptables -I FORWARD -p udp --dport 443 -o utun -m comment --comment "OpenClash QUIC REJECT" -m set --match-set china_ip_route dst -j REJECT >/dev/null 2>&1
+            else
+               iptables -I FORWARD -p udp --dport 443 -o utun -m comment --comment "OpenClash QUIC REJECT" -m set ! --match-set china_ip_route dst -j REJECT >/dev/null 2>&1
+            fi
          fi
       fi
-   fi
 
-   #google_dns_block
-   if [ -n "$(uci -q get openclash.config.lan_block_google_dns_ips)" ] || [ -n "$(uci -q get openclash.config.lan_block_google_dns_macs)" ]; then
-      ipset create openclash_google_dns_ips hash:net
-      ipset add openclash_google_dns_ips 8.8.8.8
-      ipset add openclash_google_dns_ips 8.8.4.4
+      #google_dns_block
+      if [ -n "$(uci -q get openclash.config.lan_block_google_dns_ips)" ] || [ -n "$(uci -q get openclash.config.lan_block_google_dns_macs)" ]; then
+         ipset create openclash_google_dns_ips hash:net
+         ipset add openclash_google_dns_ips 8.8.8.8
+         ipset add openclash_google_dns_ips 8.8.4.4
 
-      if [ -z "$en_mode_tun" ] || [ "$en_mode_tun" -eq 2 ]; then
-         iptables -t nat -I PREROUTING -m comment --comment "OpenClash Google DNS Block" -m set --match-set lan_block_google_dns_ips src -m set --match-set openclash_google_dns_ips dst -j ACCEPT >/dev/null 2>&1
-         iptables -t nat -I PREROUTING -m comment --comment "OpenClash Google DNS Block" -m set --match-set lan_block_google_dns_macs src -m set --match-set openclash_google_dns_ips dst -j ACCEPT >/dev/null 2>&1
+         if [ -z "$en_mode_tun" ] || [ "$en_mode_tun" -eq 2 ]; then
+            iptables -t nat -I PREROUTING -m comment --comment "OpenClash Google DNS Block" -m set --match-set lan_block_google_dns_ips src -m set --match-set openclash_google_dns_ips dst -j ACCEPT >/dev/null 2>&1
+            iptables -t nat -I PREROUTING -m comment --comment "OpenClash Google DNS Block" -m set --match-set lan_block_google_dns_macs src -m set --match-set openclash_google_dns_ips dst -j ACCEPT >/dev/null 2>&1
+         fi
+         iptables -t filter -I FORWARD -m set --match-set lan_block_google_dns_ips src -m set --match-set openclash_google_dns_ips dst -j REJECT >/dev/null 2>&1
+         iptables -t filter -I FORWARD -m set --match-set lan_block_google_dns_macs src -m set --match-set openclash_google_dns_ips dst -j REJECT >/dev/null 2>&1
       fi
-      iptables -t filter -I FORWARD -m set --match-set lan_block_google_dns_ips src -m set --match-set openclash_google_dns_ips dst -j REJECT >/dev/null 2>&1
-      iptables -t filter -I FORWARD -m set --match-set lan_block_google_dns_macs src -m set --match-set openclash_google_dns_ips dst -j REJECT >/dev/null 2>&1
-   fi
 
-   #ipv6
-   if [ "$ipv6_enable" -eq 1 ] && [ -n "$(ip6tables -t mangle -L 2>&1 | grep -o 'Chain')" ]; then
-      if [ -z "$(ip6tables -t nat -nL PREROUTING --line-number |grep 'DNS Hijack')" ]; then
-         if [ "$enable_redirect_dns" -eq 1 ]; then
-            if [ "$lan_ac_mode" != "1" ]; then
-               ACBLACKDNSFILTER=""
-               if [ "$lan_ac_mode" = "0" ]; then
-                  if [ -n "$(uci -q get openclash.config.lan_ac_black_ips)" ]; then
-                     ACBLACKDNSFILTER="-m set ! --match-set lan_ac_black_ipv6s src"
-                  fi
-                  if [ -n "$(uci -q get openclash.config.lan_ac_black_macs)" ]; then
-                     ACBLACKDNSFILTER="$ACBLACKDNSFILTER -m set ! --match-set lan_ac_black_macs src"
+      #ipv6
+      if [ "$ipv6_enable" -eq 1 ] && [ -n "$(ip6tables -t mangle -L 2>&1 | grep -o 'Chain')" ]; then
+         if [ -z "$(ip6tables -t nat -nL PREROUTING --line-number |grep 'DNS Hijack')" ]; then
+            if [ "$enable_redirect_dns" -eq 1 ]; then
+               if [ "$lan_ac_mode" != "1" ]; then
+                  ACBLACKDNSFILTER=""
+                  if [ "$lan_ac_mode" = "0" ]; then
+                     if [ -n "$(uci -q get openclash.config.lan_ac_black_ips)" ]; then
+                        ACBLACKDNSFILTER="-m set ! --match-set lan_ac_black_ipv6s src"
+                     fi
+                     if [ -n "$(uci -q get openclash.config.lan_ac_black_macs)" ]; then
+                        ACBLACKDNSFILTER="$ACBLACKDNSFILTER -m set ! --match-set lan_ac_black_macs src"
+                     fi
                   fi
+                  ip6tables -t nat -I PREROUTING -p udp --dport 53 ${ACBLACKDNSFILTER} -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
+                  ip6tables -t nat -I PREROUTING -p tcp --dport 53 ${ACBLACKDNSFILTER} -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
+               else
+                  ip6tables -t nat -I PREROUTING -p udp --dport 53 -m set --match-set lan_ac_white_ipv6s src -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
+                  ip6tables -t nat -I PREROUTING -p tcp --dport 53 -m set --match-set lan_ac_white_ipv6s src -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
+                  ip6tables -t nat -I PREROUTING -p udp --dport 53 -m set --match-set lan_ac_white_macs src -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
+                  ip6tables -t nat -I PREROUTING -p tcp --dport 53 -m set --match-set lan_ac_white_macs src -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
                fi
-               ip6tables -t nat -I PREROUTING -p udp --dport 53 ${ACBLACKDNSFILTER} -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
-               ip6tables -t nat -I PREROUTING -p tcp --dport 53 ${ACBLACKDNSFILTER} -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
-            else
-               ip6tables -t nat -I PREROUTING -p udp --dport 53 -m set --match-set lan_ac_white_ipv6s src -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
-               ip6tables -t nat -I PREROUTING -p tcp --dport 53 -m set --match-set lan_ac_white_ipv6s src -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
-               ip6tables -t nat -I PREROUTING -p udp --dport 53 -m set --match-set lan_ac_white_macs src -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
-               ip6tables -t nat -I PREROUTING -p tcp --dport 53 -m set --match-set lan_ac_white_macs src -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
-            fi
-         elif [ "$enable_redirect_dns" -eq 2 ]; then
-            ip6tables -t nat -N openclash_dns_redirect
-            ip6tables -t nat -F openclash_dns_redirect
-            if [ "$lan_ac_mode" != "1" ]; then
-               ACBLACKDNSFILTER=""
-               if [ "$lan_ac_mode" = "0" ]; then
-                  if [ -n "$(uci -q get openclash.config.lan_ac_black_ips)" ]; then
-                     ACBLACKDNSFILTER="-m set ! --match-set lan_ac_black_ipv6s src"
-                  fi
-                  if [ -n "$(uci -q get openclash.config.lan_ac_black_macs)" ]; then
-                     ACBLACKDNSFILTER="$ACBLACKDNSFILTER -m set ! --match-set lan_ac_black_macs src"
+            elif [ "$enable_redirect_dns" -eq 2 ]; then
+               ip6tables -t nat -N openclash_dns_redirect
+               ip6tables -t nat -F openclash_dns_redirect
+               if [ "$lan_ac_mode" != "1" ]; then
+                  ACBLACKDNSFILTER=""
+                  if [ "$lan_ac_mode" = "0" ]; then
+                     if [ -n "$(uci -q get openclash.config.lan_ac_black_ips)" ]; then
+                        ACBLACKDNSFILTER="-m set ! --match-set lan_ac_black_ipv6s src"
+                     fi
+                     if [ -n "$(uci -q get openclash.config.lan_ac_black_macs)" ]; then
+                        ACBLACKDNSFILTER="$ACBLACKDNSFILTER -m set ! --match-set lan_ac_black_macs src"
+                     fi
                   fi
+                  ip6tables -t nat -A openclash_dns_redirect -p udp --dport 53 ${ACBLACKDNSFILTER} -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
+                  ip6tables -t nat -A openclash_dns_redirect -p tcp --dport 53 ${ACBLACKDNSFILTER} -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
+               else
+                  ip6tables -t nat -A openclash_dns_redirect -p udp --dport 53 -m set --match-set lan_ac_white_ipv6s src -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
+                  ip6tables -t nat -A openclash_dns_redirect -p tcp --dport 53 -m set --match-set lan_ac_white_ipv6s src -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
+                  ip6tables -t nat -A openclash_dns_redirect -p udp --dport 53 -m set --match-set lan_ac_white_macs src -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
+                  ip6tables -t nat -A openclash_dns_redirect -p tcp --dport 53 -m set --match-set lan_ac_white_macs src -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
+               fi
+               ip6tables -t nat -I PREROUTING -p udp --dport 53 -j openclash_dns_redirect
+               ip6tables -t nat -I PREROUTING -p tcp --dport 53 -j openclash_dns_redirect
+               if [ "$router_self_proxy" = 1 ]; then
+                  ip6tables -t nat -I OUTPUT -p udp --dport 53 -d ::/0 -m owner ! --uid-owner 65534 -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
+                  ip6tables -t nat -I OUTPUT -p tcp --dport 53 -d ::/0 -m owner ! --uid-owner 65534 -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
                fi
-               ip6tables -t nat -A openclash_dns_redirect -p udp --dport 53 ${ACBLACKDNSFILTER} -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
-               ip6tables -t nat -A openclash_dns_redirect -p tcp --dport 53 ${ACBLACKDNSFILTER} -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
-            else
-               ip6tables -t nat -A openclash_dns_redirect -p udp --dport 53 -m set --match-set lan_ac_white_ipv6s src -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
-               ip6tables -t nat -A openclash_dns_redirect -p tcp --dport 53 -m set --match-set lan_ac_white_ipv6s src -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
-               ip6tables -t nat -A openclash_dns_redirect -p udp --dport 53 -m set --match-set lan_ac_white_macs src -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
-               ip6tables -t nat -A openclash_dns_redirect -p tcp --dport 53 -m set --match-set lan_ac_white_macs src -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
             fi
-            ip6tables -t nat -I PREROUTING -p udp --dport 53 -j openclash_dns_redirect
-            ip6tables -t nat -I PREROUTING -p tcp --dport 53 -j openclash_dns_redirect
-            if [ "$router_self_proxy" = 1 ]; then
-               ip6tables -t nat -I OUTPUT -p udp --dport 53 -d ::/0 -m owner ! --uid-owner 65534 -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
-               ip6tables -t nat -I OUTPUT -p tcp --dport 53 -d ::/0 -m owner ! --uid-owner 65534 -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
+         fi
+         if [ "$en_mode" = "fake-ip" ] && [ "$china_ip_route" != "0" ] && [ "$enable_redirect_dns" != "2" ]; then
+            ip6tables -t nat -I PREROUTING -p udp --dport 53 -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
+            ip6tables -t nat -I PREROUTING -p tcp --dport 53 -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
+            ip6tables -t nat -I OUTPUT -p udp --dport 53 -m owner ! --uid-owner 65534 -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
+            ip6tables -t nat -I OUTPUT -p tcp --dport 53 -m owner ! --uid-owner 65534 -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
+            ip6tables -t nat -I OUTPUT -p udp --dport 12353 -m owner ! --uid-owner 65534 -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
+            ip6tables -t nat -I OUTPUT -p tcp --dport 12353 -m owner ! --uid-owner 65534 -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
+         fi
+
+         if [ "$china_ip6_route" != "0" ] || [ "$disable_udp_quic" = "1" ]; then
+            ipset -! flush china_ip6_route
+            ipset -! restore </etc/openclash/china_ip6_route.ipset
+            if [ "$enable_redirect_dns" != "2" ]; then
+               mkdir -p ${DNSMASQ_CONF_DIR}
+               echo "create china_ip6_route_pass hash:net family inet6 hashsize 1024 maxelem 1000000" >/tmp/openclash_china_ip6_route_pass.list
+               awk '!/^$/&&!/^#/&&!/^(\*?\.?)*[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})*$/{printf("add china_ip6_route_pass %s'" "'\n",$0)}' /etc/openclash/custom/openclash_custom_chnroute6_pass.list >>/tmp/openclash_china_ip6_route_pass.list
+               awk '!/^$/&&!/^#/&&/^(\*?\.?)*[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})*$/{printf("ipset=/%s/china_ip_route_pass'" "'\n",$0)}' /etc/openclash/custom/openclash_custom_chnroute6_pass.list >>${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute6_pass.conf
+               ipset -! flush china_ip6_route_pass
+               ipset -! restore </tmp/openclash_china_ip6_route_pass.list
+               rm -rf /tmp/openclash_china_ip6_route_pass.list
+
+               #Prevent domain repeat
+               for i in `grep -wf ${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute6_pass.conf ${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute_pass.conf`
+               do
+                  sed -i "s:${i}:${i},china_ip6_route_pass:g" ${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute_pass.conf
+                  sed -i 's:'$i':EXCLUSIVE:;/EXCLUSIVE/d' ${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute6_pass.conf
+               done
+               sed -i "s/china_ip_route_pass/china_ip6_route_pass/g" ${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute6_pass.conf
             fi
          fi
-      fi
-      if [ "$en_mode" = "fake-ip" ] && [ "$china_ip_route" != "0" ] && [ "$enable_redirect_dns" != "2" ]; then
-         ip6tables -t nat -I PREROUTING -p udp --dport 53 -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
-         ip6tables -t nat -I PREROUTING -p tcp --dport 53 -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
-         ip6tables -t nat -I OUTPUT -p udp --dport 53 -m owner ! --uid-owner 65534 -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
-         ip6tables -t nat -I OUTPUT -p tcp --dport 53 -m owner ! --uid-owner 65534 -j REDIRECT --to-ports "$dns_port" -m comment --comment "OpenClash DNS Hijack"
-         ip6tables -t nat -I OUTPUT -p udp --dport 12353 -m owner ! --uid-owner 65534 -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
-         ip6tables -t nat -I OUTPUT -p tcp --dport 12353 -m owner ! --uid-owner 65534 -j REDIRECT --to-ports "$DNSPORT" -m comment --comment "OpenClash DNS Hijack"
-      fi
 
-      if [ "$china_ip6_route" != "0" ] || [ "$disable_udp_quic" = "1" ]; then
-         ipset -! flush china_ip6_route
-         ipset -! restore </etc/openclash/china_ip6_route.ipset
-         if [ "$enable_redirect_dns" != "2" ]; then
-            mkdir -p ${DNSMASQ_CONF_DIR}
-            echo "create china_ip6_route_pass hash:net family inet6 hashsize 1024 maxelem 1000000" >/tmp/openclash_china_ip6_route_pass.list
-            awk '!/^$/&&!/^#/&&!/^(\*?\.?)*[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})*$/{printf("add china_ip6_route_pass %s'" "'\n",$0)}' /etc/openclash/custom/openclash_custom_chnroute6_pass.list >>/tmp/openclash_china_ip6_route_pass.list
-            awk '!/^$/&&!/^#/&&/^(\*?\.?)*[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})*$/{printf("ipset=/%s/china_ip_route_pass'" "'\n",$0)}' /etc/openclash/custom/openclash_custom_chnroute6_pass.list >>${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute6_pass.conf
-            ipset -! flush china_ip6_route_pass
-            ipset -! restore </tmp/openclash_china_ip6_route_pass.list
-            rm -rf /tmp/openclash_china_ip6_route_pass.list
-
-            #Prevent domain repeat
-            for i in `grep -wf ${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute6_pass.conf ${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute_pass.conf`
+         #local
+         ipset create localnetwork6 hash:net family inet6
+         if [ -f "/etc/openclash/custom/openclash_custom_localnetwork_ipv6.list" ]; then
+            for line in `cat "/etc/openclash/custom/openclash_custom_localnetwork_ipv6.list"`
             do
-               sed -i "s:${i}:${i},china_ip6_route_pass:g" ${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute_pass.conf
-               sed -i 's:'$i':EXCLUSIVE:;/EXCLUSIVE/d' ${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute6_pass.conf
+               ipset add localnetwork6 "$line"
             done
-            sed -i "s/china_ip_route_pass/china_ip6_route_pass/g" ${DNSMASQ_CONF_DIR}/dnsmasq_openclash_chnroute6_pass.conf
-         fi
-      fi
-
-      #local
-      ipset create localnetwork6 hash:net family inet6
-      if [ -f "/etc/openclash/custom/openclash_custom_localnetwork_ipv6.list" ]; then
-         for line in `cat "/etc/openclash/custom/openclash_custom_localnetwork_ipv6.list"`
-         do
-            ipset add localnetwork6 "$line"
-         done
-      else
-         ipset add localnetwork6 ::/128
-         ipset add localnetwork6 ::1/128
-         ipset add localnetwork6 ::ffff:0:0/96
-         ipset add localnetwork6 ::ffff:0:0:0/96
-         ipset add localnetwork6 64:ff9b::/96
-         ipset add localnetwork6 100::/64
-         ipset add localnetwork6 2001::/32
-         ipset add localnetwork6 2001:20::/28
-         ipset add localnetwork6 2001:db8::/32
-         ipset add localnetwork6 2002::/16
-         ipset add localnetwork6 fc00::/7
-         ipset add localnetwork6 fe80::/10
-         ipset add localnetwork6 ff00::/8
-      fi
-
-      if [ -n "$wan_ip6s" ]; then
-         for wan_ip6 in $wan_ip6s; do
-            ipset add localnetwork6 "$wan_ip6"
-         done
-      fi
-
-      #Google dns
-      ip6tables -t nat -I PREROUTING -m comment --comment "OpenClash Google DNS Hijack" -p tcp -d 2001:4860:4860::8888 --dport 53 -j ACCEPT
-      ip6tables -t nat -I PREROUTING -m comment --comment "OpenClash Google DNS Hijack" -p tcp -d 2001:4860:4860::8844 --dport 53 -j ACCEPT
-
-      if [ "$ipv6_mode" -eq 1 ]; then
-         #tcp
-         ip6tables -t nat -N openclash
-         ip6tables -t nat -F openclash
-         ip6tables -t nat -A openclash -m set --match-set localnetwork6 dst -j RETURN
-         ip6tables -t nat -A openclash -m set --match-set localnetwork6 src -m set --match-set lan_ac_black_ports src -j RETURN >/dev/null 2>&1
-         ip6tables -t nat -A openclash -m set --match-set wan_ac_black_ipv6s dst -j RETURN >/dev/null 2>&1
-         ip6tables -t nat -A openclash -m set --match-set lan_ac_black_ipv6s src -j RETURN >/dev/null 2>&1
-         ip6tables -t nat -A openclash -m set --match-set lan_ac_black_macs src -j RETURN >/dev/null 2>&1
-         if [ "$lan_ac_mode" = "1" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_ips)" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_macs)" ]; then
-            ip6tables -t nat -A openclash -m set ! --match-set lan_ac_white_ipv6s src -m set ! --match-set lan_ac_white_macs src -j RETURN >/dev/null 2>&1
          else
-            ip6tables -t nat -A openclash -m set ! --match-set lan_ac_white_ipv6s src -j RETURN >/dev/null 2>&1
-            ip6tables -t nat -A openclash -m set ! --match-set lan_ac_white_macs src -j RETURN >/dev/null 2>&1
-         fi
-         if [ "$en_mode" = "redir-host" ]; then
-            ip6tables -t nat -A openclash -m set ! --match-set common_ports dst -j RETURN >/dev/null 2>&1
+            ipset add localnetwork6 ::/128
+            ipset add localnetwork6 ::1/128
+            ipset add localnetwork6 ::ffff:0:0/96
+            ipset add localnetwork6 ::ffff:0:0:0/96
+            ipset add localnetwork6 64:ff9b::/96
+            ipset add localnetwork6 100::/64
+            ipset add localnetwork6 2001::/32
+            ipset add localnetwork6 2001:20::/28
+            ipset add localnetwork6 2001:db8::/32
+            ipset add localnetwork6 2002::/16
+            ipset add localnetwork6 fc00::/7
+            ipset add localnetwork6 fe80::/10
+            ipset add localnetwork6 ff00::/8
+         fi
+
+         if [ -n "$wan_ip6s" ]; then
+            for wan_ip6 in $wan_ip6s; do
+               ipset add localnetwork6 "$wan_ip6"
+            done
          fi
-         if [ "$china_ip6_route" != "0" ]; then
-            if [ "$china_ip6_route" = "1" ]; then
-               rule="-m set --match-set china_ip6_route dst"
-            elif [ "$china_ip6_route" = "2" ]; then
-               rule="-m set ! --match-set china_ip6_route dst"
+
+         #Google dns
+         ip6tables -t nat -I PREROUTING -m comment --comment "OpenClash Google DNS Hijack" -p tcp -d 2001:4860:4860::8888 --dport 53 -j ACCEPT
+         ip6tables -t nat -I PREROUTING -m comment --comment "OpenClash Google DNS Hijack" -p tcp -d 2001:4860:4860::8844 --dport 53 -j ACCEPT
+
+         if [ "$ipv6_mode" -eq 1 ]; then
+            #tcp
+            ip6tables -t nat -N openclash
+            ip6tables -t nat -F openclash
+            ip6tables -t nat -A openclash -m set --match-set localnetwork6 dst -j RETURN
+            ip6tables -t nat -A openclash -m set --match-set localnetwork6 src -m set --match-set lan_ac_black_ports src -j RETURN >/dev/null 2>&1
+            ip6tables -t nat -A openclash -m set --match-set wan_ac_black_ipv6s dst -j RETURN >/dev/null 2>&1
+            ip6tables -t nat -A openclash -m set --match-set lan_ac_black_ipv6s src -j RETURN >/dev/null 2>&1
+            ip6tables -t nat -A openclash -m set --match-set lan_ac_black_macs src -j RETURN >/dev/null 2>&1
+            if [ "$lan_ac_mode" = "1" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_ips)" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_macs)" ]; then
+               ip6tables -t nat -A openclash -m set ! --match-set lan_ac_white_ipv6s src -m set ! --match-set lan_ac_white_macs src -j RETURN >/dev/null 2>&1
+            else
+               ip6tables -t nat -A openclash -m set ! --match-set lan_ac_white_ipv6s src -j RETURN >/dev/null 2>&1
+               ip6tables -t nat -A openclash -m set ! --match-set lan_ac_white_macs src -j RETURN >/dev/null 2>&1
             fi
-            [ "$enable_redirect_dns" != "2" ] && rule="$rule -m set ! --match-set china_ip6_route_pass dst"
-            ip6tables -t nat -A openclash $rule -j RETURN >/dev/null 2>&1
-         fi
-         ip6tables -t nat -A openclash -p tcp -j REDIRECT --to-ports "$proxy_port"
-         ip6tables -t nat -A PREROUTING -p tcp -j openclash
-      fi
-      #tproxy not support output chain
-      if [ "$ipv6_mode" -eq 0 ] || [ "$ipv6_mode" -eq 1 ]; then
-         if [ "$router_self_proxy" = "1" ]; then
-            ip6tables -t nat -N openclash_output
-            ip6tables -t nat -F openclash_output
-            ip6tables -t nat -A openclash_output -m set --match-set localnetwork6 dst -j RETURN
-            ip6tables -t nat -A openclash_output -m set --match-set localnetwork6 src -m set --match-set lan_ac_black_ports src -j RETURN >/dev/null 2>&1
-            ip6tables -t nat -A openclash_output -m owner ! --uid-owner 65534 -m set --match-set wan_ac_black_ipv6s dst -j RETURN >/dev/null 2>&1
             if [ "$en_mode" = "redir-host" ]; then
-               ip6tables -t nat -A openclash_output -m owner ! --uid-owner 65534 -m set ! --match-set common_ports dst -j RETURN >/dev/null 2>&1
+               ip6tables -t nat -A openclash -m set ! --match-set common_ports dst -j RETURN >/dev/null 2>&1
             fi
             if [ "$china_ip6_route" != "0" ]; then
                if [ "$china_ip6_route" = "1" ]; then
@@ -2926,63 +2913,21 @@ if [ -z "$FW4" ]; then
                   rule="-m set ! --match-set china_ip6_route dst"
                fi
                [ "$enable_redirect_dns" != "2" ] && rule="$rule -m set ! --match-set china_ip6_route_pass dst"
-               ip6tables -t nat -A openclash_output -m owner ! --uid-owner 65534 $rule -j RETURN >/dev/null 2>&1
+               ip6tables -t nat -A openclash $rule -j RETURN >/dev/null 2>&1
             fi
-            ip6tables -t nat -A openclash_output -m owner ! --uid-owner 65534 -p tcp -j REDIRECT --to-ports "$proxy_port"
-            ip6tables -t nat -A OUTPUT -j openclash_output >/dev/null 2>&1
+            ip6tables -t nat -A openclash -p tcp -j REDIRECT --to-ports "$proxy_port"
+            ip6tables -t nat -A PREROUTING -p tcp -j openclash
          fi
-      fi
-
-      if [ "$enable_v6_udp_proxy" -eq 1 ] || [ "$ipv6_mode" -eq 0 ] || [ "$ipv6_mode" -eq 2 ]; then
-         ip6tables -t mangle -N openclash
-         ip6tables -t mangle -F openclash
-         #prevent tproxy loop
-         ip6tables -t mangle -A openclash -i lo -j RETURN
-         ip6tables -t mangle -A openclash -m set --match-set localnetwork6 dst -j RETURN
-         ip6tables -t mangle -A openclash -p udp --dport 53 -j RETURN
-         ip6tables -t mangle -A openclash -m set --match-set localnetwork6 src -m set --match-set lan_ac_black_ports src -j RETURN >/dev/null 2>&1
-         ip6tables -t mangle -A openclash -m set --match-set wan_ac_black_ipv6s dst -j RETURN >/dev/null 2>&1
-         ip6tables -t mangle -A openclash -m set --match-set lan_ac_black_macs src -j RETURN >/dev/null 2>&1
-         ip6tables -t mangle -A openclash -m set --match-set lan_ac_black_ipv6s src -j RETURN >/dev/null 2>&1
-         if [ "$lan_ac_mode" = "1" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_ips)" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_macs)" ]; then
-            ip6tables -t mangle -A openclash -m set ! --match-set lan_ac_white_ipv6s src -m set ! --match-set lan_ac_white_macs src -j RETURN >/dev/null 2>&1
-         else
-            ip6tables -t mangle -A openclash -m set ! --match-set lan_ac_white_ipv6s src -j RETURN >/dev/null 2>&1
-            ip6tables -t mangle -A openclash -m set ! --match-set lan_ac_white_macs src -j RETURN >/dev/null 2>&1
-         fi
-
-         if [ "$en_mode" == "redir-host" ]; then
-            ip6tables -t mangle -A openclash -m set ! --match-set common_ports dst -j RETURN >/dev/null 2>&1
-         fi
-
-         if [ "$china_ip6_route" != "0" ]; then
-            if [ "$china_ip6_route" = "1" ]; then
-               rule="-m set --match-set china_ip6_route dst"
-            elif [ "$china_ip6_route" = "2" ]; then
-               rule="-m set ! --match-set china_ip6_route dst"
-            fi
-            [ "$enable_redirect_dns" != "2" ] && rule="$rule -m set ! --match-set china_ip6_route_pass dst"
-            ip6tables -t mangle -A openclash $rule -j RETURN >/dev/null 2>&1
-         fi
-      fi
-
-      #TProxy & TUN
-      if [ "$ipv6_mode" -ne 1 ]; then
-         if [ "$ipv6_mode" -eq 0 ]; then
-            ip6tables -t mangle -A openclash -p tcp -m comment --comment "OpenClash TCP Tproxy" -j TPROXY --on-port "$tproxy_port" --tproxy-mark "$PROXY_FWMARK"
-         elif [ "$ipv6_mode" -eq 2 ]; then
-            ip6tables -t mangle -A openclash -p tcp -j MARK --set-mark "$PROXY_FWMARK"
-         fi
-
-         if [ "$router_self_proxy" = "1" ]; then
-            if [ "$ipv6_mode" -eq 2 ]; then
-               ip6tables -t mangle -N openclash_output
-               ip6tables -t mangle -F openclash_output
-               ip6tables -t mangle -A openclash_output -m set --match-set localnetwork6 dst -j RETURN
-               ip6tables -t mangle -A openclash_output -m set --match-set localnetwork6 src -m set --match-set lan_ac_black_ports src -j RETURN >/dev/null 2>&1
-               ip6tables -t mangle -A openclash_output -m owner ! --uid-owner 65534 -m set --match-set wan_ac_black_ipv6s dst -j RETURN >/dev/null 2>&1
+         #tproxy not support output chain
+         if [ "$ipv6_mode" -eq 0 ] || [ "$ipv6_mode" -eq 1 ]; then
+            if [ "$router_self_proxy" = "1" ]; then
+               ip6tables -t nat -N openclash_output
+               ip6tables -t nat -F openclash_output
+               ip6tables -t nat -A openclash_output -m set --match-set localnetwork6 dst -j RETURN
+               ip6tables -t nat -A openclash_output -m set --match-set localnetwork6 src -m set --match-set lan_ac_black_ports src -j RETURN >/dev/null 2>&1
+               ip6tables -t nat -A openclash_output -m owner ! --uid-owner 65534 -m set --match-set wan_ac_black_ipv6s dst -j RETURN >/dev/null 2>&1
                if [ "$en_mode" = "redir-host" ]; then
-                  ip6tables -t mangle -A openclash_output -m owner ! --uid-owner 65534 -m set ! --match-set common_ports dst -j RETURN >/dev/null 2>&1
+                  ip6tables -t nat -A openclash_output -m owner ! --uid-owner 65534 -m set ! --match-set common_ports dst -j RETURN >/dev/null 2>&1
                fi
                if [ "$china_ip6_route" != "0" ]; then
                   if [ "$china_ip6_route" = "1" ]; then
@@ -2991,106 +2936,174 @@ if [ -z "$FW4" ]; then
                      rule="-m set ! --match-set china_ip6_route dst"
                   fi
                   [ "$enable_redirect_dns" != "2" ] && rule="$rule -m set ! --match-set china_ip6_route_pass dst"
-                  ip6tables -t mangle -A openclash_output -m owner ! --uid-owner 65534 $rule -j RETURN >/dev/null 2>&1
+                  ip6tables -t nat -A openclash_output -m owner ! --uid-owner 65534 $rule -j RETURN >/dev/null 2>&1
                fi
-               ip6tables -t mangle -A openclash_output -p tcp -m owner ! --uid-owner 65534 -j MARK --set-xmark "$PROXY_FWMARK"
-               ip6tables -t mangle -A OUTPUT -j openclash_output
+               ip6tables -t nat -A openclash_output -m owner ! --uid-owner 65534 -p tcp -j REDIRECT --to-ports "$proxy_port"
+               ip6tables -t nat -A OUTPUT -j openclash_output >/dev/null 2>&1
             fi
          fi
-      fi
 
-      #udp
-      if [ "$ipv6_mode" -eq 2 ]; then
-         ip6tables -t mangle -A openclash -p udp -m comment --comment "OpenClash UDP TUN" -j MARK --set-xmark "$PROXY_FWMARK"
-      else
-         if [ "$enable_v6_udp_proxy" -eq 1 ]; then
-            ip6tables -t mangle -A openclash -p udp -m comment --comment "OpenClash UDP Tproxy" -j TPROXY --on-port "$tproxy_port" --tproxy-mark "$PROXY_FWMARK"
-         fi
-      fi
+         if [ "$enable_v6_udp_proxy" -eq 1 ] || [ "$ipv6_mode" -eq 0 ] || [ "$ipv6_mode" -eq 2 ]; then
+            ip6tables -t mangle -N openclash
+            ip6tables -t mangle -F openclash
+            #prevent tproxy loop
+            ip6tables -t mangle -A openclash -i lo -j RETURN
+            ip6tables -t mangle -A openclash -m set --match-set localnetwork6 dst -j RETURN
+            ip6tables -t mangle -A openclash -p udp --dport 53 -j RETURN
+            ip6tables -t mangle -A openclash -m set --match-set localnetwork6 src -m set --match-set lan_ac_black_ports src -j RETURN >/dev/null 2>&1
+            ip6tables -t mangle -A openclash -m set --match-set wan_ac_black_ipv6s dst -j RETURN >/dev/null 2>&1
+            ip6tables -t mangle -A openclash -m set --match-set lan_ac_black_macs src -j RETURN >/dev/null 2>&1
+            ip6tables -t mangle -A openclash -m set --match-set lan_ac_black_ipv6s src -j RETURN >/dev/null 2>&1
+            if [ "$lan_ac_mode" = "1" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_ips)" ] && [ -n "$(uci -q get openclash.config.lan_ac_white_macs)" ]; then
+               ip6tables -t mangle -A openclash -m set ! --match-set lan_ac_white_ipv6s src -m set ! --match-set lan_ac_white_macs src -j RETURN >/dev/null 2>&1
+            else
+               ip6tables -t mangle -A openclash -m set ! --match-set lan_ac_white_ipv6s src -j RETURN >/dev/null 2>&1
+               ip6tables -t mangle -A openclash -m set ! --match-set lan_ac_white_macs src -j RETURN >/dev/null 2>&1
+            fi
 
-      ip6tables -t mangle -A PREROUTING -j openclash
+            if [ "$en_mode" == "redir-host" ]; then
+               ip6tables -t mangle -A openclash -m set ! --match-set common_ports dst -j RETURN >/dev/null 2>&1
+            fi
 
-      #route
-      if [ "$ipv6_mode" -ne 2 ]; then
-         if [ "$enable_v6_udp_proxy" -eq 1 ] || [ "$ipv6_mode" -eq 0 ]; then
-            modprobe xt_TPROXY >/dev/null 2>&1
-            ip -6 rule add fwmark "$PROXY_FWMARK" table "$PROXY_ROUTE_TABLE"
-            ip -6 route add local ::/0 dev lo table "$PROXY_ROUTE_TABLE"
+            if [ "$china_ip6_route" != "0" ]; then
+               if [ "$china_ip6_route" = "1" ]; then
+                  rule="-m set --match-set china_ip6_route dst"
+               elif [ "$china_ip6_route" = "2" ]; then
+                  rule="-m set ! --match-set china_ip6_route dst"
+               fi
+               [ "$enable_redirect_dns" != "2" ] && rule="$rule -m set ! --match-set china_ip6_route_pass dst"
+               ip6tables -t mangle -A openclash $rule -j RETURN >/dev/null 2>&1
+            fi
          fi
-      else
-         set_tun_tap "v6"
-      fi
 
-      #TUN FORWORD
-      if [ "$ipv6_mode" -eq 2 ]; then
-         ip6tables -I FORWARD -m comment --comment "OpenClash TUN Forward" -o utun -j ACCEPT >/dev/null 2>&1
-         ip6tables -I FORWARD -m comment --comment "OpenClash TUN Forward" -i utun -j ACCEPT >/dev/null 2>&1
-         ip6tables -I INPUT -m comment --comment "OpenClash TUN Input" -i utun -j ACCEPT >/dev/null 2>&1
-         ip6tables -t nat -I POSTROUTING -m comment --comment "OpenClash TUN Postrouting" -o utun -j RETURN >/dev/null 2>&1
-      fi
+         #TProxy & TUN
+         if [ "$ipv6_mode" -ne 1 ]; then
+            if [ "$ipv6_mode" -eq 0 ]; then
+               ip6tables -t mangle -A openclash -p tcp -m comment --comment "OpenClash TCP Tproxy" -j TPROXY --on-port "$tproxy_port" --tproxy-mark "$PROXY_FWMARK"
+            elif [ "$ipv6_mode" -eq 2 ]; then
+               ip6tables -t mangle -A openclash -p tcp -j MARK --set-mark "$PROXY_FWMARK"
+            fi
 
-      #quic
-      if [ "$disable_udp_quic" -eq 1 ]; then
-         if [ "$ipv6_mode" -eq 2 ]; then
-            chain="FORWARD -o utun"
-         else
-            chain="INPUT"
+            if [ "$router_self_proxy" = "1" ]; then
+               if [ "$ipv6_mode" -eq 2 ]; then
+                  ip6tables -t mangle -N openclash_output
+                  ip6tables -t mangle -F openclash_output
+                  ip6tables -t mangle -A openclash_output -m set --match-set localnetwork6 dst -j RETURN
+                  ip6tables -t mangle -A openclash_output -m set --match-set localnetwork6 src -m set --match-set lan_ac_black_ports src -j RETURN >/dev/null 2>&1
+                  ip6tables -t mangle -A openclash_output -m owner ! --uid-owner 65534 -m set --match-set wan_ac_black_ipv6s dst -j RETURN >/dev/null 2>&1
+                  if [ "$en_mode" = "redir-host" ]; then
+                     ip6tables -t mangle -A openclash_output -m owner ! --uid-owner 65534 -m set ! --match-set common_ports dst -j RETURN >/dev/null 2>&1
+                  fi
+                  if [ "$china_ip6_route" != "0" ]; then
+                     if [ "$china_ip6_route" = "1" ]; then
+                        rule="-m set --match-set china_ip6_route dst"
+                     elif [ "$china_ip6_route" = "2" ]; then
+                        rule="-m set ! --match-set china_ip6_route dst"
+                     fi
+                     [ "$enable_redirect_dns" != "2" ] && rule="$rule -m set ! --match-set china_ip6_route_pass dst"
+                     ip6tables -t mangle -A openclash_output -m owner ! --uid-owner 65534 $rule -j RETURN >/dev/null 2>&1
+                  fi
+                  ip6tables -t mangle -A openclash_output -p tcp -m owner ! --uid-owner 65534 -j MARK --set-xmark "$PROXY_FWMARK"
+                  ip6tables -t mangle -A OUTPUT -j openclash_output
+               fi
+            fi
          fi
-         if [ "$china_ip6_route" = "2" ]; then
-            rule="-m set --match-set china_ip6_route dst"
+
+         #udp
+         if [ "$ipv6_mode" -eq 2 ]; then
+            ip6tables -t mangle -A openclash -p udp -m comment --comment "OpenClash UDP TUN" -j MARK --set-xmark "$PROXY_FWMARK"
          else
-            rule="-m set ! --match-set china_ip6_route dst"
+            if [ "$enable_v6_udp_proxy" -eq 1 ]; then
+               ip6tables -t mangle -A openclash -p udp -m comment --comment "OpenClash UDP Tproxy" -j TPROXY --on-port "$tproxy_port" --tproxy-mark "$PROXY_FWMARK"
+            fi
          fi
-         ip6tables -I $chain -p udp --dport 443 -m comment --comment "OpenClash QUIC REJECT" $rule -j REJECT >/dev/null 2>&1
-      fi
 
-      #bypass gateway compatible
-      if [ "$bypass_gateway_compatible" -eq 1 ]; then
-         ip6tables -t nat -N openclash_post
-         ip6tables -t nat -F openclash_post
-         ip6tables -t nat -A openclash_post -m set --match-set localnetwork6 src -m set --match-set lan_ac_black_ports src -j RETURN >/dev/null 2>&1
-         ip6tables -t nat -A openclash_post -m mark --mark "$PROXY_FWMARK" -j ACCEPT
-         ip6tables -t nat -A openclash_post -m set --match-set localnetwork6 dst -j RETURN
-         ip6tables -t nat -A openclash_post -m addrtype ! --src-type LOCAL -m owner ! --uid-owner 65534 -j MASQUERADE
-         ip6tables -t nat -A POSTROUTING -m comment --comment "OpenClash Bypass Gateway Compatible" -j openclash_post
-      fi
+         ip6tables -t mangle -A PREROUTING -j openclash
 
-      #google_dns_block
-      if [ -n "$(uci -q get openclash.config.lan_block_google_dns_ips)" ] || [ -n "$(uci -q get openclash.config.lan_block_google_dns_macs)" ]; then
-         ipset create openclash_google_dns_ipv6s hash:net family inet6
-         ipset add openclash_google_dns_ipv6s 2001:4860:4860::8888
-         ipset add openclash_google_dns_ipv6s 2001:4860:4860::8844
-         ipset add openclash_google_dns_ipv6s 2001:4860:4860::6464
-         ipset add openclash_google_dns_ipv6s 2001:4860:4860::64
-
-         ip6tables -t nat -I PREROUTING -m comment --comment "OpenClash Google DNS Block" -m set --match-set lan_block_google_dns_ipv6s src -m set --match-set openclash_google_dns_ipv6s dst -j ACCEPT
-         ip6tables -t nat -I PREROUTING -m comment --comment "OpenClash Google DNS Block" -m set --match-set lan_block_google_dns_macs src -m set --match-set openclash_google_dns_ipv6s dst -j ACCEPT
-         ip6tables -t filter -I FORWARD -m set --match-set lan_block_google_dns_ipv6s src -m set --match-set openclash_google_dns_ipv6s dst -j REJECT >/dev/null 2>&1
-         ip6tables -t filter -I FORWARD -m set --match-set lan_block_google_dns_macs src -m set --match-set openclash_google_dns_ipv6s dst -j REJECT >/dev/null 2>&1
-      fi
-
-      #intranet allowed
-      if [ "$intranet_allowed" -eq 1 ]; then
-         if [ -n "$intranet_allowed_wan_name" ] && [ "$intranet_allowed_wan_name" != "0" ]; then
-            config_load "openclash"
-            config_list_foreach "config" "intranet_allowed_wan_name" wan6_name_add
+         #route
+         if [ "$ipv6_mode" -ne 2 ]; then
+            if [ "$enable_v6_udp_proxy" -eq 1 ] || [ "$ipv6_mode" -eq 0 ]; then
+               modprobe xt_TPROXY >/dev/null 2>&1
+               ip -6 rule add fwmark "$PROXY_FWMARK" table "$PROXY_ROUTE_TABLE"
+               ip -6 route add local ::/0 dev lo table "$PROXY_ROUTE_TABLE"
+            fi
          else
-            wan6_ints=$(ip6tables-save -t filter |grep -e "-j zone_wan_input" 2>/dev/null |awk '{for (i=1;i<=NF;i++) {if ($i ~ /-i/) {print $(i+1)}}}' 2>/dev/null)
+            set_tun_tap "v6"
          fi
-         if [ -n "$wan6_ints" ]; then
-            ip6tables -t filter -N openclash_wan_input
-            ip6tables -t filter -F openclash_wan_input
-            for wan6_int in $wan6_ints; do
-               ip6tables -t filter -I INPUT -i "$wan6_int" -m set ! --match-set localnetwork6 src -j openclash_wan_input
-            done
-            ip6tables -t filter -A openclash_wan_input -p udp -m multiport --dport "$proxy_port,$tproxy_port,$cn_port,$http_port,$socks_port,$mixed_port,$dns_port" -j REJECT >/dev/null 2>&1
-            ip6tables -t filter -A openclash_wan_input -p tcp -m multiport --dport "$proxy_port,$tproxy_port,$cn_port,$http_port,$socks_port,$mixed_port,$dns_port" -j REJECT >/dev/null 2>&1
-         else
-            LOG_OUT "Warning: Can't Settting Only Intranet Allowed Function, Get IPv6 WAN Interfaces error, Please Verify The Firewall's WAN Zone Name is wan, Ignore This IF The Device Does not Have a WAN Interfaces..."
+
+         #TUN FORWORD
+         if [ "$ipv6_mode" -eq 2 ]; then
+            ip6tables -I FORWARD -m comment --comment "OpenClash TUN Forward" -o utun -j ACCEPT >/dev/null 2>&1
+            ip6tables -I FORWARD -m comment --comment "OpenClash TUN Forward" -i utun -j ACCEPT >/dev/null 2>&1
+            ip6tables -I INPUT -m comment --comment "OpenClash TUN Input" -i utun -j ACCEPT >/dev/null 2>&1
+            ip6tables -t nat -I POSTROUTING -m comment --comment "OpenClash TUN Postrouting" -o utun -j RETURN >/dev/null 2>&1
+         fi
+
+         #quic
+         if [ "$disable_udp_quic" -eq 1 ]; then
+            if [ "$ipv6_mode" -eq 2 ]; then
+               chain="FORWARD -o utun"
+            else
+               chain="INPUT"
+            fi
+            if [ "$china_ip6_route" = "2" ]; then
+               rule="-m set --match-set china_ip6_route dst"
+            else
+               rule="-m set ! --match-set china_ip6_route dst"
+            fi
+            ip6tables -I $chain -p udp --dport 443 -m comment --comment "OpenClash QUIC REJECT" $rule -j REJECT >/dev/null 2>&1
+         fi
+
+         #bypass gateway compatible
+         if [ "$bypass_gateway_compatible" -eq 1 ]; then
+            ip6tables -t nat -N openclash_post
+            ip6tables -t nat -F openclash_post
+            ip6tables -t nat -A openclash_post -m set --match-set localnetwork6 src -m set --match-set lan_ac_black_ports src -j RETURN >/dev/null 2>&1
+            ip6tables -t nat -A openclash_post -m mark --mark "$PROXY_FWMARK" -j ACCEPT
+            ip6tables -t nat -A openclash_post -m set --match-set localnetwork6 dst -j RETURN
+            ip6tables -t nat -A openclash_post -m addrtype ! --src-type LOCAL -m owner ! --uid-owner 65534 -j MASQUERADE
+            ip6tables -t nat -A POSTROUTING -m comment --comment "OpenClash Bypass Gateway Compatible" -j openclash_post
+         fi
+
+         #google_dns_block
+         if [ -n "$(uci -q get openclash.config.lan_block_google_dns_ips)" ] || [ -n "$(uci -q get openclash.config.lan_block_google_dns_macs)" ]; then
+            ipset create openclash_google_dns_ipv6s hash:net family inet6
+            ipset add openclash_google_dns_ipv6s 2001:4860:4860::8888
+            ipset add openclash_google_dns_ipv6s 2001:4860:4860::8844
+            ipset add openclash_google_dns_ipv6s 2001:4860:4860::6464
+            ipset add openclash_google_dns_ipv6s 2001:4860:4860::64
+
+            ip6tables -t nat -I PREROUTING -m comment --comment "OpenClash Google DNS Block" -m set --match-set lan_block_google_dns_ipv6s src -m set --match-set openclash_google_dns_ipv6s dst -j ACCEPT
+            ip6tables -t nat -I PREROUTING -m comment --comment "OpenClash Google DNS Block" -m set --match-set lan_block_google_dns_macs src -m set --match-set openclash_google_dns_ipv6s dst -j ACCEPT
+            ip6tables -t filter -I FORWARD -m set --match-set lan_block_google_dns_ipv6s src -m set --match-set openclash_google_dns_ipv6s dst -j REJECT >/dev/null 2>&1
+            ip6tables -t filter -I FORWARD -m set --match-set lan_block_google_dns_macs src -m set --match-set openclash_google_dns_ipv6s dst -j REJECT >/dev/null 2>&1
+         fi
+
+         #intranet allowed
+         if [ "$intranet_allowed" -eq 1 ]; then
+            if [ -n "$intranet_allowed_wan_name" ] && [ "$intranet_allowed_wan_name" != "0" ]; then
+               config_load "openclash"
+               config_list_foreach "config" "intranet_allowed_wan_name" wan6_name_add
+            else
+               wan6_ints=$(ip6tables-save -t filter |grep -e "-j zone_wan_input" 2>/dev/null |awk '{for (i=1;i<=NF;i++) {if ($i ~ /-i/) {print $(i+1)}}}' 2>/dev/null)
+            fi
+            if [ -n "$wan6_ints" ]; then
+               ip6tables -t filter -N openclash_wan_input
+               ip6tables -t filter -F openclash_wan_input
+               for wan6_int in $wan6_ints; do
+                  ip6tables -t filter -I INPUT -i "$wan6_int" -m set ! --match-set localnetwork6 src -j openclash_wan_input
+               done
+               ip6tables -t filter -A openclash_wan_input -p udp -m multiport --dport "$proxy_port,$tproxy_port,$cn_port,$http_port,$socks_port,$mixed_port,$dns_port" -j REJECT >/dev/null 2>&1
+               ip6tables -t filter -A openclash_wan_input -p tcp -m multiport --dport "$proxy_port,$tproxy_port,$cn_port,$http_port,$socks_port,$mixed_port,$dns_port" -j REJECT >/dev/null 2>&1
+            else
+               LOG_OUT "Warning: Can't Settting Only Intranet Allowed Function, Get IPv6 WAN Interfaces error, Please Verify The Firewall's WAN Zone Name is wan, Ignore This IF The Device Does not Have a WAN Interfaces..."
+            fi
          fi
       fi
-   fi
-fi 2>/dev/null
+   fi 2>/dev/null
+else
+   LOG_OUT "Tip: Escaping firewall settings due to eBPF interface:【${ebpf_int_name}】"
+fi
 
 #端口转发
 LOG_OUT "Tip: Start Add Port Bypassing Rules For Firewall Redirect and Firewall Rules..."
@@ -3129,7 +3142,7 @@ revert_firewall()
    ip -6 route del fe80::/64 dev utun proto kernel metric 256 pref medium >/dev/null 2>&1
    ip -6 route del default dev utun table "$PROXY_ROUTE_TABLE" >/dev/null 2>&1
    ip -6 rule del fwmark "$PROXY_FWMARK" table "$PROXY_ROUTE_TABLE" >/dev/null 2>&1
-   
+
    if [ -n "$FW4" ]; then
       for nft in "input" "forward" "dstnat" "srcnat" "nat_output" "mangle_prerouting" "mangle_output"; do
          local handles=$(nft -a list chain inet fw4 ${nft} |grep -E "openclash|OpenClash" |awk -F '# handle ' '{print$2}')
@@ -3228,6 +3241,13 @@ get_config()
       lan_ip=$(ip address show $lan_interface_name | grep -w "inet"  2>/dev/null |grep -Eo 'inet [0-9\.]+' | awk '{print $2}')
    fi
 
+   # eBPF configuration
+   if [[ "$en_mode" == "redir-host" && "$en_mode_tun" == "1" && "${KERNEL_EBPF_SUPPORT}" == "1" ]]; then
+      ebpf_int_name=$(uci -q get openclash.config.ebpf_action_interface || echo "0")
+   else
+      ebpf_int_name=$(echo "0")
+   fi
+
    wan_ip4s=$(/usr/share/openclash/openclash_get_network.lua "wanip" 2>/dev/null)
    wan_ip6s=$(ifconfig | grep 'inet6 addr' | awk '{print $3}' 2>/dev/null)
    disable_masq_cache=$(uci -q get openclash.config.disable_masq_cache)
@@ -3295,7 +3315,7 @@ start()
    if ! $quick_start; then
       LOG_OUT "Step 3: Modify The Config File..."
       config_check
-      /usr/share/openclash/yml_change.sh 2>/dev/null "$en_mode" "$da_password" "$cn_port" "$proxy_port" "$TMP_CONFIG_FILE" "$ipv6_enable" "$http_port" "$socks_port" "$log_level" "$proxy_mode" "$en_mode_tun" "$stack_type" "$dns_port" "$mixed_port" "$tproxy_port" "$ipv6_dns" "$store_fakeip" "$stream_domains_prefetch" "$enable_meta_core" "$enable_meta_sniffer" "$enable_geoip_dat" "$geodata_loader" "$enable_meta_sniffer_custom" "$interface_name" "$enable_tcp_concurrent" "$core_type" "$append_default_dns" "$enable_meta_sniffer_pure_ip" "$find_process_mode" "$fakeip_range" "$global_client_fingerprint" "$ipv6_mode" "$stack_type_v6" "$enable_unified_delay" "$keep_alive_interval" "$proxy_dns_group"
+      /usr/share/openclash/yml_change.sh 2>/dev/null "$en_mode" "$da_password" "$cn_port" "$proxy_port" "$TMP_CONFIG_FILE" "$ipv6_enable" "$http_port" "$socks_port" "$log_level" "$proxy_mode" "$en_mode_tun" "$stack_type" "$dns_port" "$mixed_port" "$tproxy_port" "$ipv6_dns" "$store_fakeip" "$stream_domains_prefetch" "$enable_meta_core" "$enable_meta_sniffer" "$enable_geoip_dat" "$geodata_loader" "$enable_meta_sniffer_custom" "$interface_name" "$enable_tcp_concurrent" "$core_type" "$append_default_dns" "$enable_meta_sniffer_pure_ip" "$find_process_mode" "$fakeip_range" "$global_client_fingerprint" "$ipv6_mode" "$stack_type_v6" "$enable_unified_delay" "$keep_alive_interval" "$proxy_dns_group" "$ebpf_int_name"
       /usr/share/openclash/yml_rules_change.sh 2>/dev/null "$rule_source" "$enable_custom_clash_rules" "$TMP_CONFIG_FILE" "$enable_rule_proxy" "$CONFIG_NAME" "$router_self_proxy" "$lan_ip" "$proxy_port" "$tproxy_port" "$enable_meta_core" "$enable_redirect_dns" "$fakeip_range" "$en_mode"
       /usr/share/openclash/openclash_custom_domain_dns.sh >/dev/null 2>&1
       #Custom overwrite
@@ -3317,7 +3337,6 @@ start()
       yml_provider_check "$CONFIG_FILE" "proxy-providers" "proxies"
       yml_provider_check "$CONFIG_FILE" "rule-providers" "payload"
    fi
-
    try_restore_start
 
    LOG_OUT "Step 7: Set Firewall Rules..."
diff --git a/root/usr/share/openclash/openclash_watchdog.sh b/root/usr/share/openclash/openclash_watchdog.sh
index 9a87be2..d7073a0 100644
--- a/root/usr/share/openclash/openclash_watchdog.sh
+++ b/root/usr/share/openclash/openclash_watchdog.sh
@@ -34,8 +34,21 @@ STREAM_DOMAINS_PREFETCH=1
 STREAM_AUTO_SELECT=1
 FW4=$(command -v fw4)
 
+# Assume we have bpftool sets would set ebpf marker to 1
+KERNEL_EBPF_SUPPORT=$(bpftool version > /dev/null 2>&1 && echo '1' || echo '0')
+# eBPF configuration
+if [[ "$en_mode" == "redir-host-tun" && "${KERNEL_EBPF_SUPPORT}" == "1" ]]; then
+   ebpf_int_name=$(uci -q get openclash.config.ebpf_action_interface || echo "0")
+   # Enhanced capabilities
+   capabilties="cap_sys_resource,cap_dac_override,cap_net_raw,cap_net_bind_service,cap_net_admin,cap_sys_ptrace,cap_sys_admin,CAP_PERFMON,cap_bpf"
+else
+   ebpf_int_name=$(echo "0")
+   # Regular capabilities
+   capabilties="cap_sys_resource,cap_dac_override,cap_net_raw,cap_net_bind_service,cap_net_admin,cap_sys_ptrace,cap_sys_admin"
+fi
+
 check_dnsmasq() {
-   if [ -z "$(echo "$en_mode" |grep "redir-host")" ] && [ "$china_ip_route" -ne 0 ] && [ "$enable_redirect_dns" == "1" ]; then
+   if [ -z "$(echo "$en_mode" |grep "redir-host")" ] && [ "$china_ip_route" -ne 0 ] && [ "$enable_redirect_dns" == "1" ] && [ "${ebpf_int_name}" == "0" ]; then
       DNSPORT=$(uci -q get dhcp.@dnsmasq[0].port)
       if [ -z "$DNSPORT" ]; then
          DNSPORT=$(netstat -nlp |grep -E '127.0.0.1:.*dnsmasq' |awk -F '127.0.0.1:' '{print $2}' |awk '{print $1}' |head -1 || echo 53)
@@ -180,7 +193,7 @@ if [ "$enable" -eq 1 ]; then
          chmod o+w /tmp/openclash.log 2>/dev/null
          chmod o+w /etc/openclash/cache.db 2>/dev/null
          chown nobody:nogroup /etc/openclash/core/* 2>/dev/null
-         capabilties="cap_sys_resource,cap_dac_override,cap_net_raw,cap_net_bind_service,cap_net_admin,cap_sys_ptrace,cap_sys_admin"
+         
          capsh --caps="${capabilties}+eip" -- -c "capsh --user=nobody --addamb='${capabilties}' -- -c 'nohup $CLASH -d $CLASH_CONFIG -f \"$CONFIG_FILE\" >> $LOG_FILE 2>&1 &'" >> $LOG_FILE 2>&1
 	      sleep 3
 	      if [ "$core_type" == "TUN" ] || [ "$core_type" == "Meta" ]; then
@@ -221,7 +234,7 @@ fi
 ## 端口转发重启
    last_line=$(iptables -t nat -nL PREROUTING --line-number |awk '{print $1}' 2>/dev/null |awk 'END {print}' |sed -n '$p')
    op_line=$(iptables -t nat -nL PREROUTING --line-number |grep "openclash " 2>/dev/null |awk '{print $1}' 2>/dev/null |head -1)
-   if [ "$last_line" != "$op_line" ] && [ -n "$op_line" ]; then
+   if [ "$last_line" != "$op_line" ] && [ -n "$op_line" ] && [ "${ebpf_int_name}" == "0" ]; then
       pre_lines=$(iptables -nvL PREROUTING -t nat |sed 1,2d |sed -n '/openclash /=' 2>/dev/null |sort -rn)
       for pre_line in $pre_lines; do
          iptables -t nat -D PREROUTING "$pre_line" >/dev/null 2>&1
@@ -236,90 +249,94 @@ fi
 ## Localnetwork 刷新
    wan_ip4s=$(/usr/share/openclash/openclash_get_network.lua "wanip" 2>/dev/null)
    wan_ip6s=$(ifconfig | grep 'inet6 addr' | awk '{print $3}' 2>/dev/null)
-   if [ -n "$FW4" ]; then
-      if [ -n "$wan_ip4s" ]; then
-         for wan_ip4 in $wan_ip4s; do
-            nft add element inet fw4 localnetwork { "$wan_ip4" } 2>/dev/null
-         done
-      fi
-
-      if [ "$ipv6_enable" -eq 1 ]; then
-         if [ -n "$wan_ip6s" ]; then
-            for wan_ip6 in $wan_ip6s; do
-               nft add element inet fw4 localnetwork6 { "$wan_ip6" } 2>/dev/null
+   if [ "${ebpf_int_name}" == "0" ]; then
+      if [ -n "$FW4" ]; then
+         if [ -n "$wan_ip4s" ]; then
+            for wan_ip4 in $wan_ip4s; do
+               nft add element inet fw4 localnetwork { "$wan_ip4" } 2>/dev/null
             done
          fi
-      fi
-   else
-      if [ -n "$wan_ip4s" ]; then
-         for wan_ip4 in $wan_ip4s; do
-            ipset add localnetwork "$wan_ip4" 2>/dev/null
-         done
-      fi
-      if [ "$ipv6_enable" -eq 1 ]; then
-         if [ -n "$wan_ip6s" ]; then
-            for wan_ip6 in $wan_ip6s; do
-               ipset add localnetwork6 "$wan_ip6" 2>/dev/null
+
+         if [ "$ipv6_enable" -eq 1 ]; then
+            if [ -n "$wan_ip6s" ]; then
+               for wan_ip6 in $wan_ip6s; do
+                  nft add element inet fw4 localnetwork6 { "$wan_ip6" } 2>/dev/null
+               done
+            fi
+         fi
+      else
+         if [ -n "$wan_ip4s" ]; then
+            for wan_ip4 in $wan_ip4s; do
+               ipset add localnetwork "$wan_ip4" 2>/dev/null
             done
          fi
+         if [ "$ipv6_enable" -eq 1 ]; then
+            if [ -n "$wan_ip6s" ]; then
+               for wan_ip6 in $wan_ip6s; do
+                  ipset add localnetwork6 "$wan_ip6" 2>/dev/null
+               done
+            fi
+         fi
       fi
    fi
 
 ## UPNP
-   if [ -f "$upnp_lease_file" ]; then
-      #del
-      if [ -n "$FW4" ]; then
-         for i in `$(nft list chain inet fw4 openclash_upnp |grep "return")`
-         do
-            upnp_ip=$(echo "$i" |awk -F 'ip saddr ' '{print $2}' |awk  '{print $1}')
-            upnp_dp=$(echo "$i" |awk -F 'sport ' '{print $2}' |awk  '{print $1}')
-            upnp_type=$(echo "$i" |awk -F 'sport ' '{print $1}' |awk  '{print $4}' |tr '[a-z]' '[A-Z]')
-            if [ -n "$upnp_ip" ] && [ -n "$upnp_dp" ] && [ -n "$upnp_type" ]; then
-               if [ -z "$(cat "$upnp_lease_file" |grep "$upnp_ip" |grep "$upnp_dp" |grep "$upnp_type")" ]; then
-                  handle=$(nft -a list chain inet fw4 openclash_upnp |grep "$i" |awk -F '# handle ' '{print$2}')
-                  nft delete rule inet fw4 openclash_upnp handle ${handle}
-               fi
-            fi
-         done >/dev/null 2>&1
-      else
-         for i in `$(iptables -t mangle -nL openclash_upnp |grep "RETURN")`
-         do
-            upnp_ip=$(echo "$i" |awk '{print $4}')
-            upnp_dp=$(echo "$i" |awk -F 'spt:' '{print $2}')
-            upnp_type=$(echo "$i" |awk '{print $2}' |tr '[a-z]' '[A-Z]')
-            if [ -n "$upnp_ip" ] && [ -n "$upnp_dp" ] && [ -n "$upnp_type" ]; then
-               if [ -z "$(cat "$upnp_lease_file" |grep "$upnp_ip" |grep "$upnp_dp" |grep "$upnp_type")" ]; then
-                  iptables -t mangle -D openclash_upnp -p "$upnp_type" -s "$upnp_ip" --sport "$upnp_dp" -j RETURN 2>/dev/null
+   if [ "${ebpf_int_name}" == "0" ]; then
+      if [ -f "$upnp_lease_file" ]; then
+         #del
+         if [ -n "$FW4" ]; then
+            for i in `$(nft list chain inet fw4 openclash_upnp |grep "return")`
+            do
+               upnp_ip=$(echo "$i" |awk -F 'ip saddr ' '{print $2}' |awk  '{print $1}')
+               upnp_dp=$(echo "$i" |awk -F 'sport ' '{print $2}' |awk  '{print $1}')
+               upnp_type=$(echo "$i" |awk -F 'sport ' '{print $1}' |awk  '{print $4}' |tr '[a-z]' '[A-Z]')
+               if [ -n "$upnp_ip" ] && [ -n "$upnp_dp" ] && [ -n "$upnp_type" ]; then
+                  if [ -z "$(cat "$upnp_lease_file" |grep "$upnp_ip" |grep "$upnp_dp" |grep "$upnp_type")" ]; then
+                     handle=$(nft -a list chain inet fw4 openclash_upnp |grep "$i" |awk -F '# handle ' '{print$2}')
+                     nft delete rule inet fw4 openclash_upnp handle ${handle}
+                  fi
                fi
-            fi
-         done >/dev/null 2>&1
-      fi
-      #add
-      if [ -s "$upnp_lease_file" ] && [ -n "$(iptables --line-numbers -t nat -xnvL openclash_upnp 2>/dev/null)"] || [ -n "$(nft list chain inet fw4 openclash_upnp 2>/dev/null)"]; then
-         cat "$upnp_lease_file" |while read -r line
-         do
-            if [ -n "$line" ]; then
-               upnp_ip=$(echo "$line" |awk -F ':' '{print $3}')
-               upnp_dp=$(echo "$line" |awk -F ':' '{print $4}')
-               upnp_type=$(echo "$line" |awk -F ':' '{print $1}' |tr '[A-Z]' '[a-z]')
+            done >/dev/null 2>&1
+         else
+            for i in `$(iptables -t mangle -nL openclash_upnp |grep "RETURN")`
+            do
+               upnp_ip=$(echo "$i" |awk '{print $4}')
+               upnp_dp=$(echo "$i" |awk -F 'spt:' '{print $2}')
+               upnp_type=$(echo "$i" |awk '{print $2}' |tr '[a-z]' '[A-Z]')
                if [ -n "$upnp_ip" ] && [ -n "$upnp_dp" ] && [ -n "$upnp_type" ]; then
-                  if [ -n "$FW4" ]; then
-                     if [ -z "$(nft list chain inet fw4 openclash_upnp |grep "$upnp_ip" |grep "$upnp_dp" |grep "$upnp_type")" ]; then
-                        nft add rule inet fw4 openclash_upnp ip saddr { "$upnp_ip" } "$upnp_type" sport "$upnp_dp" counter return 2>/dev/null
-                     fi
-                  else
-                     if [ -z "$(iptables -t mangle -nL openclash_upnp |grep "$upnp_ip" |grep "$upnp_dp" |grep "$upnp_type")" ]; then
-                        iptables -t mangle -A openclash_upnp -p "$upnp_type" -s "$upnp_ip" --sport "$upnp_dp" -j RETURN 2>/dev/null
+                  if [ -z "$(cat "$upnp_lease_file" |grep "$upnp_ip" |grep "$upnp_dp" |grep "$upnp_type")" ]; then
+                     iptables -t mangle -D openclash_upnp -p "$upnp_type" -s "$upnp_ip" --sport "$upnp_dp" -j RETURN 2>/dev/null
+                  fi
+               fi
+            done >/dev/null 2>&1
+         fi
+         #add
+         if [ -s "$upnp_lease_file" ] && [ -n "$(iptables --line-numbers -t nat -xnvL openclash_upnp 2>/dev/null)"] || [ -n "$(nft list chain inet fw4 openclash_upnp 2>/dev/null)"]; then
+            cat "$upnp_lease_file" |while read -r line
+            do
+               if [ -n "$line" ]; then
+                  upnp_ip=$(echo "$line" |awk -F ':' '{print $3}')
+                  upnp_dp=$(echo "$line" |awk -F ':' '{print $4}')
+                  upnp_type=$(echo "$line" |awk -F ':' '{print $1}' |tr '[A-Z]' '[a-z]')
+                  if [ -n "$upnp_ip" ] && [ -n "$upnp_dp" ] && [ -n "$upnp_type" ]; then
+                     if [ -n "$FW4" ]; then
+                        if [ -z "$(nft list chain inet fw4 openclash_upnp |grep "$upnp_ip" |grep "$upnp_dp" |grep "$upnp_type")" ]; then
+                           nft add rule inet fw4 openclash_upnp ip saddr { "$upnp_ip" } "$upnp_type" sport "$upnp_dp" counter return 2>/dev/null
+                        fi
+                     else
+                        if [ -z "$(iptables -t mangle -nL openclash_upnp |grep "$upnp_ip" |grep "$upnp_dp" |grep "$upnp_type")" ]; then
+                           iptables -t mangle -A openclash_upnp -p "$upnp_type" -s "$upnp_ip" --sport "$upnp_dp" -j RETURN 2>/dev/null
+                        fi
                      fi
                   fi
                fi
-            fi
-         done >/dev/null 2>&1
+            done >/dev/null 2>&1
+         fi
       fi
    fi
 
 ## Skip Proxies Address
-   if [ "$skip_proxy_address" -eq 1 ]; then
+   if [ "$skip_proxy_address" -eq 1 ] && [ "${ebpf_int_name}" == "0" ]; then
       if [ "$SKIP_PROXY_ADDRESS" -eq 1 ] || [ "$(expr "$SKIP_PROXY_ADDRESS" % "$SKIP_PROXY_ADDRESS_INTERVAL")" -eq 0 ]; then
          ruby -ryaml -rYAML -I "/usr/share/openclash" -E UTF-8 -e "
          begin
diff --git a/root/usr/share/openclash/yml_change.sh b/root/usr/share/openclash/yml_change.sh
index 824f3f8..9b321cb 100644
--- a/root/usr/share/openclash/yml_change.sh
+++ b/root/usr/share/openclash/yml_change.sh
@@ -16,6 +16,10 @@ enable_meta_core=$(uci -q get openclash.config.enable_meta_core || echo 0)
 china_ip_route=$(uci -q get openclash.config.china_ip_route || echo 0)
 proxy_dns_group=${36}
 
+ebpf_action_interface=${37}
+
+KERNEL_EBPF_SUPPORT=$(bpftool version > /dev/null 2>&1 && echo '1' || echo '0')
+
 lan_block_google_dns=$(uci -q get openclash.config.lan_block_google_dns_ips || uci -q get openclash.config.lan_block_google_dns_macs || echo 0)
 
 if [ -n "$(ruby_read "$5" "['tun']")" ]; then
@@ -511,6 +515,15 @@ Thread.new{
       Value.delete('ebpf');
    end;
 
+   if ${en_mode_tun} == 1 and '${1}' == 'redir-host' and '${ebpf_action_interface}' != '0' then
+      if ${KERNEL_EBPF_SUPPORT} == 1 then
+         Value_2={'redirect-to-tun'=>['${ebpf_action_interface}']};
+         Value['ebpf']=Value_2;
+      else
+         puts '${LOGTIME} Error: intend to enable ebpf interface, but no kernel support found. Ignoring...';
+      end;
+   end;
+
    if Value.key?('routing-mark') then
       Value.delete('routing-mark');
    end;
